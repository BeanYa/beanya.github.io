{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/archer/source/assets/QQQR.jpg","path":"assets/QQQR.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/algolia_logo.svg","path":"assets/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/WCQR.jpg","path":"assets/WCQR.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/bean.ico","path":"assets/bean.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/example_qr.png","path":"assets/example_qr.png","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/loading.svg","path":"assets/loading.svg","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/Misaka.jpg","path":"avatar/Misaka.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/assets/favicon.ico","path":"assets/favicon.ico","modified":0,"renderable":1},{"_id":"themes/archer/source/avatar/avatar.jpg","path":"avatar/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/css/mobile.css","path":"css/mobile.css","modified":0,"renderable":1},{"_id":"themes/archer/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff","path":"font/Source Sans Pro.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","path":"font/Source Sans Pro.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/webfontloader.min.js","path":"lib/webfontloader.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/main.js","path":"scripts/main.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/search.js","path":"scripts/search.js","modified":0,"renderable":1},{"_id":"themes/archer/source/scripts/share.js","path":"scripts/share.js","modified":0,"renderable":1},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","path":"font/Oswald-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/404-bg.jpg","path":"intro/404-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","path":"font/SourceCodePro-Regular.ttf.woff","modified":0,"renderable":1},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","path":"font/SourceCodePro-Regular.ttf.woff2","modified":0,"renderable":1},{"_id":"themes/archer/source/lib/jquery.min.js","path":"lib/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/post-bg.jpg","path":"intro/post-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/about-bg.jpg","path":"intro/about-bg.jpg","modified":0,"renderable":1},{"_id":"themes/archer/source/intro/index-bg.jpg","path":"intro/index-bg.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"2e5d7b5f1622ac47150aaa38fd37f6c8edd8585a","modified":1613232418175},{"_id":"source/README.md","hash":"4fd1bcf66602edc5ea208632e4048d33b4b56c07","modified":1613232418176},{"_id":"themes/archer/.gitattributes","hash":"82c1a621642d5b620275ae1ed59845c3f7015a64","modified":1613232418342},{"_id":"themes/archer/.eslintrc.json","hash":"5c79a54f29b1d32045e612fcb7379797d79ac380","modified":1613232418342},{"_id":"themes/archer/.gitignore","hash":"d734edbdd316a19eae0ac2421256ac60dd61a1f8","modified":1613232418344},{"_id":"themes/archer/.prettierignore","hash":"075b20da2bb3dfa7932394363d63d98cbb0b7042","modified":1613232418344},{"_id":"themes/archer/.prettierrc.js","hash":"c77c76428fb4eefd727444d97fa2733a0c10286a","modified":1613232418344},{"_id":"themes/archer/_config.yml","hash":"eacdeb562623c1277741dc9e904f8089ca493df0","modified":1613232418345},{"_id":"themes/archer/README.md","hash":"a166b2c840fdf215a38d205f33e4dc1a5f2f0769","modified":1613232418345},{"_id":"themes/archer/LICENSE","hash":"35f4fb806270f8243459c870a2141e795dfab166","modified":1613232418345},{"_id":"themes/archer/gulpfile.js","hash":"ba7c6a88298900460ddd1649300b5672956902f9","modified":1613232418365},{"_id":"themes/archer/package.json","hash":"c07c94772d0e92e77788b0fe5beb3d44eb3c245f","modified":1613232418377},{"_id":"themes/archer/webpack.prod.js","hash":"b6d35f7e9a9718b3e5e3e17c52fcc5e7c38330b0","modified":1613232418416},{"_id":"themes/archer/webpack.config.js","hash":"348da2932316c2789a3c0a3cf5efff0dd7cc4ffe","modified":1613232418415},{"_id":"source/_drafts/2018-10-29-笔试错题.md","hash":"78c138c193027cda9934e10c7ffe2996e0dd9be9","modified":1613232418177},{"_id":"source/_drafts/2019-07-17-Python-if.md","hash":"25fcd2f524aab670eb9bdbd9d1320cb71a85e03e","modified":1613233331206},{"_id":"source/_drafts/2019-07-17-Python-while.md","hash":"1ccb59d942d75b371301d3fd6635512d148d98e0","modified":1613233331266},{"_id":"source/_drafts/2019-07-17-Python-string.md","hash":"4c64600ef067b1880c2b7d52b2597c294a5d5aad","modified":1613233331237},{"_id":"source/_drafts/2019-07-17-Python-代码块.md","hash":"92c7d927c42a19a02d8e137df8ad92337d7ee25d","modified":1613233331132},{"_id":"source/_drafts/2019-07-18-Python-for.md","hash":"1e5720eae5bc32d0f729edf1e7588f58a86aef52","modified":1613233331362},{"_id":"source/_drafts/2019-07-17-Python1.md","hash":"7b1a7ecfd213cd648cc5604caa6e9dd5d424681b","modified":1613233331332},{"_id":"source/_drafts/2019-07-24-Pyhton-Funtion.md","hash":"a02b8e619f85255a3d4e716e8e8f55f802c23312","modified":1613233331392},{"_id":"source/_drafts/2019-08-06-Python-List.md","hash":"3101101d25786b5e7bdf4a2e3c696e90cca039a5","modified":1613233331422},{"_id":"source/_drafts/2019-08-06-Python-Loop.md","hash":"664e7c1bf871ee896f370364c004bbff2a037373","modified":1613233331455},{"_id":"source/_drafts/DraftTest.md","hash":"7a8c347f6628eb4365f7454279b32f5b1f9dee14","modified":1613232418177},{"_id":"source/_drafts/python-temp.md","hash":"c7d16eb6fae784913bf459046c94ce71b56c3ab5","modified":1613232418177},{"_id":"source/about/index.md","hash":"3f859e54ec359dfd08a1410850cd78fff17277fb","modified":1613232418341},{"_id":"source/_posts/2018-11-02-二进制相关.md","hash":"cb06be9edc700826b9128e1877174848781e9be8","modified":1613232418178},{"_id":"source/_posts/2019-02-06-Travis-Hexo自动推送博客.md","hash":"02a17b6ef2d38c0bd49ded26141786298fb9b00e","modified":1613232418178},{"_id":"source/_posts/2019-02-10-Centos下防火墙-ss多端口脚本.md","hash":"4cdd6c8f81659f2e0049a04cd83d2056216c0779","modified":1613232418327},{"_id":"source/_posts/2019-02-10-查询本机IP.md","hash":"b435af0d990343ea0fde0401e67e0c75629a6e80","modified":1613232418327},{"_id":"source/_posts/2021-02-13-GHAction-Demo.md","hash":"d2781ed9c93e8df20c31c6e8f0fac9488ded588b","modified":1613232418332},{"_id":"themes/archer/docs/README-en.md","hash":"e4fff6fc13f3296c2b168ab220f847192bf1273b","modified":1613232418346},{"_id":"themes/archer/docs/develop-guide-en.md","hash":"c10293eb8ccad5d02412a1369ec1c7e77516b929","modified":1613232418347},{"_id":"themes/archer/docs/develop-guide-zh.md","hash":"522434202e5e810b3c7f9591eb3a4451a4e485f0","modified":1613232418347},{"_id":"themes/archer/dev/archer.sh","hash":"9474c501c1c55f47f02cccdd9e2039498ebc5e43","modified":1613232418346},{"_id":"themes/archer/layout/404.ejs","hash":"a054b4ea1147846bed4252dd56182cb8e32d95eb","modified":1613232418366},{"_id":"themes/archer/languages/en.yml","hash":"de8fe8ad1967854586fee2214094c4992dd05278","modified":1613232418366},{"_id":"themes/archer/languages/default.yml","hash":"0d658e8d69456d3ad72b122ff0786f3d5ff199e9","modified":1613232418365},{"_id":"themes/archer/layout/about.ejs","hash":"990df15653a99453617e72dfc195fa0a75b9a5d1","modified":1613232418374},{"_id":"themes/archer/layout/index.ejs","hash":"c9ae77cd8f7b862d23137a7b4eb5eb01b558ed33","modified":1613232418374},{"_id":"themes/archer/layout/layout.ejs","hash":"fffd1188977f74d19e2f9d267d085dddc9c6778e","modified":1613232418375},{"_id":"themes/archer/layout/post.ejs","hash":"b546d70bcf8ceedb02865742aad0cf36f88bcef9","modified":1613232418375},{"_id":"themes/archer/layout/site-meta.ejs","hash":"a9d85607fc7da51bb9becff7fe2f07a8b4fbc915","modified":1613232418375},{"_id":"source/_posts/Algorithm/2018-10-29-Marching-Square.md","hash":"c8f0751362cb3030d439866c6ae04d250f82ae7e","modified":1613232418333},{"_id":"source/_posts/Algorithm/2018-10-30-树的常用公式.md","hash":"e8645792b360d63cb878f2a44b4df1b7edd3878c","modified":1613232418333},{"_id":"source/_posts/Algorithm/2018-10-31-Sort.md","hash":"f63d673c298e82b302e84f89cb9d31b89a1afd34","modified":1613232418334},{"_id":"source/_posts/Linux/2018-10-27-Shadowsocks.md","hash":"939da5dea6629e74652e23b4c1f2beadc42910fe","modified":1613232418334},{"_id":"source/_posts/Linux/2018-10-29-NextCloud个人网盘安装.md","hash":"6f8131bacff485ceb5e64765663092f9719144f3","modified":1613232418335},{"_id":"source/_posts/Linux/2018-10-27-VPS安装宝塔面板.md","hash":"998255c69f806365f241c01806bfbf92bc0c9a4e","modified":1613232418334},{"_id":"source/_posts/Linux/2018-10-29-VPS.md","hash":"4f90ac96139c092bf66105f8fd1ababd3257be57","modified":1613232418335},{"_id":"source/_posts/Linux/2018-10-29-VPS安全防护.md","hash":"1f41f140bc109eaa810cea7fbb0ad7e96a55a5d1","modified":1613232418335},{"_id":"source/_posts/Linux/2018-10-29-WordPress安装.md","hash":"341a56e9a6f39abe8eda894b88be6e7e6764e9ab","modified":1613232418336},{"_id":"source/_posts/Markdown/2018-10-30-VideoInMarkdown-Demo.md","hash":"58e0e63a67d78982b6d4574513faf2e6ca3f73a4","modified":1613232418337},{"_id":"source/_posts/Note/2018-10-29-获取随机图片的网站.md","hash":"0de82226f72d7421a9a6c05ef68da2724bc276b8","modified":1613232418339},{"_id":"source/_posts/Markdown/2018-10-30-Markdown语法.md","hash":"c19c6fe54ce5f66e6441e552a055047ce7f9a023","modified":1613232418336},{"_id":"source/_posts/Markdown/2018-10-31-Markdown-Latex书写公式.md","hash":"4294623b543be23127cfa5032b5b1d337f817e0c","modified":1613232418337},{"_id":"source/_posts/Note/2018-11-01-Computer-Network.md","hash":"80cc9d24e3429bed89ed67eb60b8666fdc064cd5","modified":1613232418339},{"_id":"source/_posts/Math/2018-10-26-泊松过程.md","hash":"87e34cadcb97fa89d4dd341bbc42e3cd8f4890a0","modified":1613232418338},{"_id":"source/_posts/Math/2018-10-27-关系运算.md","hash":"e74a331dfd73b0fa0cbf68ef468e8e02618d0442","modified":1613232418338},{"_id":"source/_posts/Math/2018-10-27-数学期望.md","hash":"a25fe84d3c1eb4d0a72a9f1a288fcb8d98977a30","modified":1613232418338},{"_id":"source/_posts/Math/2018-10-27-贝叶斯公式.md","hash":"2d3be54f6c545cbcc180166d1875287b321edaa8","modified":1613232418338},{"_id":"source/_posts/Unity/2018-10-27-Quaternion四元数.md","hash":"3be19354164dae6647c40f2c2bd3ab0c3c3b1a92","modified":1613232418340},{"_id":"source/_posts/Unity/2018-10-27-渲染管线-Pipeline.md","hash":"3b3026dca473d1b7ae352da98970d8ac2be6fe96","modified":1613232418340},{"_id":"source/_posts/Unity/2018-10-29-Unity2D中简单的相机跟随.md","hash":"de8e43249c70088406fb6ed524a563cfb2fa898a","modified":1613232418341},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----------bug--help-wanted-or-bug-report-.md","hash":"7d1c5dbbc89b03b9e764e71aedb3f9567bed49bf","modified":1613232418343},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----feature-request-.md","hash":"ce7449948855556971a7353d4bfc7e8cd1b49634","modified":1613232418343},{"_id":"themes/archer/.github/ISSUE_TEMPLATE/-----other-issue-.md","hash":"1ee1770c446ffe4d489db8d216981f473da4addc","modified":1613232418344},{"_id":"themes/archer/layout/_partial/algolia.ejs","hash":"21765ec5abc9a65513e6bff57cb021d3b3852d35","modified":1613232418367},{"_id":"themes/archer/layout/_partial/base-background-image.ejs","hash":"a90bd2b089b335b141a6a0d8dee9a9cde60fdc5b","modified":1613232418367},{"_id":"themes/archer/layout/_partial/base-footer.ejs","hash":"a39892a6d82f46755807a3984f99b04a649db9c3","modified":1613232418367},{"_id":"themes/archer/layout/_partial/base-head.ejs","hash":"b343f5a4c8bba1c71f3229390ed83a8679c2f375","modified":1613232418368},{"_id":"themes/archer/layout/_partial/base-header.ejs","hash":"af76b1a18a63934e83b078bf5f9f886e972a0ceb","modified":1613232418368},{"_id":"themes/archer/layout/_partial/base-preload-polyfill.ejs","hash":"065f8d6c4aae6782e6819815911f7feb6402a4ec","modified":1613232418368},{"_id":"themes/archer/layout/_partial/base-social.ejs","hash":"92ac580acc20bde7b3345bfe132671b9043bfbd6","modified":1613232418369},{"_id":"themes/archer/layout/_partial/base-profile.ejs","hash":"5dadba1c15454e25740982b59ef382686f3c6e51","modified":1613232418368},{"_id":"themes/archer/layout/_partial/base-title-tags.ejs","hash":"e1b4893af2b18f502bad1b552c3f3381ecc3021f","modified":1613232418369},{"_id":"themes/archer/layout/_partial/intro-height.ejs","hash":"fc03729825ac7ffd4045f910bbd936bc5841c65e","modified":1613232418372},{"_id":"themes/archer/source/assets/QQQR.jpg","hash":"adf8bb2ea95a04784c7fe84306a33fbae1628d12","modified":1613232418378},{"_id":"themes/archer/source/assets/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1613232418379},{"_id":"themes/archer/source/assets/WCQR.jpg","hash":"62249fd56ede6225ca4f0bd41545966bb0704c55","modified":1613232418379},{"_id":"themes/archer/source/assets/bean.ico","hash":"648237ee4c0a3cc429ff39ebd456c50baf80c4fc","modified":1613232418379},{"_id":"themes/archer/source/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1613232418380},{"_id":"themes/archer/source/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1613232418381},{"_id":"themes/archer/source/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1613232418381},{"_id":"themes/archer/source/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1613232418380},{"_id":"themes/archer/source/avatar/avatar.jpg","hash":"3fed59de89dfbe3fd2267e4ef716c107ef941728","modified":1613232418382},{"_id":"themes/archer/source/css/mobile.css","hash":"770d2ffb986a814c5e5662d28d2ec38864d8b1a0","modified":1613232418382},{"_id":"themes/archer/source/css/style.css","hash":"6f5b81ab1db6db6ac5a685735e8a3efa83945512","modified":1613232418383},{"_id":"themes/archer/source/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1613232418384},{"_id":"themes/archer/source/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1613232418385},{"_id":"themes/archer/source/lib/webfontloader.min.js","hash":"6f18a92bbe8bed93113449ed6ff8d148c1e7565a","modified":1613232418402},{"_id":"themes/archer/source/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1613232418403},{"_id":"themes/archer/source/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1613232418403},{"_id":"themes/archer/source/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1613232418403},{"_id":"themes/archer/src/js/browser.js","hash":"35ea55f62c0f251817c46da0153f70aec323be3d","modified":1613232418404},{"_id":"themes/archer/src/js/fancybox.js","hash":"701720a4c56fb09d78ef3494fd3a88b4e2cde238","modified":1613232418404},{"_id":"themes/archer/src/js/init.js","hash":"0cf1eb883b87590a771b687431cc5180064d13cd","modified":1613232418404},{"_id":"themes/archer/src/js/initSidebar.js","hash":"e27d52b4ccb9502836570a0673f6b656f9ce3661","modified":1613232418405},{"_id":"themes/archer/src/js/main.js","hash":"673e19867b5ecf65b0c9c6579d40be587d0e8211","modified":1613232418405},{"_id":"themes/archer/src/js/mobile.js","hash":"cfc37862242d5b7bd17028269436d3bc42e142e8","modified":1613232418405},{"_id":"themes/archer/src/js/scroll.js","hash":"83f0885f2673234c911d84a56fcaaa020cdcc3e6","modified":1613232418406},{"_id":"themes/archer/src/js/search.js","hash":"ef6533c876831377542a57f447550689144a6b71","modified":1613232418406},{"_id":"themes/archer/src/js/sidebar.js","hash":"f2a5ec38766b3f48e3b043b84029f9da878d1c1a","modified":1613232418407},{"_id":"themes/archer/src/js/share.js","hash":"83a8ad056039cc673b939f47d69ad56337abc382","modified":1613232418406},{"_id":"themes/archer/src/js/tag.js","hash":"a868118bb0daf8902b63c48792797def36b9469a","modified":1613232418407},{"_id":"themes/archer/src/js/util.js","hash":"7bec5b1ff8ee91f58d084c47e0ed3908b27adef7","modified":1613232418408},{"_id":"themes/archer/src/js/toc.js","hash":"5c4db488dc2d80315064c6832eecfb39017a8104","modified":1613232418407},{"_id":"themes/archer/src/scss/_common.scss","hash":"05162d1562d4b141d9bad44c37b0b736371d8b08","modified":1613232418408},{"_id":"themes/archer/src/scss/_mixin.scss","hash":"c6347bf137e80bb0c5b6368488ebd634c299016a","modified":1613232418408},{"_id":"themes/archer/src/scss/_normalize.scss","hash":"fb6a1349bab25b65cf89b47e136d958d10947533","modified":1613232418409},{"_id":"themes/archer/src/scss/mobile.scss","hash":"0a00e55e8b8d9551eed5966f53d8a6580b816dc5","modified":1613232418415},{"_id":"themes/archer/src/scss/_variables.scss","hash":"2264c9b671643b3c64e002f968a75355e4091b61","modified":1613232418415},{"_id":"themes/archer/src/scss/style.scss","hash":"03bca94e57bc44723f8b73bb653f3e002b4b08a8","modified":1613232418415},{"_id":"themes/archer/layout/_partial/comment/custom.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613232418370},{"_id":"themes/archer/source/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1613232418384},{"_id":"themes/archer/source/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1613232418387},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1613232418386},{"_id":"themes/archer/source/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1613232418386},{"_id":"themes/archer/source/lib/jquery.min.js","hash":"0c3192b500a4fd550e483cf77a49806a5872185b","modified":1613232418401},{"_id":"themes/archer/layout/_partial/comment/changyan.ejs","hash":"244a4c71b862e6385a6de1e83a4975418a8c6fe7","modified":1613232418369},{"_id":"themes/archer/layout/_partial/comment/disqus.ejs","hash":"cfdb15116abe89f4b54f7bb18a0b23a597c47a60","modified":1613232418370},{"_id":"themes/archer/layout/_partial/comment/gitment.ejs","hash":"c043a98e33252b9a628bfd31c4a3b2883dce2b99","modified":1613232418370},{"_id":"themes/archer/layout/_partial/comment/livere.ejs","hash":"a6acb5d7778ade98ba5b6932e38a585460513f49","modified":1613232418371},{"_id":"themes/archer/layout/_partial/comment/valine.ejs","hash":"f1f785de72e1f7056da8fdb12c85523d20a0b6b0","modified":1613232418371},{"_id":"themes/archer/layout/_partial/critical-css/critical-style.ejs","hash":"9cd4798cdcd712cc01c9e797adbb4810649310d4","modified":1613232418372},{"_id":"themes/archer/layout/_partial/comment/youyan.ejs","hash":"483c07212879b116b772f428547c9962be96d2ce","modified":1613232418371},{"_id":"themes/archer/layout/_partial/script/font-loader.ejs","hash":"4281841e5bbb5e1a83c3ebf6506dab057e1fe6b9","modified":1613232418372},{"_id":"themes/archer/layout/_partial/sidebar/base-sidebar.ejs","hash":"c5ce643a06a2103aa4ac0d8279c024f90886d37f","modified":1613232418373},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-archives.ejs","hash":"e710acbc85e1cc5ae0e7ab5b5899837b9f222b97","modified":1613232418373},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-categories.ejs","hash":"4feb7c3d17a3c8994eb095d43d75fbd0f1ed5b4f","modified":1613232418374},{"_id":"themes/archer/layout/_partial/sidebar/sidebar-tags.ejs","hash":"e96750b1aa7113322696857882b1e1fde11c1fc4","modified":1613232418374},{"_id":"themes/archer/package-lock.json","hash":"f3eae5d3878f7761231613b74be88173d3047c0c","modified":1613232418377},{"_id":"themes/archer/src/scss/_partial/_404.scss","hash":"55c33bd49880ccaaa2f5d4dff44470886c3f3633","modified":1613232418409},{"_id":"themes/archer/src/scss/_partial/_algolia.scss","hash":"08594f05f6ed238a7b79d48ebc1ff1e5c9deec46","modified":1613232418410},{"_id":"themes/archer/src/scss/_partial/_index-page.scss","hash":"82a04b6ebb684a87f486cac8f08619ecb52605fd","modified":1613232418410},{"_id":"themes/archer/src/scss/_partial/_post-page.scss","hash":"4d4713ec4b766a60577546af9f98eb721c4a63cd","modified":1613232418412},{"_id":"themes/archer/docs/snap.png","hash":"0b2a8bf016f6eed576abfdcdb7dcf8de51c12562","modified":1613232418364},{"_id":"themes/archer/source/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1613232418401},{"_id":"themes/archer/source/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1613232418389},{"_id":"themes/archer/src/scss/_partial/_partial/_footer.scss","hash":"46d315718d86e9701573df2e39299895d8ca193c","modified":1613232418411},{"_id":"themes/archer/src/scss/_partial/_partial/_header.scss","hash":"a1163d481627864e9dda441c4c356169cd33a3a1","modified":1613232418411},{"_id":"themes/archer/src/scss/_partial/_partial/_paginator.scss","hash":"1e4510959f51b5d4d3c5781468c77d25546ce905","modified":1613232418412},{"_id":"themes/archer/src/scss/_partial/_partial/_profile.scss","hash":"b6db1d4a29c34e1b834c54ca076b8084ceac4885","modified":1613232418412},{"_id":"themes/archer/src/scss/_partial/_partial/_intro.scss","hash":"b3cf7523d8e91fce92cd6a118e308632047cc7b3","modified":1613232418411},{"_id":"themes/archer/src/scss/_partial/_partial/_scrollbar.scss","hash":"c623385d72ce12fa403f5384ded79c3897d0fc9f","modified":1613232418412},{"_id":"themes/archer/src/scss/_partial/_post/_code.scss","hash":"30a3b9165c97bac6f6c795e598408639f5d9670a","modified":1613232418413},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar.scss","hash":"b41904da65b1128510d28a57142298bfd844f7f5","modified":1613232418414},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-archive.scss","hash":"28b97b11f17d57a258747bb0facae0ad1911f9d5","modified":1613232418413},{"_id":"themes/archer/src/scss/_partial/_sidebar/_sidebar-tags.scss","hash":"0691ca23bf6eabef65ff054c7710ec7432e4022c","modified":1613232418414},{"_id":"themes/archer/source/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1613232418399},{"_id":"public/atom.xml","hash":"b8854fa1af945b5afd3b9a46a186da3f83643154","modified":1613233438000},{"_id":"public/content.json","hash":"8882b4b1aecf463eeb62c5f2cc0699c66f722e5a","modified":1613233438078},{"_id":"public/sitemap.xml","hash":"ceeba7ac3c1ff601658d48fb82c538baae7fe061","modified":1613233438731},{"_id":"public/README.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1613233438931},{"_id":"public/about/index.html","hash":"61c72e90c2b2bf1cd65e31c0fc3b897a59a3a19e","modified":1613233438933},{"_id":"public/2021/02/13/GHAction-Demo/index.html","hash":"9c9bc0808003123de35fd09fff7c68a9cb2854d6","modified":1613233438980},{"_id":"public/2019/02/10/查询本机IP/index.html","hash":"e0aa7cd476802afcfb172666669ac194712ca718","modified":1613233438990},{"_id":"public/2019/02/10/Centos下防火墙-ss多端口脚本/index.html","hash":"36f5f85042069bf48565356ae7c3dc5f03b4377b","modified":1613233438990},{"_id":"public/2019/02/06/Travis-Hexo自动推送博客/index.html","hash":"efb6d1acf819a4dd4522485f754d01abe85c73b2","modified":1613233438991},{"_id":"public/2018/11/02/二进制相关/index.html","hash":"10871973cd1da5bbb7e61968246f900b9ec43ab8","modified":1613233438991},{"_id":"public/2018/11/01/Note-2018-11-01-Computer-Network/index.html","hash":"11cd1bb0cdd25a68cdc4afe1249960b26f5f3243","modified":1613233438991},{"_id":"public/2018/10/31/Algorithm-2018-10-31-Sort/index.html","hash":"5473386be120c0035fa6f65454f51bf47bc600fb","modified":1613233438991},{"_id":"public/2018/10/31/Markdown-2018-10-31-Markdown-Latex书写公式/index.html","hash":"62aba0cb224992a2770fa7f1285ec8649b58b7fc","modified":1613233438991},{"_id":"public/2018/10/30/Algorithm-2018-10-30-树的常用公式/index.html","hash":"4febbd56c46b36cd0df733744e0766226e46f6a8","modified":1613233438991},{"_id":"public/2018/10/30/Markdown-2018-10-30-Markdown语法/index.html","hash":"ed2f5557cc96174f1763bc7ef21d7f43079a78e3","modified":1613233438991},{"_id":"public/2018/10/30/Markdown-2018-10-30-VideoInMarkdown-Demo/index.html","hash":"fec96b0db8fc39ae205c8c69035903169e54c9f1","modified":1613233438991},{"_id":"public/2018/10/29/Algorithm-2018-10-29-Marching-Square/index.html","hash":"335386503f1745b19767ac52534d8f00fd38e6bb","modified":1613233438991},{"_id":"public/2018/10/29/Unity-2018-10-29-Unity2D中简单的相机跟随/index.html","hash":"fb4248625c5c001810cf326c8ef13067d3068fdf","modified":1613233438991},{"_id":"public/2018/10/29/Linux-2018-10-29-VPS安全防护/index.html","hash":"5b167d7ee939ef0b9fabb2caf1f5ded4cd7514f0","modified":1613233438991},{"_id":"public/2018/10/29/Linux-2018-10-29-VPS/index.html","hash":"a1f964d2d84f1f1430b0a2ae4ad2b7b7577dd4e1","modified":1613233438991},{"_id":"public/2018/10/29/Linux-2018-10-29-NextCloud个人网盘安装/index.html","hash":"40a043fde52e3b7815023166b6e5775f827cd442","modified":1613233438991},{"_id":"public/2018/10/29/Linux-2018-10-29-WordPress安装/index.html","hash":"2f441c7c5557e5fb97c4f972d57b09931591a432","modified":1613233438991},{"_id":"public/2018/10/29/Note-2018-10-29-获取随机图片的网站/index.html","hash":"3b8b934e4e8521d304b5e00200798a6697bf4400","modified":1613233438992},{"_id":"public/2018/10/27/Unity-2018-10-27-渲染管线-Pipeline/index.html","hash":"2ca788dd86cbb0588863364429196ebb70ab7f8e","modified":1613233438992},{"_id":"public/2018/10/27/Unity-2018-10-27-Quaternion四元数/index.html","hash":"3f562cf0d76f431b963cf2059691f297426840aa","modified":1613233438992},{"_id":"public/2018/10/27/Math-2018-10-27-贝叶斯公式/index.html","hash":"bb0a97f4b11f7cf0a08e242003db17e0cb08f81a","modified":1613233438992},{"_id":"public/2018/10/27/Math-2018-10-27-关系运算/index.html","hash":"ac5165c00cb83163d392f7e8fdc587f59b7ceef5","modified":1613233438992},{"_id":"public/2018/10/27/Math-2018-10-27-数学期望/index.html","hash":"c5afd598a66ff3bfbe5ba0edea8900bbdb80ce02","modified":1613233438992},{"_id":"public/2018/10/27/Linux-2018-10-27-VPS安装宝塔面板/index.html","hash":"e8eab04e74a2ad64713330e4b386e6e1e6a9234a","modified":1613233438992},{"_id":"public/2018/10/27/Linux-2018-10-27-Shadowsocks/index.html","hash":"341e5193a5abb287a8b4db9d65899e44c1c930ff","modified":1613233438992},{"_id":"public/2018/10/26/Math-2018-10-26-泊松过程/index.html","hash":"75c670779117557a8865199bf88f1910c7b34b07","modified":1613233438992},{"_id":"public/categories/Note/index.html","hash":"4a849a7f7bd56a9aef314a306ce520486af77863","modified":1613233438992},{"_id":"public/categories/Python/index.html","hash":"a9d7a2975ea0a7c376fd8b285d68df6d3b86c2f6","modified":1613233438992},{"_id":"public/categories/Linux/index.html","hash":"ea1a95b12025555fdc24a05c13db84dff8447357","modified":1613233438992},{"_id":"public/categories/Algorithm/index.html","hash":"00524e0a22f563026fe9c6132e9952d4804b42f2","modified":1613233438992},{"_id":"public/categories/Datastruct/index.html","hash":"618a1048b7fb64b100ff09c86d8c5dca90287bcf","modified":1613233438992},{"_id":"public/categories/Proxy/index.html","hash":"24965394724c78b9e689ea988594f932317cd60c","modified":1613233438992},{"_id":"public/categories/VPS/index.html","hash":"8ee65340560189afa5bd21d7ec35a86a227ec580","modified":1613233438992},{"_id":"public/categories/Network/index.html","hash":"f9bb249bb1436623ce4fba4fa3bd5388c78079d8","modified":1613233438992},{"_id":"public/categories/Markdown/index.html","hash":"f44cf5848db5a44e10d8c7acb16c05097ad63020","modified":1613233438992},{"_id":"public/categories/Math/index.html","hash":"c02d9b8fad4a30a7bca5028ff959a88e85fc06a8","modified":1613233438992},{"_id":"public/categories/Unity/index.html","hash":"8dbb58d55f87c67174c6dc850101a2edc4d611f8","modified":1613233438992},{"_id":"public/categories/Code/index.html","hash":"1793036d6fd37dcfe98d5bfe376f8fa522d0c671","modified":1613233438992},{"_id":"public/archives/index.html","hash":"27e97a910ba1c93c2ca7f844eb58f7641d82b5cc","modified":1613233438992},{"_id":"public/archives/page/2/index.html","hash":"d4c48d87bb8eaf6f498a91a3acecbb9841f4f983","modified":1613233438992},{"_id":"public/archives/page/3/index.html","hash":"e389d77158fd71a4d67e07600ee97a6dbd6a1e56","modified":1613233438992},{"_id":"public/archives/2018/index.html","hash":"c6bce9dcfc71a9233259e1579cb51aabb9a5b38c","modified":1613233438992},{"_id":"public/archives/2018/page/2/index.html","hash":"bf708c7e0f5abccc84747a4a05091ea2bc5f182e","modified":1613233438992},{"_id":"public/archives/2018/page/3/index.html","hash":"55c3aa79d31cc48246824b0a71b6f6fa14cbb529","modified":1613233438992},{"_id":"public/archives/2018/10/index.html","hash":"882a9466fdca3c23907858352879029b0da022e3","modified":1613233438992},{"_id":"public/archives/2018/10/page/2/index.html","hash":"2013b17f158106e3b40e44b7703117c7bc187f78","modified":1613233438992},{"_id":"public/archives/2018/11/index.html","hash":"f0deb40c70c594f703d1b7401459c933c576ba86","modified":1613233438993},{"_id":"public/archives/2019/index.html","hash":"048f391b9634d177c3f27743d62405f7b53626f2","modified":1613233438993},{"_id":"public/archives/2019/02/index.html","hash":"048f391b9634d177c3f27743d62405f7b53626f2","modified":1613233438993},{"_id":"public/archives/2021/index.html","hash":"a9d7a2975ea0a7c376fd8b285d68df6d3b86c2f6","modified":1613233438993},{"_id":"public/archives/2021/02/index.html","hash":"a9d7a2975ea0a7c376fd8b285d68df6d3b86c2f6","modified":1613233438993},{"_id":"public/index.html","hash":"d2a9e1ea1bc667ac34c9b82575fe61b24554e3ed","modified":1613233438993},{"_id":"public/page/2/index.html","hash":"78d9c32b6a4919f695cc8c35026cd1fb011733d9","modified":1613233438993},{"_id":"public/page/3/index.html","hash":"74e6c96bdc6c44835b3bb3e17bdccab13a516dca","modified":1613233438993},{"_id":"public/tags/Note/index.html","hash":"727aae1c9b97770119281c920d8522afefc0916f","modified":1613233438993},{"_id":"public/tags/Python/index.html","hash":"a9d7a2975ea0a7c376fd8b285d68df6d3b86c2f6","modified":1613233438993},{"_id":"public/tags/Binary/index.html","hash":"68af4e46e42f02f5dad7cf54845e4060f4c8e8c5","modified":1613233438993},{"_id":"public/tags/Linux/index.html","hash":"ec0bbae8c999abf439720c2ca8af2ec528e355e8","modified":1613233438993},{"_id":"public/tags/Algorithm/index.html","hash":"873cf9da75faaf46fad73fde540c8e71b96f1a8b","modified":1613233438993},{"_id":"public/tags/Sort/index.html","hash":"00524e0a22f563026fe9c6132e9952d4804b42f2","modified":1613233438993},{"_id":"public/tags/Tree/index.html","hash":"618a1048b7fb64b100ff09c86d8c5dca90287bcf","modified":1613233438993},{"_id":"public/tags/VPS/index.html","hash":"4efeb18a438fcaaa96c67739bce20ab1aef30460","modified":1613233438993},{"_id":"public/tags/Shadowsocks/index.html","hash":"24965394724c78b9e689ea988594f932317cd60c","modified":1613233438993},{"_id":"public/tags/Proxy/index.html","hash":"24965394724c78b9e689ea988594f932317cd60c","modified":1613233438993},{"_id":"public/tags/宝塔面板/index.html","hash":"8c9fd0571517b631fb810c898fe71f5a9e4ecf19","modified":1613233438993},{"_id":"public/tags/Introduction/index.html","hash":"15ae0d79d0da86c847492ca79ec481286d0f46ed","modified":1613233438993},{"_id":"public/tags/Software/index.html","hash":"18e905018197b731bd05368d9f0a52c3e3d2cde9","modified":1613233438993},{"_id":"public/tags/Web/index.html","hash":"18e905018197b731bd05368d9f0a52c3e3d2cde9","modified":1613233438993},{"_id":"public/tags/Blog/index.html","hash":"18e905018197b731bd05368d9f0a52c3e3d2cde9","modified":1613233438993},{"_id":"public/tags/Nextcloud/index.html","hash":"b76b47a08f9a966ed164c8f83857af3ba425be0e","modified":1613233438993},{"_id":"public/tags/Security/index.html","hash":"51b90f7cec15afd8563ae26cd14b933d91af3514","modified":1613233438993},{"_id":"public/tags/Demo/index.html","hash":"a31bc5e8df697c164e59f0a16cc5add823868a83","modified":1613233438993},{"_id":"public/tags/Hexo/index.html","hash":"a31bc5e8df697c164e59f0a16cc5add823868a83","modified":1613233438993},{"_id":"public/tags/Wordpress/index.html","hash":"ed6341cb4f0919ead86d058a11be070fccf77205","modified":1613233438993},{"_id":"public/tags/Markdown/index.html","hash":"b739f9f505670a0c72baeaed0e72a145af70f334","modified":1613233438993},{"_id":"public/tags/Picture/index.html","hash":"6c932d08ce3b05a326580d298b5b9d911eccea17","modified":1613233438993},{"_id":"public/tags/Website/index.html","hash":"6c932d08ce3b05a326580d298b5b9d911eccea17","modified":1613233438994},{"_id":"public/tags/API/index.html","hash":"6c932d08ce3b05a326580d298b5b9d911eccea17","modified":1613233438994},{"_id":"public/tags/Network/index.html","hash":"f9bb249bb1436623ce4fba4fa3bd5388c78079d8","modified":1613233438994},{"_id":"public/tags/Probability-Theory/index.html","hash":"c02d9b8fad4a30a7bca5028ff959a88e85fc06a8","modified":1613233438994},{"_id":"public/tags/关系运算/index.html","hash":"c0320d5428dd534e3b3e4d3caa71b884b5ee2d3d","modified":1613233438994},{"_id":"public/tags/Poisson-process/index.html","hash":"2a4e027ed85bb4725f049262326e79f6eca158f7","modified":1613233438994},{"_id":"public/tags/贝叶斯公式/index.html","hash":"a984018c17878103b245af884c62b1dfcdcc40f5","modified":1613233438994},{"_id":"public/tags/数学期望/index.html","hash":"af8ca5a1dd26bb7c73cd75b6ddaed09d7a8755b7","modified":1613233438994},{"_id":"public/tags/Math/index.html","hash":"26b7f2cb90a0597aab07ca9fb56db8b0b5fb9763","modified":1613233438994},{"_id":"public/tags/Unity/index.html","hash":"26b7f2cb90a0597aab07ca9fb56db8b0b5fb9763","modified":1613233438994},{"_id":"public/tags/GameLogic/index.html","hash":"26b7f2cb90a0597aab07ca9fb56db8b0b5fb9763","modified":1613233439000},{"_id":"public/tags/Pipeline/index.html","hash":"c23971f85cd1fffcc89c11de4048a64ed68c685c","modified":1613233439000},{"_id":"public/tags/Shader/index.html","hash":"c23971f85cd1fffcc89c11de4048a64ed68c685c","modified":1613233439000},{"_id":"public/tags/Graphic/index.html","hash":"c23971f85cd1fffcc89c11de4048a64ed68c685c","modified":1613233439000},{"_id":"public/tags/C/index.html","hash":"1793036d6fd37dcfe98d5bfe376f8fa522d0c671","modified":1613233439000},{"_id":"public/tags/Code/index.html","hash":"1793036d6fd37dcfe98d5bfe376f8fa522d0c671","modified":1613233439000},{"_id":"public/tags/Sample/index.html","hash":"1793036d6fd37dcfe98d5bfe376f8fa522d0c671","modified":1613233439000},{"_id":"public/CNAME","hash":"2e5d7b5f1622ac47150aaa38fd37f6c8edd8585a","modified":1613233439000},{"_id":"public/assets/bean.ico","hash":"648237ee4c0a3cc429ff39ebd456c50baf80c4fc","modified":1613233439000},{"_id":"public/assets/example_qr.png","hash":"cce20432c34875f4d9c6df927ede0fc0f00bb194","modified":1613233439000},{"_id":"public/assets/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1613233439001},{"_id":"public/assets/WCQR.jpg","hash":"62249fd56ede6225ca4f0bd41545966bb0704c55","modified":1613233439001},{"_id":"public/assets/loading.svg","hash":"85082b002bae1335114b71550350907884187e38","modified":1613233439001},{"_id":"public/avatar/Misaka.jpg","hash":"74a0372523f98dfbba992bf80642e160d04dc9b1","modified":1613233439001},{"_id":"public/assets/favicon.ico","hash":"8b200c575d273d41a179c102442e191414e74eae","modified":1613233439001},{"_id":"public/font/Source Sans Pro.woff","hash":"a6722c9b6439b7a020a9be3d3178970757a9265c","modified":1613233439001},{"_id":"public/font/Source Sans Pro.woff2","hash":"da65f527a8da65d5eb6721626d28cfdb46ab104a","modified":1613233439001},{"_id":"public/assets/QQQR.jpg","hash":"adf8bb2ea95a04784c7fe84306a33fbae1628d12","modified":1613233439004},{"_id":"public/avatar/avatar.jpg","hash":"3fed59de89dfbe3fd2267e4ef716c107ef941728","modified":1613233439004},{"_id":"public/font/Oswald-Regular.ttf","hash":"965d729546a43a8490ad4cf33c25ac475682100c","modified":1613233439004},{"_id":"public/intro/404-bg.jpg","hash":"3afb5bb26f4ff0bd0e0a28df955c8aa7d746d3c5","modified":1613233439004},{"_id":"public/font/SourceCodePro-Regular.ttf.woff","hash":"12eef75e1ad3eca9dae42b65505010ce4464a315","modified":1613233439004},{"_id":"public/font/SourceCodePro-Regular.ttf.woff2","hash":"f5991289ec17884cb641da0646d278d36702a190","modified":1613233439004},{"_id":"public/css/mobile.css","hash":"51d7b5cf26c8f82a3daad4bc55518673fdf281f5","modified":1613233439007},{"_id":"public/lib/webfontloader.min.js","hash":"bc6ffe9c0d8b3285564619a445c6ca575eb9d0f5","modified":1613233439007},{"_id":"public/scripts/search.js","hash":"d5f739e261e8ce74f993c6157b248663bda122bf","modified":1613233439007},{"_id":"public/css/style.css","hash":"8d319095621df622d61d5d4367be65efda250c10","modified":1613233439007},{"_id":"public/scripts/main.js","hash":"e89a9651131684204118fa74bd19cb781d76a372","modified":1613233439007},{"_id":"public/scripts/share.js","hash":"bb5bb37ce7f47f8c084b232df3e5fe2378d7ca01","modified":1613233439007},{"_id":"public/lib/jquery.min.js","hash":"0dc32db4aa9c5f03f3b38c47d883dbd4fed13aae","modified":1613233439007},{"_id":"public/intro/about-bg.jpg","hash":"ab388276822417cc4e703312c14e20280ec783b3","modified":1613233439016},{"_id":"public/intro/post-bg.jpg","hash":"525fafb2238c27754d8fa751f143ff1de9b8482d","modified":1613233439022},{"_id":"public/intro/index-bg.jpg","hash":"96b52e177b8bc53e64ec6ee1e10b2b6a4e13083b","modified":1613233439030}],"Category":[{"name":"Note","_id":"ckl3xjaoq0004cswgabtwb5br"},{"name":"Python","_id":"ckl3xjaou0009cswgvm5dg5gj"},{"name":"Linux","_id":"ckl3xjape001acswg056mxdj1"},{"name":"Algorithm","_id":"ckl3xjapz002lcswgpp8trva2"},{"name":"Datastruct","_id":"ckl3xjaq2002qcswgqqemetmd"},{"name":"Proxy","_id":"ckl3xjaq4002vcswgn8x200jg"},{"name":"VPS","_id":"ckl3xjaq70033cswgi5o55yal"},{"name":"Network","_id":"ckl3xjaqc003icswgv08liudk"},{"name":"Markdown","_id":"ckl3xjaqf003pcswgsetvap7d"},{"name":"Math","_id":"ckl3xjaqh003vcswgun7o786n"},{"name":"Unity","_id":"ckl3xjaqp004kcswg60ju253y"},{"name":"Code","_id":"ckl3xjaqq004rcswgq7hmt3vd"}],"Data":[],"Page":[{"_content":"# 本仓库目的\n\n同步Hexo中的Markdown文件","source":"README.md","raw":"# 本仓库目的\n\n同步Hexo中的Markdown文件","date":"2021-02-13T16:06:58.176Z","updated":"2021-02-13T16:06:58.176Z","path":"README.html","title":"","comments":1,"layout":"page","_id":"ckl3xjanv0000cswg963bj4vk","content":"<h1 id=\"本仓库目的\"><a href=\"#本仓库目的\" class=\"headerlink\" title=\"本仓库目的\"></a>本仓库目的</h1><p>同步Hexo中的Markdown文件</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"本仓库目的\"><a href=\"#本仓库目的\" class=\"headerlink\" title=\"本仓库目的\"></a>本仓库目的</h1><p>同步Hexo中的Markdown文件</p>\n"},{"title":"About Me","layout":"about","_content":"# Who I am ?\n\n## Bean\n\n# What I want to be ?\n\n## A Game Programmer\n\n# What this site For?\n\n## Recording something","source":"about/index.md","raw":"---\ntitle: About Me\nlayout: about\n---\n# Who I am ?\n\n## Bean\n\n# What I want to be ?\n\n## A Game Programmer\n\n# What this site For?\n\n## Recording something","date":"2021-02-13T16:06:58.341Z","updated":"2021-02-13T16:06:58.341Z","path":"about/index.html","comments":1,"_id":"ckl3xjaoo0002cswgnx4ivgtn","content":"<h1 id=\"Who-I-am\"><a href=\"#Who-I-am\" class=\"headerlink\" title=\"Who I am ?\"></a>Who I am ?</h1><h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h2><h1 id=\"What-I-want-to-be\"><a href=\"#What-I-want-to-be\" class=\"headerlink\" title=\"What I want to be ?\"></a>What I want to be ?</h1><h2 id=\"A-Game-Programmer\"><a href=\"#A-Game-Programmer\" class=\"headerlink\" title=\"A Game Programmer\"></a>A Game Programmer</h2><h1 id=\"What-this-site-For\"><a href=\"#What-this-site-For\" class=\"headerlink\" title=\"What this site For?\"></a>What this site For?</h1><h2 id=\"Recording-something\"><a href=\"#Recording-something\" class=\"headerlink\" title=\"Recording something\"></a>Recording something</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Who-I-am\"><a href=\"#Who-I-am\" class=\"headerlink\" title=\"Who I am ?\"></a>Who I am ?</h1><h2 id=\"Bean\"><a href=\"#Bean\" class=\"headerlink\" title=\"Bean\"></a>Bean</h2><h1 id=\"What-I-want-to-be\"><a href=\"#What-I-want-to-be\" class=\"headerlink\" title=\"What I want to be ?\"></a>What I want to be ?</h1><h2 id=\"A-Game-Programmer\"><a href=\"#A-Game-Programmer\" class=\"headerlink\" title=\"A Game Programmer\"></a>A Game Programmer</h2><h1 id=\"What-this-site-For\"><a href=\"#What-this-site-For\" class=\"headerlink\" title=\"What this site For?\"></a>What this site For?</h1><h2 id=\"Recording-something\"><a href=\"#Recording-something\" class=\"headerlink\" title=\"Recording something\"></a>Recording something</h2>"}],"Post":[{"title":"笔试错题","date":"2018-10-28T17:59:32.000Z","_content":"\n# 题集\n\n各种错题的合集\n\n## 龙图笔试\n\n### 选择填空\n\n#### 在[-2,2]中选取两个实数，问其和大于1的概率？\n\n* 两个数之和大于1，即$x+y>1$\n* 则分界: $x+y=1$\n* 移动未知数得: $y = 1 - x$\n* 其中 $ x \\in [-2,2] $ , $ y \\in [-2,2] $\n* 即求表达式，$y=1-x \\quad (x\\in [-2,2],y\\in[-2,2])$，在区间$[-2,2]$ 上 $y>1+x$的面积\n* 画图求面积\n\n#### 有五支队伍，打循环赛。赢+3，平+1，负-1。前三支队伍出线。问最少拿多少分可以理论出线？\n\n* 两支不能出线\n* 从最低假设开始，最后一名全输，不管多少分（问`拿`多少分）\n* 倒数第二名只赢了最后一名，拿1分\n* 倒数第三也就是正好最后一只出线的队伍，大于倒数第二即可，即拿2分\n\n#### 子网掩码和子网划分\n\n想不起原题，一样题型：\n\n192.168.1.0/24，表示32位中前24位为网络前缀（个人理解为主路由的IP地址），即还有8位用于表示`SubnetID`与`HostID`\n\n例：\n192.168.1.0/24 使用掩码255.255.255.240 划分子网，其可用子网数为（），每个子网内可用主机地址数为（）\n\n* $Length(255.255.255.240)= 8+8+8+4 = 28$，子网数为 $2^{28-24}=2^4=16$个，除去子网全0和全1的地址，子网数为$16-2=14$个。\n\n* 32位中剩余4位，同划分子网，也有$16$个HostID，再去掉全0和全1\n\n答案： $14\\quad14$\n\n### 问答题\n\n#### 写函数判断素数\n\n直接：从$2 \\rightarrow n$\n\n简化：从$2 \\rightarrow \\sqrt{n}$\n\n### 大题\n\n#### 写积分榜算法和数据结构\n\n要求：\n\n1. 全体玩家参与，玩家数量大于100k\n2. 玩家随时完成任务或活动添加积分\n3. 排行榜只显示前5000名玩家\n4. 排行榜必须实时\n\n要写出排行榜所用的数据结构和就行排行的算法伪代码\n\n## 牛客\n\n### 数组\n\n    数组 char a[]=\"ABCDEF\"\n    char b[] = {'A','B','C','D','E'}\n    \n答案：数组A比B长\n\n解析：a是字符串，以\\0结尾，比b多了一个空白字符。\n","source":"_drafts/2018-10-29-笔试错题.md","raw":"---\ntitle: 笔试错题\ndate: 2018-10-29 01:59:32\ncategories:\n- Note\ntags:\n- Interview\n- Examination Question\n- Note\n---\n\n# 题集\n\n各种错题的合集\n\n## 龙图笔试\n\n### 选择填空\n\n#### 在[-2,2]中选取两个实数，问其和大于1的概率？\n\n* 两个数之和大于1，即$x+y>1$\n* 则分界: $x+y=1$\n* 移动未知数得: $y = 1 - x$\n* 其中 $ x \\in [-2,2] $ , $ y \\in [-2,2] $\n* 即求表达式，$y=1-x \\quad (x\\in [-2,2],y\\in[-2,2])$，在区间$[-2,2]$ 上 $y>1+x$的面积\n* 画图求面积\n\n#### 有五支队伍，打循环赛。赢+3，平+1，负-1。前三支队伍出线。问最少拿多少分可以理论出线？\n\n* 两支不能出线\n* 从最低假设开始，最后一名全输，不管多少分（问`拿`多少分）\n* 倒数第二名只赢了最后一名，拿1分\n* 倒数第三也就是正好最后一只出线的队伍，大于倒数第二即可，即拿2分\n\n#### 子网掩码和子网划分\n\n想不起原题，一样题型：\n\n192.168.1.0/24，表示32位中前24位为网络前缀（个人理解为主路由的IP地址），即还有8位用于表示`SubnetID`与`HostID`\n\n例：\n192.168.1.0/24 使用掩码255.255.255.240 划分子网，其可用子网数为（），每个子网内可用主机地址数为（）\n\n* $Length(255.255.255.240)= 8+8+8+4 = 28$，子网数为 $2^{28-24}=2^4=16$个，除去子网全0和全1的地址，子网数为$16-2=14$个。\n\n* 32位中剩余4位，同划分子网，也有$16$个HostID，再去掉全0和全1\n\n答案： $14\\quad14$\n\n### 问答题\n\n#### 写函数判断素数\n\n直接：从$2 \\rightarrow n$\n\n简化：从$2 \\rightarrow \\sqrt{n}$\n\n### 大题\n\n#### 写积分榜算法和数据结构\n\n要求：\n\n1. 全体玩家参与，玩家数量大于100k\n2. 玩家随时完成任务或活动添加积分\n3. 排行榜只显示前5000名玩家\n4. 排行榜必须实时\n\n要写出排行榜所用的数据结构和就行排行的算法伪代码\n\n## 牛客\n\n### 数组\n\n    数组 char a[]=\"ABCDEF\"\n    char b[] = {'A','B','C','D','E'}\n    \n答案：数组A比B长\n\n解析：a是字符串，以\\0结尾，比b多了一个空白字符。\n","slug":"笔试错题","published":0,"updated":"2021-02-13T16:06:58.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaol0001cswgbed8vp6s","content":"<h1 id=\"题集\"><a href=\"#题集\" class=\"headerlink\" title=\"题集\"></a>题集</h1><p>各种错题的合集</p>\n<h2 id=\"龙图笔试\"><a href=\"#龙图笔试\" class=\"headerlink\" title=\"龙图笔试\"></a>龙图笔试</h2><h3 id=\"选择填空\"><a href=\"#选择填空\" class=\"headerlink\" title=\"选择填空\"></a>选择填空</h3><h4 id=\"在-2-2-中选取两个实数，问其和大于1的概率？\"><a href=\"#在-2-2-中选取两个实数，问其和大于1的概率？\" class=\"headerlink\" title=\"在[-2,2]中选取两个实数，问其和大于1的概率？\"></a>在[-2,2]中选取两个实数，问其和大于1的概率？</h4><ul>\n<li>两个数之和大于1，即$x+y&gt;1$</li>\n<li>则分界: $x+y=1$</li>\n<li>移动未知数得: $y = 1 - x$</li>\n<li>其中 $ x \\in [-2,2] $ , $ y \\in [-2,2] $</li>\n<li>即求表达式，$y=1-x \\quad (x\\in [-2,2],y\\in[-2,2])$，在区间$[-2,2]$ 上 $y&gt;1+x$的面积</li>\n<li>画图求面积</li>\n</ul>\n<h4 id=\"有五支队伍，打循环赛。赢-3，平-1，负-1。前三支队伍出线。问最少拿多少分可以理论出线？\"><a href=\"#有五支队伍，打循环赛。赢-3，平-1，负-1。前三支队伍出线。问最少拿多少分可以理论出线？\" class=\"headerlink\" title=\"有五支队伍，打循环赛。赢+3，平+1，负-1。前三支队伍出线。问最少拿多少分可以理论出线？\"></a>有五支队伍，打循环赛。赢+3，平+1，负-1。前三支队伍出线。问最少拿多少分可以理论出线？</h4><ul>\n<li>两支不能出线</li>\n<li>从最低假设开始，最后一名全输，不管多少分（问<code>拿</code>多少分）</li>\n<li>倒数第二名只赢了最后一名，拿1分</li>\n<li>倒数第三也就是正好最后一只出线的队伍，大于倒数第二即可，即拿2分</li>\n</ul>\n<h4 id=\"子网掩码和子网划分\"><a href=\"#子网掩码和子网划分\" class=\"headerlink\" title=\"子网掩码和子网划分\"></a>子网掩码和子网划分</h4><p>想不起原题，一样题型：</p>\n<p>192.168.1.0/24，表示32位中前24位为网络前缀（个人理解为主路由的IP地址），即还有8位用于表示<code>SubnetID</code>与<code>HostID</code></p>\n<p>例：<br>192.168.1.0/24 使用掩码255.255.255.240 划分子网，其可用子网数为（），每个子网内可用主机地址数为（）</p>\n<ul>\n<li><p>$Length(255.255.255.240)= 8+8+8+4 = 28$，子网数为 $2^{28-24}=2^4=16$个，除去子网全0和全1的地址，子网数为$16-2=14$个。</p>\n</li>\n<li><p>32位中剩余4位，同划分子网，也有$16$个HostID，再去掉全0和全1</p>\n</li>\n</ul>\n<p>答案： $14\\quad14$</p>\n<h3 id=\"问答题\"><a href=\"#问答题\" class=\"headerlink\" title=\"问答题\"></a>问答题</h3><h4 id=\"写函数判断素数\"><a href=\"#写函数判断素数\" class=\"headerlink\" title=\"写函数判断素数\"></a>写函数判断素数</h4><p>直接：从$2 \\rightarrow n$</p>\n<p>简化：从$2 \\rightarrow \\sqrt{n}$</p>\n<h3 id=\"大题\"><a href=\"#大题\" class=\"headerlink\" title=\"大题\"></a>大题</h3><h4 id=\"写积分榜算法和数据结构\"><a href=\"#写积分榜算法和数据结构\" class=\"headerlink\" title=\"写积分榜算法和数据结构\"></a>写积分榜算法和数据结构</h4><p>要求：</p>\n<ol>\n<li>全体玩家参与，玩家数量大于100k</li>\n<li>玩家随时完成任务或活动添加积分</li>\n<li>排行榜只显示前5000名玩家</li>\n<li>排行榜必须实时</li>\n</ol>\n<p>要写出排行榜所用的数据结构和就行排行的算法伪代码</p>\n<h2 id=\"牛客\"><a href=\"#牛客\" class=\"headerlink\" title=\"牛客\"></a>牛客</h2><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><pre><code>数组 char a[]=&quot;ABCDEF&quot;\nchar b[] = {&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;}\n</code></pre><p>答案：数组A比B长</p>\n<p>解析：a是字符串，以\\0结尾，比b多了一个空白字符。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"题集\"><a href=\"#题集\" class=\"headerlink\" title=\"题集\"></a>题集</h1><p>各种错题的合集</p>\n<h2 id=\"龙图笔试\"><a href=\"#龙图笔试\" class=\"headerlink\" title=\"龙图笔试\"></a>龙图笔试</h2><h3 id=\"选择填空\"><a href=\"#选择填空\" class=\"headerlink\" title=\"选择填空\"></a>选择填空</h3><h4 id=\"在-2-2-中选取两个实数，问其和大于1的概率？\"><a href=\"#在-2-2-中选取两个实数，问其和大于1的概率？\" class=\"headerlink\" title=\"在[-2,2]中选取两个实数，问其和大于1的概率？\"></a>在[-2,2]中选取两个实数，问其和大于1的概率？</h4><ul>\n<li>两个数之和大于1，即$x+y&gt;1$</li>\n<li>则分界: $x+y=1$</li>\n<li>移动未知数得: $y = 1 - x$</li>\n<li>其中 $ x \\in [-2,2] $ , $ y \\in [-2,2] $</li>\n<li>即求表达式，$y=1-x \\quad (x\\in [-2,2],y\\in[-2,2])$，在区间$[-2,2]$ 上 $y&gt;1+x$的面积</li>\n<li>画图求面积</li>\n</ul>\n<h4 id=\"有五支队伍，打循环赛。赢-3，平-1，负-1。前三支队伍出线。问最少拿多少分可以理论出线？\"><a href=\"#有五支队伍，打循环赛。赢-3，平-1，负-1。前三支队伍出线。问最少拿多少分可以理论出线？\" class=\"headerlink\" title=\"有五支队伍，打循环赛。赢+3，平+1，负-1。前三支队伍出线。问最少拿多少分可以理论出线？\"></a>有五支队伍，打循环赛。赢+3，平+1，负-1。前三支队伍出线。问最少拿多少分可以理论出线？</h4><ul>\n<li>两支不能出线</li>\n<li>从最低假设开始，最后一名全输，不管多少分（问<code>拿</code>多少分）</li>\n<li>倒数第二名只赢了最后一名，拿1分</li>\n<li>倒数第三也就是正好最后一只出线的队伍，大于倒数第二即可，即拿2分</li>\n</ul>\n<h4 id=\"子网掩码和子网划分\"><a href=\"#子网掩码和子网划分\" class=\"headerlink\" title=\"子网掩码和子网划分\"></a>子网掩码和子网划分</h4><p>想不起原题，一样题型：</p>\n<p>192.168.1.0/24，表示32位中前24位为网络前缀（个人理解为主路由的IP地址），即还有8位用于表示<code>SubnetID</code>与<code>HostID</code></p>\n<p>例：<br>192.168.1.0/24 使用掩码255.255.255.240 划分子网，其可用子网数为（），每个子网内可用主机地址数为（）</p>\n<ul>\n<li><p>$Length(255.255.255.240)= 8+8+8+4 = 28$，子网数为 $2^{28-24}=2^4=16$个，除去子网全0和全1的地址，子网数为$16-2=14$个。</p>\n</li>\n<li><p>32位中剩余4位，同划分子网，也有$16$个HostID，再去掉全0和全1</p>\n</li>\n</ul>\n<p>答案： $14\\quad14$</p>\n<h3 id=\"问答题\"><a href=\"#问答题\" class=\"headerlink\" title=\"问答题\"></a>问答题</h3><h4 id=\"写函数判断素数\"><a href=\"#写函数判断素数\" class=\"headerlink\" title=\"写函数判断素数\"></a>写函数判断素数</h4><p>直接：从$2 \\rightarrow n$</p>\n<p>简化：从$2 \\rightarrow \\sqrt{n}$</p>\n<h3 id=\"大题\"><a href=\"#大题\" class=\"headerlink\" title=\"大题\"></a>大题</h3><h4 id=\"写积分榜算法和数据结构\"><a href=\"#写积分榜算法和数据结构\" class=\"headerlink\" title=\"写积分榜算法和数据结构\"></a>写积分榜算法和数据结构</h4><p>要求：</p>\n<ol>\n<li>全体玩家参与，玩家数量大于100k</li>\n<li>玩家随时完成任务或活动添加积分</li>\n<li>排行榜只显示前5000名玩家</li>\n<li>排行榜必须实时</li>\n</ol>\n<p>要写出排行榜所用的数据结构和就行排行的算法伪代码</p>\n<h2 id=\"牛客\"><a href=\"#牛客\" class=\"headerlink\" title=\"牛客\"></a>牛客</h2><h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><pre><code>数组 char a[]=&quot;ABCDEF&quot;\nchar b[] = {&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;}\n</code></pre><p>答案：数组A比B长</p>\n<p>解析：a是字符串，以\\0结尾，比b多了一个空白字符。</p>\n"},{"title":"Python---if一家人","date":"2019-07-16T19:29:27.000Z","_content":"## 什么是条件控制\n\n举个栗子，现在你学会了`print('Hello World')`，感觉很枯燥，老给我哈罗干嘛呢？\n\n你现在想做一个判断 `2019` 是不是大于 `20*19`，如果大于，就打印`Yep`，告诉你真的是大于，不是就打印`Nope`，告诉你`2019`其实不大于`20*19`。\n\n怎么办呢？\n\n就需要一个东西来判断`2019<20*19`，这个布尔表达式的真(True)或假(False)，而且真和假时要打印不同的内容给我。\n\n`if`语句的作用就是用来做类似的事情的，也就是条件控制，当条件成立时执行一些操作（代码），不成立时又执行一些操作（代码）。\n\n## 补充知识\n\n`if`语句叫做条件控制语句\n\n`while`、`for`叫做循环控制语句\n\n两个都是`流程控制`的部分，代码是从头到尾顺序执行的，有一定的流程，而流程的控制就交给了`if`、`while`和`for`三种语句。\n\n### 约定\n\n成立的意思就是：布尔值为真（True）\n\n不成立的意思就是：布尔值为假（False）\n\n文章中可能时而会说成立，时而说真/假，意思是一样的，请自行代换。\n\n### 流程图\n\n程序都是按部就班，按照代码语句的顺序执行的。\n\n流程图就是为了表示代码是以怎样的一个顺序执行的图。\n\n`if`语句的流程图：\n\n![](https://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg)\n\n### 布尔表达式\n\n布尔表达式和布尔值等价，布尔表达式的结果就是布尔值。\n\n> 例如：`1<2`称作一个布尔表达式，他的值是`True`\n\n## if\n\n`if`的形式：\n\n``` python\nif 条件:\n    条件成立时执行的语句\n```\n\n`if`起的是条件控制的作用，当条件（可以是一个布尔表达式或者一个布尔值）的值为真时，执行`if`下的语句。\n\n例如：\n\n``` python\nif a is 1:\n    print('Ok')\nprint('done')\n```\n如果`a`的值是`1`那么结果就是打印了\n```\nOk\ndone\n```\n如果不是，那么只打印\n```\ndone\n```\n\n## if else\n\n`if else`的形式：\n\n``` python\nif 条件:\n    条件成立时执行的语句\nelse:\n    条件成立时执行的语句\n```\n\n跟`if`的作用是一样的，不同在于，当条件不成立时会执行`else`里的语句。\n\n例如：\n\n``` python\nif a is 1:\n    print('Ok')\nelse:\n    print('aha')\nprint('done')\n```\n\n如果`a`的值是`1`那么结果就是打印了\n\n``` python\nOk\ndone\n```\n\n如果不是，那么只打印\n\n```python\naha\ndone\n```\n\n其实也可以将`if`看做`if else`中，将`else`省略的形式\n\n## if elif\n\nelif 其实就是 else if 的意思\n\n`if elif`的形式：\n\n``` python\nif 条件A:\n    条件A成立时执行的语句\nelif 条件B:\n    条件B成立时执行的语句\n```\n\n与`if`的作用类似，但是`if elif`在于，当`if`的条件不成立的时候，进入到`elif`的条件里再次判断\n\n## if elif else\n\n`if elif else`的形式：\n\n``` python\nif 条件A:\n    条件A成立时执行的语句\nelif 条件B:\n    条件B成立时执行的语句\nelif 条件C:\n    条件C成立时执行的语句\n...\n...\n...\nelse:\n    所有条件都不成立时执行的语句\n```\n\n与`if elif`类似，只是当`if`和`elif`出现的所有条件都不成立时执行else里的语句\n\n## 小结\n\n其实`if`和`if else`、`if elif`等东西是一样的，可以看做所有的上面讲的四种语句都是`if elif else`的省略形式。\n\n也就是把所有类型的`if`逻辑控制语句，看做以`if`开头，以`else`结尾的语句，至少需要一个条件，其他条件和条件成立时执行的语句放在`elif`中（如果有的话），而且如果所有条件都不成立时不执行语句，那么`else`可以省去。","source":"_drafts/2019-07-17-Python-if.md","raw":"---\ntitle: Python---if一家人\ndate: 2019-07-17 03:29:27\ncategories:\n- Python\ntags:\n- Python\n- Note\n---\n## 什么是条件控制\n\n举个栗子，现在你学会了`print('Hello World')`，感觉很枯燥，老给我哈罗干嘛呢？\n\n你现在想做一个判断 `2019` 是不是大于 `20*19`，如果大于，就打印`Yep`，告诉你真的是大于，不是就打印`Nope`，告诉你`2019`其实不大于`20*19`。\n\n怎么办呢？\n\n就需要一个东西来判断`2019<20*19`，这个布尔表达式的真(True)或假(False)，而且真和假时要打印不同的内容给我。\n\n`if`语句的作用就是用来做类似的事情的，也就是条件控制，当条件成立时执行一些操作（代码），不成立时又执行一些操作（代码）。\n\n## 补充知识\n\n`if`语句叫做条件控制语句\n\n`while`、`for`叫做循环控制语句\n\n两个都是`流程控制`的部分，代码是从头到尾顺序执行的，有一定的流程，而流程的控制就交给了`if`、`while`和`for`三种语句。\n\n### 约定\n\n成立的意思就是：布尔值为真（True）\n\n不成立的意思就是：布尔值为假（False）\n\n文章中可能时而会说成立，时而说真/假，意思是一样的，请自行代换。\n\n### 流程图\n\n程序都是按部就班，按照代码语句的顺序执行的。\n\n流程图就是为了表示代码是以怎样的一个顺序执行的图。\n\n`if`语句的流程图：\n\n![](https://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg)\n\n### 布尔表达式\n\n布尔表达式和布尔值等价，布尔表达式的结果就是布尔值。\n\n> 例如：`1<2`称作一个布尔表达式，他的值是`True`\n\n## if\n\n`if`的形式：\n\n``` python\nif 条件:\n    条件成立时执行的语句\n```\n\n`if`起的是条件控制的作用，当条件（可以是一个布尔表达式或者一个布尔值）的值为真时，执行`if`下的语句。\n\n例如：\n\n``` python\nif a is 1:\n    print('Ok')\nprint('done')\n```\n如果`a`的值是`1`那么结果就是打印了\n```\nOk\ndone\n```\n如果不是，那么只打印\n```\ndone\n```\n\n## if else\n\n`if else`的形式：\n\n``` python\nif 条件:\n    条件成立时执行的语句\nelse:\n    条件成立时执行的语句\n```\n\n跟`if`的作用是一样的，不同在于，当条件不成立时会执行`else`里的语句。\n\n例如：\n\n``` python\nif a is 1:\n    print('Ok')\nelse:\n    print('aha')\nprint('done')\n```\n\n如果`a`的值是`1`那么结果就是打印了\n\n``` python\nOk\ndone\n```\n\n如果不是，那么只打印\n\n```python\naha\ndone\n```\n\n其实也可以将`if`看做`if else`中，将`else`省略的形式\n\n## if elif\n\nelif 其实就是 else if 的意思\n\n`if elif`的形式：\n\n``` python\nif 条件A:\n    条件A成立时执行的语句\nelif 条件B:\n    条件B成立时执行的语句\n```\n\n与`if`的作用类似，但是`if elif`在于，当`if`的条件不成立的时候，进入到`elif`的条件里再次判断\n\n## if elif else\n\n`if elif else`的形式：\n\n``` python\nif 条件A:\n    条件A成立时执行的语句\nelif 条件B:\n    条件B成立时执行的语句\nelif 条件C:\n    条件C成立时执行的语句\n...\n...\n...\nelse:\n    所有条件都不成立时执行的语句\n```\n\n与`if elif`类似，只是当`if`和`elif`出现的所有条件都不成立时执行else里的语句\n\n## 小结\n\n其实`if`和`if else`、`if elif`等东西是一样的，可以看做所有的上面讲的四种语句都是`if elif else`的省略形式。\n\n也就是把所有类型的`if`逻辑控制语句，看做以`if`开头，以`else`结尾的语句，至少需要一个条件，其他条件和条件成立时执行的语句放在`elif`中（如果有的话），而且如果所有条件都不成立时不执行语句，那么`else`可以省去。","slug":"Python-if","published":0,"updated":"2021-02-13T16:22:11.206Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaop0003cswglay0ln9i","content":"<h2 id=\"什么是条件控制\"><a href=\"#什么是条件控制\" class=\"headerlink\" title=\"什么是条件控制\"></a>什么是条件控制</h2><p>举个栗子，现在你学会了<code>print(&#39;Hello World&#39;)</code>，感觉很枯燥，老给我哈罗干嘛呢？</p>\n<p>你现在想做一个判断 <code>2019</code> 是不是大于 <code>20*19</code>，如果大于，就打印<code>Yep</code>，告诉你真的是大于，不是就打印<code>Nope</code>，告诉你<code>2019</code>其实不大于<code>20*19</code>。</p>\n<p>怎么办呢？</p>\n<p>就需要一个东西来判断<code>2019&lt;20*19</code>，这个布尔表达式的真(True)或假(False)，而且真和假时要打印不同的内容给我。</p>\n<p><code>if</code>语句的作用就是用来做类似的事情的，也就是条件控制，当条件成立时执行一些操作（代码），不成立时又执行一些操作（代码）。</p>\n<h2 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h2><p><code>if</code>语句叫做条件控制语句</p>\n<p><code>while</code>、<code>for</code>叫做循环控制语句</p>\n<p>两个都是<code>流程控制</code>的部分，代码是从头到尾顺序执行的，有一定的流程，而流程的控制就交给了<code>if</code>、<code>while</code>和<code>for</code>三种语句。</p>\n<h3 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h3><p>成立的意思就是：布尔值为真（True）</p>\n<p>不成立的意思就是：布尔值为假（False）</p>\n<p>文章中可能时而会说成立，时而说真/假，意思是一样的，请自行代换。</p>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p>程序都是按部就班，按照代码语句的顺序执行的。</p>\n<p>流程图就是为了表示代码是以怎样的一个顺序执行的图。</p>\n<p><code>if</code>语句的流程图：</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg\" alt=\"\"></p>\n<h3 id=\"布尔表达式\"><a href=\"#布尔表达式\" class=\"headerlink\" title=\"布尔表达式\"></a>布尔表达式</h3><p>布尔表达式和布尔值等价，布尔表达式的结果就是布尔值。</p>\n<blockquote>\n<p>例如：<code>1&lt;2</code>称作一个布尔表达式，他的值是<code>True</code></p>\n</blockquote>\n<h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h2><p><code>if</code>的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件:</span><br><span class=\"line\">    条件成立时执行的语句</span><br></pre></td></tr></table></figure>\n<p><code>if</code>起的是条件控制的作用，当条件（可以是一个布尔表达式或者一个布尔值）的值为真时，执行<code>if</code>下的语句。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a <span class=\"keyword\">is</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Ok'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'done'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果<code>a</code>的值是<code>1</code>那么结果就是打印了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ok</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<p>如果不是，那么只打印<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h2><p><code>if else</code>的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件:</span><br><span class=\"line\">    条件成立时执行的语句</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    条件成立时执行的语句</span><br></pre></td></tr></table></figure>\n<p>跟<code>if</code>的作用是一样的，不同在于，当条件不成立时会执行<code>else</code>里的语句。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a <span class=\"keyword\">is</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Ok'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'aha'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'done'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果<code>a</code>的值是<code>1</code>那么结果就是打印了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ok</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>如果不是，那么只打印</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aha</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>其实也可以将<code>if</code>看做<code>if else</code>中，将<code>else</code>省略的形式</p>\n<h2 id=\"if-elif\"><a href=\"#if-elif\" class=\"headerlink\" title=\"if elif\"></a>if elif</h2><p>elif 其实就是 else if 的意思</p>\n<p><code>if elif</code>的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件A:</span><br><span class=\"line\">    条件A成立时执行的语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件B:</span><br><span class=\"line\">    条件B成立时执行的语句</span><br></pre></td></tr></table></figure>\n<p>与<code>if</code>的作用类似，但是<code>if elif</code>在于，当<code>if</code>的条件不成立的时候，进入到<code>elif</code>的条件里再次判断</p>\n<h2 id=\"if-elif-else\"><a href=\"#if-elif-else\" class=\"headerlink\" title=\"if elif else\"></a>if elif else</h2><p><code>if elif else</code>的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件A:</span><br><span class=\"line\">    条件A成立时执行的语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件B:</span><br><span class=\"line\">    条件B成立时执行的语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件C:</span><br><span class=\"line\">    条件C成立时执行的语句</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    所有条件都不成立时执行的语句</span><br></pre></td></tr></table></figure>\n<p>与<code>if elif</code>类似，只是当<code>if</code>和<code>elif</code>出现的所有条件都不成立时执行else里的语句</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>其实<code>if</code>和<code>if else</code>、<code>if elif</code>等东西是一样的，可以看做所有的上面讲的四种语句都是<code>if elif else</code>的省略形式。</p>\n<p>也就是把所有类型的<code>if</code>逻辑控制语句，看做以<code>if</code>开头，以<code>else</code>结尾的语句，至少需要一个条件，其他条件和条件成立时执行的语句放在<code>elif</code>中（如果有的话），而且如果所有条件都不成立时不执行语句，那么<code>else</code>可以省去。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是条件控制\"><a href=\"#什么是条件控制\" class=\"headerlink\" title=\"什么是条件控制\"></a>什么是条件控制</h2><p>举个栗子，现在你学会了<code>print(&#39;Hello World&#39;)</code>，感觉很枯燥，老给我哈罗干嘛呢？</p>\n<p>你现在想做一个判断 <code>2019</code> 是不是大于 <code>20*19</code>，如果大于，就打印<code>Yep</code>，告诉你真的是大于，不是就打印<code>Nope</code>，告诉你<code>2019</code>其实不大于<code>20*19</code>。</p>\n<p>怎么办呢？</p>\n<p>就需要一个东西来判断<code>2019&lt;20*19</code>，这个布尔表达式的真(True)或假(False)，而且真和假时要打印不同的内容给我。</p>\n<p><code>if</code>语句的作用就是用来做类似的事情的，也就是条件控制，当条件成立时执行一些操作（代码），不成立时又执行一些操作（代码）。</p>\n<h2 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h2><p><code>if</code>语句叫做条件控制语句</p>\n<p><code>while</code>、<code>for</code>叫做循环控制语句</p>\n<p>两个都是<code>流程控制</code>的部分，代码是从头到尾顺序执行的，有一定的流程，而流程的控制就交给了<code>if</code>、<code>while</code>和<code>for</code>三种语句。</p>\n<h3 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h3><p>成立的意思就是：布尔值为真（True）</p>\n<p>不成立的意思就是：布尔值为假（False）</p>\n<p>文章中可能时而会说成立，时而说真/假，意思是一样的，请自行代换。</p>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p>程序都是按部就班，按照代码语句的顺序执行的。</p>\n<p>流程图就是为了表示代码是以怎样的一个顺序执行的图。</p>\n<p><code>if</code>语句的流程图：</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg\" alt=\"\"></p>\n<h3 id=\"布尔表达式\"><a href=\"#布尔表达式\" class=\"headerlink\" title=\"布尔表达式\"></a>布尔表达式</h3><p>布尔表达式和布尔值等价，布尔表达式的结果就是布尔值。</p>\n<blockquote>\n<p>例如：<code>1&lt;2</code>称作一个布尔表达式，他的值是<code>True</code></p>\n</blockquote>\n<h2 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h2><p><code>if</code>的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件:</span><br><span class=\"line\">    条件成立时执行的语句</span><br></pre></td></tr></table></figure>\n<p><code>if</code>起的是条件控制的作用，当条件（可以是一个布尔表达式或者一个布尔值）的值为真时，执行<code>if</code>下的语句。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a <span class=\"keyword\">is</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Ok'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'done'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果<code>a</code>的值是<code>1</code>那么结果就是打印了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ok</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<p>如果不是，那么只打印<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">done</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"if-else\"><a href=\"#if-else\" class=\"headerlink\" title=\"if else\"></a>if else</h2><p><code>if else</code>的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件:</span><br><span class=\"line\">    条件成立时执行的语句</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    条件成立时执行的语句</span><br></pre></td></tr></table></figure>\n<p>跟<code>if</code>的作用是一样的，不同在于，当条件不成立时会执行<code>else</code>里的语句。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a <span class=\"keyword\">is</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Ok'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'aha'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'done'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果<code>a</code>的值是<code>1</code>那么结果就是打印了</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ok</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>如果不是，那么只打印</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">aha</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p>其实也可以将<code>if</code>看做<code>if else</code>中，将<code>else</code>省略的形式</p>\n<h2 id=\"if-elif\"><a href=\"#if-elif\" class=\"headerlink\" title=\"if elif\"></a>if elif</h2><p>elif 其实就是 else if 的意思</p>\n<p><code>if elif</code>的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件A:</span><br><span class=\"line\">    条件A成立时执行的语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件B:</span><br><span class=\"line\">    条件B成立时执行的语句</span><br></pre></td></tr></table></figure>\n<p>与<code>if</code>的作用类似，但是<code>if elif</code>在于，当<code>if</code>的条件不成立的时候，进入到<code>elif</code>的条件里再次判断</p>\n<h2 id=\"if-elif-else\"><a href=\"#if-elif-else\" class=\"headerlink\" title=\"if elif else\"></a>if elif else</h2><p><code>if elif else</code>的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件A:</span><br><span class=\"line\">    条件A成立时执行的语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件B:</span><br><span class=\"line\">    条件B成立时执行的语句</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件C:</span><br><span class=\"line\">    条件C成立时执行的语句</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    所有条件都不成立时执行的语句</span><br></pre></td></tr></table></figure>\n<p>与<code>if elif</code>类似，只是当<code>if</code>和<code>elif</code>出现的所有条件都不成立时执行else里的语句</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>其实<code>if</code>和<code>if else</code>、<code>if elif</code>等东西是一样的，可以看做所有的上面讲的四种语句都是<code>if elif else</code>的省略形式。</p>\n<p>也就是把所有类型的<code>if</code>逻辑控制语句，看做以<code>if</code>开头，以<code>else</code>结尾的语句，至少需要一个条件，其他条件和条件成立时执行的语句放在<code>elif</code>中（如果有的话），而且如果所有条件都不成立时不执行语句，那么<code>else</code>可以省去。</p>\n"},{"title":"Python--while的循环控制","date":"2019-07-17T09:50:10.000Z","_content":"## 什么是循环\n\n举个栗子，你现在很闲，就想写一个python程序，看着他一直打印`Hello World`然后发呆。\n\n怎么办呢？\n\n总不能你要看一百万行的`Hello World`就复制粘贴打一百万行的`print('Hello World')`吧？\n\n所以就需要`while`和`for`循环来控制，循环重复的执行一段代码。\n\n本文先只讲解`while`，`for`其实也是等效的。\n\n## 补充知识\n\n`if`语句叫做条件控制语句\n\n`while`、`for`叫做循环控制语句\n\n两个都是`流程控制`的部分，代码是从头到尾顺序执行的，有一定的流程，而流程的控制就交给了`if`、`while`和`for`三种语句。\n\n### while的流程图\n\n![](https://www.runoob.com/wp-content/uploads/2014/05/while_loop_1.png)\n\n流程图可以解析成对应的`while`语句：\n\n``` python\nwhile condition:\n    statement\n    statement\n    ...\n    statement\nfurther statement\n```\n\n上面的further stateme和script都是一样的，表示接下来的代码。\n\n## while的例子\n\nrunoob(菜鸟教程)上关于循环的例子还是比较生动的\n\n![](https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm06h3ug30ci08cake.gif)\n\n## 约定\n\n成立的意思就是：布尔值为真（True）\n\n不成立的意思就是：布尔值为假（False）\n\n文章中可能时而会说成立，时而说真/假，意思是一样的，请自行代换。\n\n## while\n\n`while`分为三部分：`while关键字`、`循环条件`、`循环体`。\n\n* 关键字\n\n    关键字也就是`while`这个单词，标明这一行开始是`while`语句\n\n* 循环条件\n\n    `while`循环要执行下去的条件，当条件成立（布尔值为True）才执行`循环体`。\n\n* 循环体\n\n    由若干行相同缩进量的代码组成的代码块，当条件成立（布尔值为True）时重复执行这些语句。\n\n### while 的形式：\n\n* \n    ``` python\n    while 循环条件:\n        要循环的代码块\n    ```\n\n* \n    ``` python\n    while 循环条件:\n        要循环的语句A\n        要循环的语句B\n        ...\n    ```\n\n之前讲的代码块里，其实若干条相同缩进量的代码就是一个代码块。\n\n也就是说这两种`while`是一样的，仅仅列出来提及一下代码块的知识。\n\n>注意：语句A和语句B的缩进要相同，这样程序才会认为他们都是同级并且都是属于while的代码块的。\n\n上面两个例子中，不论是第一种的代码块还是第二种的n个语句，正确缩进的情况下，他们都是属于`while`语句的，把这个代码块（n个语句）称之为`while`语句的`循环体`\n\n判断条件是一个布尔表达式，也可以直接是一个布尔值。\n\n例如：\n\n``` python\nprint('Go')\nwhile 1<2:\n    print('Hello World')\n    print('Done')\nprint('exit this program')\n```\n\n判断的条件就是`1<2`这个布尔表达式，程序是这样执行的:\n\n1. 先执行`print('Go')`，我用来表示程序要开始执行了。\n2. 碰到`while`语句了，会先计算`while`语句的条件（表达式）的布尔值是真（True）还是假（False）\n3. 计算`1<2`的值，发现它是`True`，也就是说`while`语句的条件是成立的\n4. 去执行`while`语句里的循环体，也就是两行`print`\n5. 执行完毕后，回到`步骤(3)`，检查`while`的条件是不是成立的，发现它还是`True`,回到`步骤(4)`\n\n> 步骤(1)是用来表示程序要开始执行了，与`while`无关\n\n因为`1<2`是永远成立（布尔值为True）的，也就是`while`的条件是一直为`True`的，这个循环会一直执行，循环体外的`print('exit this program')`，被忽略了，直到程序被关闭，这种情况也称之为`死循环`。\n\n但是大多数都不会去写一个死循环的`while`，因为后面的代码都废掉了，程序会一直在`while`里转圈圈，出不来。\n\n另一个例子：\n\n``` python\nprint('Go')\na = 0\nwhile a<1000:\n    print('Hello World')\n    print('Done')\n    a = a + 1\nprint('exit this program')\n```\n\n可以看到，在`while`的循环体里执行修改条件里用到的变量是很常见的，循环体执行完之后都会去重新判断条件是否成立，不成立就跳出这个`while`循环，成立就重新执行循环体。\n\n上面的这个例子里，a一开始是0，循环体的最后一个语句：将`a`的值加1，并将新的值赋回给`a`，那么在循环1000次之后，`a`的值变成了1000,而`1000<1000`是不成立的，也就是说`while`语句的条件不成立了，那么退出`while`语句，去执行`print('exit this program')`\n\n所以，当python顺序执行下来，碰到了`while`循环的执行顺序如下：\n\n1. 判断`while`的条件是否成立\n   >布尔表达式的值是否为真，也就是True）\n2. 如果条件成立，执行`步骤(3)`和`步骤(4)`，否则执行`步骤(5)`\n3. 执行`while`里面的循环体\n   >上面例子中的`print('Hello World')`和`print('Done')`组成了`while`的循环体\n4. 执行完循环体之后，计算执行完语句后`while`的条件是否还成立，如果成立，回到`步骤(3)`，否则执行`步骤(5)`\n5. 执行`while`外面的代码块\n   >上面例子中的`print('exit this program')`","source":"_drafts/2019-07-17-Python-while.md","raw":"---\ntitle: Python--while的循环控制\ndate: 2019-07-17 17:50:10\ncategories:\n- Python\ntags:\n- Python\n- Note\n---\n## 什么是循环\n\n举个栗子，你现在很闲，就想写一个python程序，看着他一直打印`Hello World`然后发呆。\n\n怎么办呢？\n\n总不能你要看一百万行的`Hello World`就复制粘贴打一百万行的`print('Hello World')`吧？\n\n所以就需要`while`和`for`循环来控制，循环重复的执行一段代码。\n\n本文先只讲解`while`，`for`其实也是等效的。\n\n## 补充知识\n\n`if`语句叫做条件控制语句\n\n`while`、`for`叫做循环控制语句\n\n两个都是`流程控制`的部分，代码是从头到尾顺序执行的，有一定的流程，而流程的控制就交给了`if`、`while`和`for`三种语句。\n\n### while的流程图\n\n![](https://www.runoob.com/wp-content/uploads/2014/05/while_loop_1.png)\n\n流程图可以解析成对应的`while`语句：\n\n``` python\nwhile condition:\n    statement\n    statement\n    ...\n    statement\nfurther statement\n```\n\n上面的further stateme和script都是一样的，表示接下来的代码。\n\n## while的例子\n\nrunoob(菜鸟教程)上关于循环的例子还是比较生动的\n\n![](https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm06h3ug30ci08cake.gif)\n\n## 约定\n\n成立的意思就是：布尔值为真（True）\n\n不成立的意思就是：布尔值为假（False）\n\n文章中可能时而会说成立，时而说真/假，意思是一样的，请自行代换。\n\n## while\n\n`while`分为三部分：`while关键字`、`循环条件`、`循环体`。\n\n* 关键字\n\n    关键字也就是`while`这个单词，标明这一行开始是`while`语句\n\n* 循环条件\n\n    `while`循环要执行下去的条件，当条件成立（布尔值为True）才执行`循环体`。\n\n* 循环体\n\n    由若干行相同缩进量的代码组成的代码块，当条件成立（布尔值为True）时重复执行这些语句。\n\n### while 的形式：\n\n* \n    ``` python\n    while 循环条件:\n        要循环的代码块\n    ```\n\n* \n    ``` python\n    while 循环条件:\n        要循环的语句A\n        要循环的语句B\n        ...\n    ```\n\n之前讲的代码块里，其实若干条相同缩进量的代码就是一个代码块。\n\n也就是说这两种`while`是一样的，仅仅列出来提及一下代码块的知识。\n\n>注意：语句A和语句B的缩进要相同，这样程序才会认为他们都是同级并且都是属于while的代码块的。\n\n上面两个例子中，不论是第一种的代码块还是第二种的n个语句，正确缩进的情况下，他们都是属于`while`语句的，把这个代码块（n个语句）称之为`while`语句的`循环体`\n\n判断条件是一个布尔表达式，也可以直接是一个布尔值。\n\n例如：\n\n``` python\nprint('Go')\nwhile 1<2:\n    print('Hello World')\n    print('Done')\nprint('exit this program')\n```\n\n判断的条件就是`1<2`这个布尔表达式，程序是这样执行的:\n\n1. 先执行`print('Go')`，我用来表示程序要开始执行了。\n2. 碰到`while`语句了，会先计算`while`语句的条件（表达式）的布尔值是真（True）还是假（False）\n3. 计算`1<2`的值，发现它是`True`，也就是说`while`语句的条件是成立的\n4. 去执行`while`语句里的循环体，也就是两行`print`\n5. 执行完毕后，回到`步骤(3)`，检查`while`的条件是不是成立的，发现它还是`True`,回到`步骤(4)`\n\n> 步骤(1)是用来表示程序要开始执行了，与`while`无关\n\n因为`1<2`是永远成立（布尔值为True）的，也就是`while`的条件是一直为`True`的，这个循环会一直执行，循环体外的`print('exit this program')`，被忽略了，直到程序被关闭，这种情况也称之为`死循环`。\n\n但是大多数都不会去写一个死循环的`while`，因为后面的代码都废掉了，程序会一直在`while`里转圈圈，出不来。\n\n另一个例子：\n\n``` python\nprint('Go')\na = 0\nwhile a<1000:\n    print('Hello World')\n    print('Done')\n    a = a + 1\nprint('exit this program')\n```\n\n可以看到，在`while`的循环体里执行修改条件里用到的变量是很常见的，循环体执行完之后都会去重新判断条件是否成立，不成立就跳出这个`while`循环，成立就重新执行循环体。\n\n上面的这个例子里，a一开始是0，循环体的最后一个语句：将`a`的值加1，并将新的值赋回给`a`，那么在循环1000次之后，`a`的值变成了1000,而`1000<1000`是不成立的，也就是说`while`语句的条件不成立了，那么退出`while`语句，去执行`print('exit this program')`\n\n所以，当python顺序执行下来，碰到了`while`循环的执行顺序如下：\n\n1. 判断`while`的条件是否成立\n   >布尔表达式的值是否为真，也就是True）\n2. 如果条件成立，执行`步骤(3)`和`步骤(4)`，否则执行`步骤(5)`\n3. 执行`while`里面的循环体\n   >上面例子中的`print('Hello World')`和`print('Done')`组成了`while`的循环体\n4. 执行完循环体之后，计算执行完语句后`while`的条件是否还成立，如果成立，回到`步骤(3)`，否则执行`步骤(5)`\n5. 执行`while`外面的代码块\n   >上面例子中的`print('exit this program')`","slug":"Python-while","published":0,"updated":"2021-02-13T16:22:11.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaor0006cswgza3l9ov8","content":"<h2 id=\"什么是循环\"><a href=\"#什么是循环\" class=\"headerlink\" title=\"什么是循环\"></a>什么是循环</h2><p>举个栗子，你现在很闲，就想写一个python程序，看着他一直打印<code>Hello World</code>然后发呆。</p>\n<p>怎么办呢？</p>\n<p>总不能你要看一百万行的<code>Hello World</code>就复制粘贴打一百万行的<code>print(&#39;Hello World&#39;)</code>吧？</p>\n<p>所以就需要<code>while</code>和<code>for</code>循环来控制，循环重复的执行一段代码。</p>\n<p>本文先只讲解<code>while</code>，<code>for</code>其实也是等效的。</p>\n<h2 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h2><p><code>if</code>语句叫做条件控制语句</p>\n<p><code>while</code>、<code>for</code>叫做循环控制语句</p>\n<p>两个都是<code>流程控制</code>的部分，代码是从头到尾顺序执行的，有一定的流程，而流程的控制就交给了<code>if</code>、<code>while</code>和<code>for</code>三种语句。</p>\n<h3 id=\"while的流程图\"><a href=\"#while的流程图\" class=\"headerlink\" title=\"while的流程图\"></a>while的流程图</h3><p><img src=\"https://www.runoob.com/wp-content/uploads/2014/05/while_loop_1.png\" alt=\"\"></p>\n<p>流程图可以解析成对应的<code>while</code>语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> condition:</span><br><span class=\"line\">    statement</span><br><span class=\"line\">    statement</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    statement</span><br><span class=\"line\">further statement</span><br></pre></td></tr></table></figure>\n<p>上面的further stateme和script都是一样的，表示接下来的代码。</p>\n<h2 id=\"while的例子\"><a href=\"#while的例子\" class=\"headerlink\" title=\"while的例子\"></a>while的例子</h2><p>runoob(菜鸟教程)上关于循环的例子还是比较生动的</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm06h3ug30ci08cake.gif\" alt=\"\"></p>\n<h2 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h2><p>成立的意思就是：布尔值为真（True）</p>\n<p>不成立的意思就是：布尔值为假（False）</p>\n<p>文章中可能时而会说成立，时而说真/假，意思是一样的，请自行代换。</p>\n<h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><p><code>while</code>分为三部分：<code>while关键字</code>、<code>循环条件</code>、<code>循环体</code>。</p>\n<ul>\n<li><p>关键字</p>\n<p>  关键字也就是<code>while</code>这个单词，标明这一行开始是<code>while</code>语句</p>\n</li>\n<li><p>循环条件</p>\n<p>  <code>while</code>循环要执行下去的条件，当条件成立（布尔值为True）才执行<code>循环体</code>。</p>\n</li>\n<li><p>循环体</p>\n<p>  由若干行相同缩进量的代码组成的代码块，当条件成立（布尔值为True）时重复执行这些语句。</p>\n</li>\n</ul>\n<h3 id=\"while-的形式：\"><a href=\"#while-的形式：\" class=\"headerlink\" title=\"while 的形式：\"></a>while 的形式：</h3><ul>\n<li>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 循环条件:</span><br><span class=\"line\">    要循环的代码块</span><br></pre></td></tr></table></figure>\n</li>\n<li>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 循环条件:</span><br><span class=\"line\">    要循环的语句A</span><br><span class=\"line\">    要循环的语句B</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>之前讲的代码块里，其实若干条相同缩进量的代码就是一个代码块。</p>\n<p>也就是说这两种<code>while</code>是一样的，仅仅列出来提及一下代码块的知识。</p>\n<blockquote>\n<p>注意：语句A和语句B的缩进要相同，这样程序才会认为他们都是同级并且都是属于while的代码块的。</p>\n</blockquote>\n<p>上面两个例子中，不论是第一种的代码块还是第二种的n个语句，正确缩进的情况下，他们都是属于<code>while</code>语句的，把这个代码块（n个语句）称之为<code>while</code>语句的<code>循环体</code></p>\n<p>判断条件是一个布尔表达式，也可以直接是一个布尔值。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Go'</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">1</span>&lt;<span class=\"number\">2</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'Done'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'exit this program'</span>)</span><br></pre></td></tr></table></figure>\n<p>判断的条件就是<code>1&lt;2</code>这个布尔表达式，程序是这样执行的:</p>\n<ol>\n<li>先执行<code>print(&#39;Go&#39;)</code>，我用来表示程序要开始执行了。</li>\n<li>碰到<code>while</code>语句了，会先计算<code>while</code>语句的条件（表达式）的布尔值是真（True）还是假（False）</li>\n<li>计算<code>1&lt;2</code>的值，发现它是<code>True</code>，也就是说<code>while</code>语句的条件是成立的</li>\n<li>去执行<code>while</code>语句里的循环体，也就是两行<code>print</code></li>\n<li>执行完毕后，回到<code>步骤(3)</code>，检查<code>while</code>的条件是不是成立的，发现它还是<code>True</code>,回到<code>步骤(4)</code></li>\n</ol>\n<blockquote>\n<p>步骤(1)是用来表示程序要开始执行了，与<code>while</code>无关</p>\n</blockquote>\n<p>因为<code>1&lt;2</code>是永远成立（布尔值为True）的，也就是<code>while</code>的条件是一直为<code>True</code>的，这个循环会一直执行，循环体外的<code>print(&#39;exit this program&#39;)</code>，被忽略了，直到程序被关闭，这种情况也称之为<code>死循环</code>。</p>\n<p>但是大多数都不会去写一个死循环的<code>while</code>，因为后面的代码都废掉了，程序会一直在<code>while</code>里转圈圈，出不来。</p>\n<p>另一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Go'</span>)</span><br><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a&lt;<span class=\"number\">1000</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'Done'</span>)</span><br><span class=\"line\">    a = a + <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">'exit this program'</span>)</span><br></pre></td></tr></table></figure>\n<p>可以看到，在<code>while</code>的循环体里执行修改条件里用到的变量是很常见的，循环体执行完之后都会去重新判断条件是否成立，不成立就跳出这个<code>while</code>循环，成立就重新执行循环体。</p>\n<p>上面的这个例子里，a一开始是0，循环体的最后一个语句：将<code>a</code>的值加1，并将新的值赋回给<code>a</code>，那么在循环1000次之后，<code>a</code>的值变成了1000,而<code>1000&lt;1000</code>是不成立的，也就是说<code>while</code>语句的条件不成立了，那么退出<code>while</code>语句，去执行<code>print(&#39;exit this program&#39;)</code></p>\n<p>所以，当python顺序执行下来，碰到了<code>while</code>循环的执行顺序如下：</p>\n<ol>\n<li>判断<code>while</code>的条件是否成立<blockquote>\n<p>布尔表达式的值是否为真，也就是True）</p>\n</blockquote>\n</li>\n<li>如果条件成立，执行<code>步骤(3)</code>和<code>步骤(4)</code>，否则执行<code>步骤(5)</code></li>\n<li>执行<code>while</code>里面的循环体<blockquote>\n<p>上面例子中的<code>print(&#39;Hello World&#39;)</code>和<code>print(&#39;Done&#39;)</code>组成了<code>while</code>的循环体</p>\n</blockquote>\n</li>\n<li>执行完循环体之后，计算执行完语句后<code>while</code>的条件是否还成立，如果成立，回到<code>步骤(3)</code>，否则执行<code>步骤(5)</code></li>\n<li>执行<code>while</code>外面的代码块<blockquote>\n<p>上面例子中的<code>print(&#39;exit this program&#39;)</code></p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是循环\"><a href=\"#什么是循环\" class=\"headerlink\" title=\"什么是循环\"></a>什么是循环</h2><p>举个栗子，你现在很闲，就想写一个python程序，看着他一直打印<code>Hello World</code>然后发呆。</p>\n<p>怎么办呢？</p>\n<p>总不能你要看一百万行的<code>Hello World</code>就复制粘贴打一百万行的<code>print(&#39;Hello World&#39;)</code>吧？</p>\n<p>所以就需要<code>while</code>和<code>for</code>循环来控制，循环重复的执行一段代码。</p>\n<p>本文先只讲解<code>while</code>，<code>for</code>其实也是等效的。</p>\n<h2 id=\"补充知识\"><a href=\"#补充知识\" class=\"headerlink\" title=\"补充知识\"></a>补充知识</h2><p><code>if</code>语句叫做条件控制语句</p>\n<p><code>while</code>、<code>for</code>叫做循环控制语句</p>\n<p>两个都是<code>流程控制</code>的部分，代码是从头到尾顺序执行的，有一定的流程，而流程的控制就交给了<code>if</code>、<code>while</code>和<code>for</code>三种语句。</p>\n<h3 id=\"while的流程图\"><a href=\"#while的流程图\" class=\"headerlink\" title=\"while的流程图\"></a>while的流程图</h3><p><img src=\"https://www.runoob.com/wp-content/uploads/2014/05/while_loop_1.png\" alt=\"\"></p>\n<p>流程图可以解析成对应的<code>while</code>语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> condition:</span><br><span class=\"line\">    statement</span><br><span class=\"line\">    statement</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    statement</span><br><span class=\"line\">further statement</span><br></pre></td></tr></table></figure>\n<p>上面的further stateme和script都是一样的，表示接下来的代码。</p>\n<h2 id=\"while的例子\"><a href=\"#while的例子\" class=\"headerlink\" title=\"while的例子\"></a>while的例子</h2><p>runoob(菜鸟教程)上关于循环的例子还是比较生动的</p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm06h3ug30ci08cake.gif\" alt=\"\"></p>\n<h2 id=\"约定\"><a href=\"#约定\" class=\"headerlink\" title=\"约定\"></a>约定</h2><p>成立的意思就是：布尔值为真（True）</p>\n<p>不成立的意思就是：布尔值为假（False）</p>\n<p>文章中可能时而会说成立，时而说真/假，意思是一样的，请自行代换。</p>\n<h2 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h2><p><code>while</code>分为三部分：<code>while关键字</code>、<code>循环条件</code>、<code>循环体</code>。</p>\n<ul>\n<li><p>关键字</p>\n<p>  关键字也就是<code>while</code>这个单词，标明这一行开始是<code>while</code>语句</p>\n</li>\n<li><p>循环条件</p>\n<p>  <code>while</code>循环要执行下去的条件，当条件成立（布尔值为True）才执行<code>循环体</code>。</p>\n</li>\n<li><p>循环体</p>\n<p>  由若干行相同缩进量的代码组成的代码块，当条件成立（布尔值为True）时重复执行这些语句。</p>\n</li>\n</ul>\n<h3 id=\"while-的形式：\"><a href=\"#while-的形式：\" class=\"headerlink\" title=\"while 的形式：\"></a>while 的形式：</h3><ul>\n<li>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 循环条件:</span><br><span class=\"line\">    要循环的代码块</span><br></pre></td></tr></table></figure>\n</li>\n<li>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> 循环条件:</span><br><span class=\"line\">    要循环的语句A</span><br><span class=\"line\">    要循环的语句B</span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>之前讲的代码块里，其实若干条相同缩进量的代码就是一个代码块。</p>\n<p>也就是说这两种<code>while</code>是一样的，仅仅列出来提及一下代码块的知识。</p>\n<blockquote>\n<p>注意：语句A和语句B的缩进要相同，这样程序才会认为他们都是同级并且都是属于while的代码块的。</p>\n</blockquote>\n<p>上面两个例子中，不论是第一种的代码块还是第二种的n个语句，正确缩进的情况下，他们都是属于<code>while</code>语句的，把这个代码块（n个语句）称之为<code>while</code>语句的<code>循环体</code></p>\n<p>判断条件是一个布尔表达式，也可以直接是一个布尔值。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Go'</span>)</span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"number\">1</span>&lt;<span class=\"number\">2</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'Done'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'exit this program'</span>)</span><br></pre></td></tr></table></figure>\n<p>判断的条件就是<code>1&lt;2</code>这个布尔表达式，程序是这样执行的:</p>\n<ol>\n<li>先执行<code>print(&#39;Go&#39;)</code>，我用来表示程序要开始执行了。</li>\n<li>碰到<code>while</code>语句了，会先计算<code>while</code>语句的条件（表达式）的布尔值是真（True）还是假（False）</li>\n<li>计算<code>1&lt;2</code>的值，发现它是<code>True</code>，也就是说<code>while</code>语句的条件是成立的</li>\n<li>去执行<code>while</code>语句里的循环体，也就是两行<code>print</code></li>\n<li>执行完毕后，回到<code>步骤(3)</code>，检查<code>while</code>的条件是不是成立的，发现它还是<code>True</code>,回到<code>步骤(4)</code></li>\n</ol>\n<blockquote>\n<p>步骤(1)是用来表示程序要开始执行了，与<code>while</code>无关</p>\n</blockquote>\n<p>因为<code>1&lt;2</code>是永远成立（布尔值为True）的，也就是<code>while</code>的条件是一直为<code>True</code>的，这个循环会一直执行，循环体外的<code>print(&#39;exit this program&#39;)</code>，被忽略了，直到程序被关闭，这种情况也称之为<code>死循环</code>。</p>\n<p>但是大多数都不会去写一个死循环的<code>while</code>，因为后面的代码都废掉了，程序会一直在<code>while</code>里转圈圈，出不来。</p>\n<p>另一个例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Go'</span>)</span><br><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a&lt;<span class=\"number\">1000</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Hello World'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'Done'</span>)</span><br><span class=\"line\">    a = a + <span class=\"number\">1</span></span><br><span class=\"line\">print(<span class=\"string\">'exit this program'</span>)</span><br></pre></td></tr></table></figure>\n<p>可以看到，在<code>while</code>的循环体里执行修改条件里用到的变量是很常见的，循环体执行完之后都会去重新判断条件是否成立，不成立就跳出这个<code>while</code>循环，成立就重新执行循环体。</p>\n<p>上面的这个例子里，a一开始是0，循环体的最后一个语句：将<code>a</code>的值加1，并将新的值赋回给<code>a</code>，那么在循环1000次之后，<code>a</code>的值变成了1000,而<code>1000&lt;1000</code>是不成立的，也就是说<code>while</code>语句的条件不成立了，那么退出<code>while</code>语句，去执行<code>print(&#39;exit this program&#39;)</code></p>\n<p>所以，当python顺序执行下来，碰到了<code>while</code>循环的执行顺序如下：</p>\n<ol>\n<li>判断<code>while</code>的条件是否成立<blockquote>\n<p>布尔表达式的值是否为真，也就是True）</p>\n</blockquote>\n</li>\n<li>如果条件成立，执行<code>步骤(3)</code>和<code>步骤(4)</code>，否则执行<code>步骤(5)</code></li>\n<li>执行<code>while</code>里面的循环体<blockquote>\n<p>上面例子中的<code>print(&#39;Hello World&#39;)</code>和<code>print(&#39;Done&#39;)</code>组成了<code>while</code>的循环体</p>\n</blockquote>\n</li>\n<li>执行完循环体之后，计算执行完语句后<code>while</code>的条件是否还成立，如果成立，回到<code>步骤(3)</code>，否则执行<code>步骤(5)</code></li>\n<li>执行<code>while</code>外面的代码块<blockquote>\n<p>上面例子中的<code>print(&#39;exit this program&#39;)</code></p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"Python-for循环","date":"2019-07-18T09:40:32.000Z","_content":"## 什么是 for ？\n\n`for`和`while`一样，都是流程控制中控制循环的语句。\n\n## 为什么有了 while 还要 for ？\n\n现在有一个`while`循环，他的目的是执行一百次的`print('Rush B!')`\n\n``` python\na = 1\nwhile a <= 100:\n    print('Rush B!')\n    a = a + 1\n```\n\n但是有没有觉得，每次都要先声明一个变量`a`，还要在循环体里让他加`1`，是不是有些繁琐呢？\n\n`for`循环就可以省略这样的步骤\n\n同样的功能，用`for`的实现是这样的：\n\n``` python\nfor a in range(100):\n    print('Rush B!')\n```\n\n省去了变量`a`的提前声明，但是`a`在循环体里仍然是可以被访问的：\n\n``` python\nfor a in range(100):\n    print('Rush B!')\n    print('%s times!' % a)\n```\n\n其中`range(100)`是一个函数，可以生成从`0 - 99`的数字序列，也就是100个数。\n\n为什么是用`range(100)`来生成序列，下面讲解。\n\n## for 是怎么工作的？\n\n在讲`for`之前，需要知道`数组`或者`列表`的概念。\n\n### 列表\n\n列表其实就是一些变量的有序组合，注意，是`有序`组合。至于为什么强调有序，看到`set`等其他数据类型时就能明白。\n\n假设现在，你需要存储50个同学的数学成绩，在没有`列表`以前，你需要这样做：\n\n``` python\nmath1 = 0\nmath2 = 0\nmath3 = 0 \nmath4 = 0\nmath5 = 0\n...\n...\n...\nmath50 = 0\n```\n\n声明50个变量，并且一一赋值。这是很笨的方法，并且效率很低。\n\n那么，思考一下，是否为上面这些变量每一个单独命名是没有意义的呢？\n\n`列表`就派上用场了。只要简单声明，就能使用一个列表：\n\n``` python\nmath = []\n```\n\n或\n\n``` python\nmath = list()\n```\n\n不同的是，这个列表一开始并没有限定大小，它可以存储若干个数据。\n\n需要往列表里面添加数据，用函数`math.append()`。\n\n例如我想向列表里面添加1个数字`0`，那么就是：\n\n``` python\nmath.append(0)\n```\n\n并且，列表是可以被直接`print()`函数打印的。\n\n``` python\nmath = []\nmath.append(0)\nmath.append(1)\nprint(math)\n```\n\n可以得到结果\n\n``` python\n[0, 1]\n```\n\n中括号表示这是一个`列表`变量，每个元素以`,`分隔开。\n\n`列表`也是一个变量，变量名就代表了一整个`列表`，如果要访问，或者叫做获取列表里某一个元素的话怎么办呢？\n\n就需要用到下标，就像数学里头数列的累加公式里，`ai`是有下标的。\n\n下标表示，元素在`列表`中的位置，下标从`0`开始，访特定位置的`列表`元素，用`列表变量名[下标]`的方式访问。\n\n也就是说，如果现在有一个列表，存储了一组数学成绩：\n\n``` python\nmath = [10, 20, 90, 40, 30]\n```\n\n可以看出来，这个`列表`一共包含`5`个数字，下标从`0`开始。\n\n而`0->4`一共5个数字，也就是`4`是`列表`下标的最大值，`0`是最小值\n\n每一个元素的访问方式如下：\n\n* 10 ---> math[0]\n* 20 ---> math[1]\n* 90 ---> math[2]\n* 40 ---> math[3]\n* 30 ---> math[4]\n\n但是，访问`列表`的数据，不能超过列表当前的大小。\n\n比如，现在的`math`只有`5`个元素，下标最大的值是`4`，那么你如果想打印或者使用`math[5]`，那么会告诉你报错了，错误是：` list assignment index out of range`，也就是`列表`下标越界了。\n\n>可以通过`math.append(0)`来向`列表`添加元素，这里的参数`0`是任意的，意思是向`列表`添加元素`0`\n\n那么，像`列表`这一小标题开头举的例子里讲的，现在知道了能用`列表`来存储若干个数字，但是要给他们每一个都赋初始值，比如`10`，是不是还是有点麻烦？\n\n脑海里是不是想：\n\n``` python\nmath[0] = 10\nmath[1] = 10\nmath[2] = 10\n...\n...\nmath[49] = 10\n```\n\n>注意，0 -> 49 一共50个数。\n\n那么，`for`就派上用场了\n\n### for 在列表例子里的应用\n\n讲完上面的`列表`，为什么要强调有序呢？因为有序，你就可以按顺序的，访问，或者叫做获取每一个数字。\n\n你可以想象有个箭头，从`列表`的第一个元素，每次往前跳一步，一直走到最后一个元素，这个过程叫做`遍历（traverse）`。\n\n而`for`其实就是在对`列表`进行这么一个`遍历`的过程\n\n通过上一节的`函数`和这一节的`列表`，那么`range(10)`这个`函数`其实生成了一个`列表`。\n\n`列表`里面存储了一排从`0`开始，到`range(x)`的`x-1`为止的等差数列，差是`1`。\n\n>其实，`range(x)`并不是真的生成了一个`列表`，他生成的是一个`可迭代对象`，就像箭头一样，这一次需要用到它，他就告诉你是不是走到了`列表`的尾巴，如果不是，就返回这个“箭头”指向的数据，如果到尾了，那么就结束`迭代`。\n>\n>但是为了降低理解难度，目前先当做是生成了一个`列表`就好了，下面也是这么讲的。\n\n也就是：\n\n``` python \nprint(list(range(10)))\n```\n\n结果是：\n\n``` python\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n>`range(10)`省略了第一个参数，函数提供了一个默认的参数值，\n>\n>所以其实`range(10)`是`range(0,10)`，也就是`0-10`范围的整数\n>\n>这一点如果你直接`print(range(10))`可以得到结果`range(0, 10)`，也就是为什么上面的打印结果我加了一个`list()`，让他转换为`列表`。\n\n那么你就能明白，重复执行50次，不需要重新声明一个变量，再去`while`的条件里面做判断。\n\n例如，对上面的例子的补充，想对50个数学成绩`依次`赋值为`10`，用`for`可以是：\n\n``` python\nmath = []\nfor i in range(50):\n    math.append(i)\n    math[i] = 10\n```\n\n因为`列表`不能够访问超过下标的元素，所以需要每次赋值（也就是访问、使用）前，向`列表`添加一个元素，也就是`math.append(i)`的作用\n\n而`i`，其实也就是`遍历`过程中的箭头。\n\n一开始指向`range(50)`生成`列表`的第一个元素`0`，所以`i`的值就是`0`。\n\n下一次的循环里，`i`就是`1`，依次类推，直到最后一次循环，`i`的值是`49`。\n\n当然，上面这么写只是为了告诉你，需要先添加、拓展`列表`，才能访问`列表`的元素。\n\n简单的写法其实就是：\n\n``` python\nmath = []\nfor i in range(50):\n    math.append(10)\n```\n\n## 和while的区别\n\n在python里，`while`和`for`的区别在于，`while`用来广泛的判断`条件`是否成立，再进行循环。\n\n而`for`的作用在于，用来对一个`列表`进行`迭代`或者叫`遍历`。\n\n## 小结\n\n`for`的形式：\n\n``` python\nfor iterating_var in sequence:\n   statements(s)\n```\n\n每一次的循环，称作一次`迭代`，所以`iterating_var`代表的是，在这次`迭代`中，当前`列表`也就是`sequence`被指向的值。\n\n可以想象，其实也就是对一个`列表`，用一个箭头，依次的指向`列表`里的值，然后执行循环体，再移动到下一个`列表`的元素。","source":"_drafts/2019-07-18-Python-for.md","raw":"---\ntitle: Python-for循环\ndate: 2019-07-18 17:40:32\ncategories:\n- Python\ntags:\n- Python\n- Note\n---\n## 什么是 for ？\n\n`for`和`while`一样，都是流程控制中控制循环的语句。\n\n## 为什么有了 while 还要 for ？\n\n现在有一个`while`循环，他的目的是执行一百次的`print('Rush B!')`\n\n``` python\na = 1\nwhile a <= 100:\n    print('Rush B!')\n    a = a + 1\n```\n\n但是有没有觉得，每次都要先声明一个变量`a`，还要在循环体里让他加`1`，是不是有些繁琐呢？\n\n`for`循环就可以省略这样的步骤\n\n同样的功能，用`for`的实现是这样的：\n\n``` python\nfor a in range(100):\n    print('Rush B!')\n```\n\n省去了变量`a`的提前声明，但是`a`在循环体里仍然是可以被访问的：\n\n``` python\nfor a in range(100):\n    print('Rush B!')\n    print('%s times!' % a)\n```\n\n其中`range(100)`是一个函数，可以生成从`0 - 99`的数字序列，也就是100个数。\n\n为什么是用`range(100)`来生成序列，下面讲解。\n\n## for 是怎么工作的？\n\n在讲`for`之前，需要知道`数组`或者`列表`的概念。\n\n### 列表\n\n列表其实就是一些变量的有序组合，注意，是`有序`组合。至于为什么强调有序，看到`set`等其他数据类型时就能明白。\n\n假设现在，你需要存储50个同学的数学成绩，在没有`列表`以前，你需要这样做：\n\n``` python\nmath1 = 0\nmath2 = 0\nmath3 = 0 \nmath4 = 0\nmath5 = 0\n...\n...\n...\nmath50 = 0\n```\n\n声明50个变量，并且一一赋值。这是很笨的方法，并且效率很低。\n\n那么，思考一下，是否为上面这些变量每一个单独命名是没有意义的呢？\n\n`列表`就派上用场了。只要简单声明，就能使用一个列表：\n\n``` python\nmath = []\n```\n\n或\n\n``` python\nmath = list()\n```\n\n不同的是，这个列表一开始并没有限定大小，它可以存储若干个数据。\n\n需要往列表里面添加数据，用函数`math.append()`。\n\n例如我想向列表里面添加1个数字`0`，那么就是：\n\n``` python\nmath.append(0)\n```\n\n并且，列表是可以被直接`print()`函数打印的。\n\n``` python\nmath = []\nmath.append(0)\nmath.append(1)\nprint(math)\n```\n\n可以得到结果\n\n``` python\n[0, 1]\n```\n\n中括号表示这是一个`列表`变量，每个元素以`,`分隔开。\n\n`列表`也是一个变量，变量名就代表了一整个`列表`，如果要访问，或者叫做获取列表里某一个元素的话怎么办呢？\n\n就需要用到下标，就像数学里头数列的累加公式里，`ai`是有下标的。\n\n下标表示，元素在`列表`中的位置，下标从`0`开始，访特定位置的`列表`元素，用`列表变量名[下标]`的方式访问。\n\n也就是说，如果现在有一个列表，存储了一组数学成绩：\n\n``` python\nmath = [10, 20, 90, 40, 30]\n```\n\n可以看出来，这个`列表`一共包含`5`个数字，下标从`0`开始。\n\n而`0->4`一共5个数字，也就是`4`是`列表`下标的最大值，`0`是最小值\n\n每一个元素的访问方式如下：\n\n* 10 ---> math[0]\n* 20 ---> math[1]\n* 90 ---> math[2]\n* 40 ---> math[3]\n* 30 ---> math[4]\n\n但是，访问`列表`的数据，不能超过列表当前的大小。\n\n比如，现在的`math`只有`5`个元素，下标最大的值是`4`，那么你如果想打印或者使用`math[5]`，那么会告诉你报错了，错误是：` list assignment index out of range`，也就是`列表`下标越界了。\n\n>可以通过`math.append(0)`来向`列表`添加元素，这里的参数`0`是任意的，意思是向`列表`添加元素`0`\n\n那么，像`列表`这一小标题开头举的例子里讲的，现在知道了能用`列表`来存储若干个数字，但是要给他们每一个都赋初始值，比如`10`，是不是还是有点麻烦？\n\n脑海里是不是想：\n\n``` python\nmath[0] = 10\nmath[1] = 10\nmath[2] = 10\n...\n...\nmath[49] = 10\n```\n\n>注意，0 -> 49 一共50个数。\n\n那么，`for`就派上用场了\n\n### for 在列表例子里的应用\n\n讲完上面的`列表`，为什么要强调有序呢？因为有序，你就可以按顺序的，访问，或者叫做获取每一个数字。\n\n你可以想象有个箭头，从`列表`的第一个元素，每次往前跳一步，一直走到最后一个元素，这个过程叫做`遍历（traverse）`。\n\n而`for`其实就是在对`列表`进行这么一个`遍历`的过程\n\n通过上一节的`函数`和这一节的`列表`，那么`range(10)`这个`函数`其实生成了一个`列表`。\n\n`列表`里面存储了一排从`0`开始，到`range(x)`的`x-1`为止的等差数列，差是`1`。\n\n>其实，`range(x)`并不是真的生成了一个`列表`，他生成的是一个`可迭代对象`，就像箭头一样，这一次需要用到它，他就告诉你是不是走到了`列表`的尾巴，如果不是，就返回这个“箭头”指向的数据，如果到尾了，那么就结束`迭代`。\n>\n>但是为了降低理解难度，目前先当做是生成了一个`列表`就好了，下面也是这么讲的。\n\n也就是：\n\n``` python \nprint(list(range(10)))\n```\n\n结果是：\n\n``` python\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n>`range(10)`省略了第一个参数，函数提供了一个默认的参数值，\n>\n>所以其实`range(10)`是`range(0,10)`，也就是`0-10`范围的整数\n>\n>这一点如果你直接`print(range(10))`可以得到结果`range(0, 10)`，也就是为什么上面的打印结果我加了一个`list()`，让他转换为`列表`。\n\n那么你就能明白，重复执行50次，不需要重新声明一个变量，再去`while`的条件里面做判断。\n\n例如，对上面的例子的补充，想对50个数学成绩`依次`赋值为`10`，用`for`可以是：\n\n``` python\nmath = []\nfor i in range(50):\n    math.append(i)\n    math[i] = 10\n```\n\n因为`列表`不能够访问超过下标的元素，所以需要每次赋值（也就是访问、使用）前，向`列表`添加一个元素，也就是`math.append(i)`的作用\n\n而`i`，其实也就是`遍历`过程中的箭头。\n\n一开始指向`range(50)`生成`列表`的第一个元素`0`，所以`i`的值就是`0`。\n\n下一次的循环里，`i`就是`1`，依次类推，直到最后一次循环，`i`的值是`49`。\n\n当然，上面这么写只是为了告诉你，需要先添加、拓展`列表`，才能访问`列表`的元素。\n\n简单的写法其实就是：\n\n``` python\nmath = []\nfor i in range(50):\n    math.append(10)\n```\n\n## 和while的区别\n\n在python里，`while`和`for`的区别在于，`while`用来广泛的判断`条件`是否成立，再进行循环。\n\n而`for`的作用在于，用来对一个`列表`进行`迭代`或者叫`遍历`。\n\n## 小结\n\n`for`的形式：\n\n``` python\nfor iterating_var in sequence:\n   statements(s)\n```\n\n每一次的循环，称作一次`迭代`，所以`iterating_var`代表的是，在这次`迭代`中，当前`列表`也就是`sequence`被指向的值。\n\n可以想象，其实也就是对一个`列表`，用一个箭头，依次的指向`列表`里的值，然后执行循环体，再移动到下一个`列表`的元素。","slug":"Python-for","published":0,"updated":"2021-02-13T16:22:11.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaos0007cswgsgjq2m8f","content":"<h2 id=\"什么是-for-？\"><a href=\"#什么是-for-？\" class=\"headerlink\" title=\"什么是 for ？\"></a>什么是 for ？</h2><p><code>for</code>和<code>while</code>一样，都是流程控制中控制循环的语句。</p>\n<h2 id=\"为什么有了-while-还要-for-？\"><a href=\"#为什么有了-while-还要-for-？\" class=\"headerlink\" title=\"为什么有了 while 还要 for ？\"></a>为什么有了 while 还要 for ？</h2><p>现在有一个<code>while</code>循环，他的目的是执行一百次的<code>print(&#39;Rush B!&#39;)</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Rush B!'</span>)</span><br><span class=\"line\">    a = a + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>但是有没有觉得，每次都要先声明一个变量<code>a</code>，还要在循环体里让他加<code>1</code>，是不是有些繁琐呢？</p>\n<p><code>for</code>循环就可以省略这样的步骤</p>\n<p>同样的功能，用<code>for</code>的实现是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</span><br><span class=\"line\">    print(<span class=\"string\">'Rush B!'</span>)</span><br></pre></td></tr></table></figure>\n<p>省去了变量<code>a</code>的提前声明，但是<code>a</code>在循环体里仍然是可以被访问的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</span><br><span class=\"line\">    print(<span class=\"string\">'Rush B!'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'%s times!'</span> % a)</span><br></pre></td></tr></table></figure>\n<p>其中<code>range(100)</code>是一个函数，可以生成从<code>0 - 99</code>的数字序列，也就是100个数。</p>\n<p>为什么是用<code>range(100)</code>来生成序列，下面讲解。</p>\n<h2 id=\"for-是怎么工作的？\"><a href=\"#for-是怎么工作的？\" class=\"headerlink\" title=\"for 是怎么工作的？\"></a>for 是怎么工作的？</h2><p>在讲<code>for</code>之前，需要知道<code>数组</code>或者<code>列表</code>的概念。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>列表其实就是一些变量的有序组合，注意，是<code>有序</code>组合。至于为什么强调有序，看到<code>set</code>等其他数据类型时就能明白。</p>\n<p>假设现在，你需要存储50个同学的数学成绩，在没有<code>列表</code>以前，你需要这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math1 = <span class=\"number\">0</span></span><br><span class=\"line\">math2 = <span class=\"number\">0</span></span><br><span class=\"line\">math3 = <span class=\"number\">0</span> </span><br><span class=\"line\">math4 = <span class=\"number\">0</span></span><br><span class=\"line\">math5 = <span class=\"number\">0</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">math50 = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>声明50个变量，并且一一赋值。这是很笨的方法，并且效率很低。</p>\n<p>那么，思考一下，是否为上面这些变量每一个单独命名是没有意义的呢？</p>\n<p><code>列表</code>就派上用场了。只要简单声明，就能使用一个列表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = list()</span><br></pre></td></tr></table></figure>\n<p>不同的是，这个列表一开始并没有限定大小，它可以存储若干个数据。</p>\n<p>需要往列表里面添加数据，用函数<code>math.append()</code>。</p>\n<p>例如我想向列表里面添加1个数字<code>0</code>，那么就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.append(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>并且，列表是可以被直接<code>print()</code>函数打印的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br><span class=\"line\">math.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">math.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">print(math)</span><br></pre></td></tr></table></figure>\n<p>可以得到结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>中括号表示这是一个<code>列表</code>变量，每个元素以<code>,</code>分隔开。</p>\n<p><code>列表</code>也是一个变量，变量名就代表了一整个<code>列表</code>，如果要访问，或者叫做获取列表里某一个元素的话怎么办呢？</p>\n<p>就需要用到下标，就像数学里头数列的累加公式里，<code>ai</code>是有下标的。</p>\n<p>下标表示，元素在<code>列表</code>中的位置，下标从<code>0</code>开始，访特定位置的<code>列表</code>元素，用<code>列表变量名[下标]</code>的方式访问。</p>\n<p>也就是说，如果现在有一个列表，存储了一组数学成绩：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">90</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看出来，这个<code>列表</code>一共包含<code>5</code>个数字，下标从<code>0</code>开始。</p>\n<p>而<code>0-&gt;4</code>一共5个数字，也就是<code>4</code>是<code>列表</code>下标的最大值，<code>0</code>是最小值</p>\n<p>每一个元素的访问方式如下：</p>\n<ul>\n<li>10 —-&gt; math[0]</li>\n<li>20 —-&gt; math[1]</li>\n<li>90 —-&gt; math[2]</li>\n<li>40 —-&gt; math[3]</li>\n<li>30 —-&gt; math[4]</li>\n</ul>\n<p>但是，访问<code>列表</code>的数据，不能超过列表当前的大小。</p>\n<p>比如，现在的<code>math</code>只有<code>5</code>个元素，下标最大的值是<code>4</code>，那么你如果想打印或者使用<code>math[5]</code>，那么会告诉你报错了，错误是：<code>list assignment index out of range</code>，也就是<code>列表</code>下标越界了。</p>\n<blockquote>\n<p>可以通过<code>math.append(0)</code>来向<code>列表</code>添加元素，这里的参数<code>0</code>是任意的，意思是向<code>列表</code>添加元素<code>0</code></p>\n</blockquote>\n<p>那么，像<code>列表</code>这一小标题开头举的例子里讲的，现在知道了能用<code>列表</code>来存储若干个数字，但是要给他们每一个都赋初始值，比如<code>10</code>，是不是还是有点麻烦？</p>\n<p>脑海里是不是想：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math[<span class=\"number\">0</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">math[<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">math[<span class=\"number\">2</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">math[<span class=\"number\">49</span>] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，0 -&gt; 49 一共50个数。</p>\n</blockquote>\n<p>那么，<code>for</code>就派上用场了</p>\n<h3 id=\"for-在列表例子里的应用\"><a href=\"#for-在列表例子里的应用\" class=\"headerlink\" title=\"for 在列表例子里的应用\"></a>for 在列表例子里的应用</h3><p>讲完上面的<code>列表</code>，为什么要强调有序呢？因为有序，你就可以按顺序的，访问，或者叫做获取每一个数字。</p>\n<p>你可以想象有个箭头，从<code>列表</code>的第一个元素，每次往前跳一步，一直走到最后一个元素，这个过程叫做<code>遍历（traverse）</code>。</p>\n<p>而<code>for</code>其实就是在对<code>列表</code>进行这么一个<code>遍历</code>的过程</p>\n<p>通过上一节的<code>函数</code>和这一节的<code>列表</code>，那么<code>range(10)</code>这个<code>函数</code>其实生成了一个<code>列表</code>。</p>\n<p><code>列表</code>里面存储了一排从<code>0</code>开始，到<code>range(x)</code>的<code>x-1</code>为止的等差数列，差是<code>1</code>。</p>\n<blockquote>\n<p>其实，<code>range(x)</code>并不是真的生成了一个<code>列表</code>，他生成的是一个<code>可迭代对象</code>，就像箭头一样，这一次需要用到它，他就告诉你是不是走到了<code>列表</code>的尾巴，如果不是，就返回这个“箭头”指向的数据，如果到尾了，那么就结束<code>迭代</code>。</p>\n<p>但是为了降低理解难度，目前先当做是生成了一个<code>列表</code>就好了，下面也是这么讲的。</p>\n</blockquote>\n<p>也就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(list(range(<span class=\"number\">10</span>)))</span><br></pre></td></tr></table></figure>\n<p>结果是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>range(10)</code>省略了第一个参数，函数提供了一个默认的参数值，</p>\n<p>所以其实<code>range(10)</code>是<code>range(0,10)</code>，也就是<code>0-10</code>范围的整数</p>\n<p>这一点如果你直接<code>print(range(10))</code>可以得到结果<code>range(0, 10)</code>，也就是为什么上面的打印结果我加了一个<code>list()</code>，让他转换为<code>列表</code>。</p>\n</blockquote>\n<p>那么你就能明白，重复执行50次，不需要重新声明一个变量，再去<code>while</code>的条件里面做判断。</p>\n<p>例如，对上面的例子的补充，想对50个数学成绩<code>依次</code>赋值为<code>10</code>，用<code>for</code>可以是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">50</span>):</span><br><span class=\"line\">    math.append(i)</span><br><span class=\"line\">    math[i] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>因为<code>列表</code>不能够访问超过下标的元素，所以需要每次赋值（也就是访问、使用）前，向<code>列表</code>添加一个元素，也就是<code>math.append(i)</code>的作用</p>\n<p>而<code>i</code>，其实也就是<code>遍历</code>过程中的箭头。</p>\n<p>一开始指向<code>range(50)</code>生成<code>列表</code>的第一个元素<code>0</code>，所以<code>i</code>的值就是<code>0</code>。</p>\n<p>下一次的循环里，<code>i</code>就是<code>1</code>，依次类推，直到最后一次循环，<code>i</code>的值是<code>49</code>。</p>\n<p>当然，上面这么写只是为了告诉你，需要先添加、拓展<code>列表</code>，才能访问<code>列表</code>的元素。</p>\n<p>简单的写法其实就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">50</span>):</span><br><span class=\"line\">    math.append(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"和while的区别\"><a href=\"#和while的区别\" class=\"headerlink\" title=\"和while的区别\"></a>和while的区别</h2><p>在python里，<code>while</code>和<code>for</code>的区别在于，<code>while</code>用来广泛的判断<code>条件</code>是否成立，再进行循环。</p>\n<p>而<code>for</code>的作用在于，用来对一个<code>列表</code>进行<code>迭代</code>或者叫<code>遍历</code>。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><code>for</code>的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</span><br><span class=\"line\">   statements(s)</span><br></pre></td></tr></table></figure>\n<p>每一次的循环，称作一次<code>迭代</code>，所以<code>iterating_var</code>代表的是，在这次<code>迭代</code>中，当前<code>列表</code>也就是<code>sequence</code>被指向的值。</p>\n<p>可以想象，其实也就是对一个<code>列表</code>，用一个箭头，依次的指向<code>列表</code>里的值，然后执行循环体，再移动到下一个<code>列表</code>的元素。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-for-？\"><a href=\"#什么是-for-？\" class=\"headerlink\" title=\"什么是 for ？\"></a>什么是 for ？</h2><p><code>for</code>和<code>while</code>一样，都是流程控制中控制循环的语句。</p>\n<h2 id=\"为什么有了-while-还要-for-？\"><a href=\"#为什么有了-while-还要-for-？\" class=\"headerlink\" title=\"为什么有了 while 还要 for ？\"></a>为什么有了 while 还要 for ？</h2><p>现在有一个<code>while</code>循环，他的目的是执行一百次的<code>print(&#39;Rush B!&#39;)</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a &lt;= <span class=\"number\">100</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Rush B!'</span>)</span><br><span class=\"line\">    a = a + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>但是有没有觉得，每次都要先声明一个变量<code>a</code>，还要在循环体里让他加<code>1</code>，是不是有些繁琐呢？</p>\n<p><code>for</code>循环就可以省略这样的步骤</p>\n<p>同样的功能，用<code>for</code>的实现是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</span><br><span class=\"line\">    print(<span class=\"string\">'Rush B!'</span>)</span><br></pre></td></tr></table></figure>\n<p>省去了变量<code>a</code>的提前声明，但是<code>a</code>在循环体里仍然是可以被访问的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> a <span class=\"keyword\">in</span> range(<span class=\"number\">100</span>):</span><br><span class=\"line\">    print(<span class=\"string\">'Rush B!'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'%s times!'</span> % a)</span><br></pre></td></tr></table></figure>\n<p>其中<code>range(100)</code>是一个函数，可以生成从<code>0 - 99</code>的数字序列，也就是100个数。</p>\n<p>为什么是用<code>range(100)</code>来生成序列，下面讲解。</p>\n<h2 id=\"for-是怎么工作的？\"><a href=\"#for-是怎么工作的？\" class=\"headerlink\" title=\"for 是怎么工作的？\"></a>for 是怎么工作的？</h2><p>在讲<code>for</code>之前，需要知道<code>数组</code>或者<code>列表</code>的概念。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>列表其实就是一些变量的有序组合，注意，是<code>有序</code>组合。至于为什么强调有序，看到<code>set</code>等其他数据类型时就能明白。</p>\n<p>假设现在，你需要存储50个同学的数学成绩，在没有<code>列表</code>以前，你需要这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math1 = <span class=\"number\">0</span></span><br><span class=\"line\">math2 = <span class=\"number\">0</span></span><br><span class=\"line\">math3 = <span class=\"number\">0</span> </span><br><span class=\"line\">math4 = <span class=\"number\">0</span></span><br><span class=\"line\">math5 = <span class=\"number\">0</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">math50 = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>声明50个变量，并且一一赋值。这是很笨的方法，并且效率很低。</p>\n<p>那么，思考一下，是否为上面这些变量每一个单独命名是没有意义的呢？</p>\n<p><code>列表</code>就派上用场了。只要简单声明，就能使用一个列表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = list()</span><br></pre></td></tr></table></figure>\n<p>不同的是，这个列表一开始并没有限定大小，它可以存储若干个数据。</p>\n<p>需要往列表里面添加数据，用函数<code>math.append()</code>。</p>\n<p>例如我想向列表里面添加1个数字<code>0</code>，那么就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.append(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>并且，列表是可以被直接<code>print()</code>函数打印的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br><span class=\"line\">math.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">math.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">print(math)</span><br></pre></td></tr></table></figure>\n<p>可以得到结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>中括号表示这是一个<code>列表</code>变量，每个元素以<code>,</code>分隔开。</p>\n<p><code>列表</code>也是一个变量，变量名就代表了一整个<code>列表</code>，如果要访问，或者叫做获取列表里某一个元素的话怎么办呢？</p>\n<p>就需要用到下标，就像数学里头数列的累加公式里，<code>ai</code>是有下标的。</p>\n<p>下标表示，元素在<code>列表</code>中的位置，下标从<code>0</code>开始，访特定位置的<code>列表</code>元素，用<code>列表变量名[下标]</code>的方式访问。</p>\n<p>也就是说，如果现在有一个列表，存储了一组数学成绩：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">90</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看出来，这个<code>列表</code>一共包含<code>5</code>个数字，下标从<code>0</code>开始。</p>\n<p>而<code>0-&gt;4</code>一共5个数字，也就是<code>4</code>是<code>列表</code>下标的最大值，<code>0</code>是最小值</p>\n<p>每一个元素的访问方式如下：</p>\n<ul>\n<li>10 —-&gt; math[0]</li>\n<li>20 —-&gt; math[1]</li>\n<li>90 —-&gt; math[2]</li>\n<li>40 —-&gt; math[3]</li>\n<li>30 —-&gt; math[4]</li>\n</ul>\n<p>但是，访问<code>列表</code>的数据，不能超过列表当前的大小。</p>\n<p>比如，现在的<code>math</code>只有<code>5</code>个元素，下标最大的值是<code>4</code>，那么你如果想打印或者使用<code>math[5]</code>，那么会告诉你报错了，错误是：<code>list assignment index out of range</code>，也就是<code>列表</code>下标越界了。</p>\n<blockquote>\n<p>可以通过<code>math.append(0)</code>来向<code>列表</code>添加元素，这里的参数<code>0</code>是任意的，意思是向<code>列表</code>添加元素<code>0</code></p>\n</blockquote>\n<p>那么，像<code>列表</code>这一小标题开头举的例子里讲的，现在知道了能用<code>列表</code>来存储若干个数字，但是要给他们每一个都赋初始值，比如<code>10</code>，是不是还是有点麻烦？</p>\n<p>脑海里是不是想：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math[<span class=\"number\">0</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">math[<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">math[<span class=\"number\">2</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">math[<span class=\"number\">49</span>] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，0 -&gt; 49 一共50个数。</p>\n</blockquote>\n<p>那么，<code>for</code>就派上用场了</p>\n<h3 id=\"for-在列表例子里的应用\"><a href=\"#for-在列表例子里的应用\" class=\"headerlink\" title=\"for 在列表例子里的应用\"></a>for 在列表例子里的应用</h3><p>讲完上面的<code>列表</code>，为什么要强调有序呢？因为有序，你就可以按顺序的，访问，或者叫做获取每一个数字。</p>\n<p>你可以想象有个箭头，从<code>列表</code>的第一个元素，每次往前跳一步，一直走到最后一个元素，这个过程叫做<code>遍历（traverse）</code>。</p>\n<p>而<code>for</code>其实就是在对<code>列表</code>进行这么一个<code>遍历</code>的过程</p>\n<p>通过上一节的<code>函数</code>和这一节的<code>列表</code>，那么<code>range(10)</code>这个<code>函数</code>其实生成了一个<code>列表</code>。</p>\n<p><code>列表</code>里面存储了一排从<code>0</code>开始，到<code>range(x)</code>的<code>x-1</code>为止的等差数列，差是<code>1</code>。</p>\n<blockquote>\n<p>其实，<code>range(x)</code>并不是真的生成了一个<code>列表</code>，他生成的是一个<code>可迭代对象</code>，就像箭头一样，这一次需要用到它，他就告诉你是不是走到了<code>列表</code>的尾巴，如果不是，就返回这个“箭头”指向的数据，如果到尾了，那么就结束<code>迭代</code>。</p>\n<p>但是为了降低理解难度，目前先当做是生成了一个<code>列表</code>就好了，下面也是这么讲的。</p>\n</blockquote>\n<p>也就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(list(range(<span class=\"number\">10</span>)))</span><br></pre></td></tr></table></figure>\n<p>结果是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>range(10)</code>省略了第一个参数，函数提供了一个默认的参数值，</p>\n<p>所以其实<code>range(10)</code>是<code>range(0,10)</code>，也就是<code>0-10</code>范围的整数</p>\n<p>这一点如果你直接<code>print(range(10))</code>可以得到结果<code>range(0, 10)</code>，也就是为什么上面的打印结果我加了一个<code>list()</code>，让他转换为<code>列表</code>。</p>\n</blockquote>\n<p>那么你就能明白，重复执行50次，不需要重新声明一个变量，再去<code>while</code>的条件里面做判断。</p>\n<p>例如，对上面的例子的补充，想对50个数学成绩<code>依次</code>赋值为<code>10</code>，用<code>for</code>可以是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">50</span>):</span><br><span class=\"line\">    math.append(i)</span><br><span class=\"line\">    math[i] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>因为<code>列表</code>不能够访问超过下标的元素，所以需要每次赋值（也就是访问、使用）前，向<code>列表</code>添加一个元素，也就是<code>math.append(i)</code>的作用</p>\n<p>而<code>i</code>，其实也就是<code>遍历</code>过程中的箭头。</p>\n<p>一开始指向<code>range(50)</code>生成<code>列表</code>的第一个元素<code>0</code>，所以<code>i</code>的值就是<code>0</code>。</p>\n<p>下一次的循环里，<code>i</code>就是<code>1</code>，依次类推，直到最后一次循环，<code>i</code>的值是<code>49</code>。</p>\n<p>当然，上面这么写只是为了告诉你，需要先添加、拓展<code>列表</code>，才能访问<code>列表</code>的元素。</p>\n<p>简单的写法其实就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">50</span>):</span><br><span class=\"line\">    math.append(<span class=\"number\">10</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"和while的区别\"><a href=\"#和while的区别\" class=\"headerlink\" title=\"和while的区别\"></a>和while的区别</h2><p>在python里，<code>while</code>和<code>for</code>的区别在于，<code>while</code>用来广泛的判断<code>条件</code>是否成立，再进行循环。</p>\n<p>而<code>for</code>的作用在于，用来对一个<code>列表</code>进行<code>迭代</code>或者叫<code>遍历</code>。</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p><code>for</code>的形式：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> iterating_var <span class=\"keyword\">in</span> sequence:</span><br><span class=\"line\">   statements(s)</span><br></pre></td></tr></table></figure>\n<p>每一次的循环，称作一次<code>迭代</code>，所以<code>iterating_var</code>代表的是，在这次<code>迭代</code>中，当前<code>列表</code>也就是<code>sequence</code>被指向的值。</p>\n<p>可以想象，其实也就是对一个<code>列表</code>，用一个箭头，依次的指向<code>列表</code>里的值，然后执行循环体，再移动到下一个<code>列表</code>的元素。</p>\n"},{"title":"Python---字符串","date":"2019-07-17T05:22:59.000Z","_content":"## 本文内容\n\n初步介绍字符串的基本知识，编码问题的科普和字符串的格式化。\n\n其他的关于字符串的长度、编码转换等等，后续再补充。\n\n## 什么是字符串\n\n例如：`!`、`a`、`@`、`1`、`=`、`#`、`/`，等等这种单个字母、数字或者符号都称之为一个字符\n\n字符串，顾名思义就是字符组成的串，用来表示多个字符组成的一段序列，可以代表一个单词，一个句子，甚至一大段文字。\n\n在变量一节中，也提到了，字符串也是python基本数据类型的一种。\n\n## 编码问题 (科普说明)\n\n其实对于计算机来说，所有的东西，都是数字。\n\n不论多么复杂的东西，到最后都转换成二进制的数字。\n\n### 什么是二进制\n\n借用一下百度百科：\n\n>二进制数据是用0和1两个数码来表示的数。 它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。\n\n日常生活中计数用的是十进制，也就是逢十进一，每个数位上（个十百千万等）的数字都在0-9这10个数字里，当`9+1`时，个位变成了10，逢十进一，也就是变成了`10`。\n\n十进制里，`0+1`是`1`，`1+1`是`2`。\n\n在二进制里`0+1`是`1`，但是`1+1`的结果低位是`2`，逢二进一，也就是结果为`10`。\n\n>注意：这是二进制的`10`\n\n换算方法其实也就是`数位上的值乘以2的x次方的和`，x从0开始，从右往左依次相加。\n\n例如：二进制的`101`，换算为十进制，从右往左：`1*2^0 + 0*2^1 + 1*2^2 = 5`，也就是十进制的`5`\n\n### 什么是字节Byte\n\n讲完了二进制，那么什么是字节呢？\n\n在十进制中，每个数位有各自的名字，个十百千万等。\n\n在二进制中，每个数位称为一位（bit），也叫作比特。从右往左，称右边的数位为低位，左边的数位为高位。\n\n以`8`个bit为一个单位，叫做字节（byte），也就是`1 byte = 8 bit`\n\n在书面表示的时候，通常以每4个bit分割。\n\n例如：十进制数字`65`的二进制表示为`0100 0001`，在内存中占`2Byte`。\n\n常见数字十进制数字：`65535`，换算成二进制就是`1111 1111 1111 1111`也就是16位或16比特，`16/8=2`也就是这个数字占2个字节，是2个字节所能表示最大的整数。\n\n\n### 什么是编码问题\n\n计算机一开始设计的时候，内存很小，并且美国人母语是英文，所以一开始编入了`127`个字符，包括26个大小写字母和一些符号。\n\n这`127`个数字代表的`127`个字符也叫`ASCII`码，`ASCII`也是一种编码方式。\n\n后来呢，要表示中文、日文、俄文等等各种乱七八糟的文字，原来的`127`个数字肯定是不够的，所以需要拓展，用更多的字节容纳更多数字来表示更多的字符。\n\n那么，底层的计算机都是二进制数字，如何知道这个数字对应了什么字符呢。\n\n编码的作用就在这里，同样的数字，不同的编码对应的字符是不一样的。\n\n同样是数字`666666`，在unicode和utf8，两个编码集里可能代表了不同的字符。\n\n又例如，`\"中\"`这个中文，在`ASCII`码中已经超出显示范围了，是不能被显示的，而在`unicode`中，其对应二进制数：`0100 1110 0010 1101`，而在`utf8`中对应二进制数：`1110 0100 1011 1000 1010 1101`\n\n> 分别对应十进制的`20013`和`14,989,485`\n>\n> `unicode`和`utf8`都是编码集的一种，emoji就是被编码`unicode`里的。\n\n## 关于字符串\n\npython中，字符串的形式可以是`'hello'`，也可以是`\"hello\"`，两者都表示同一个字符串`hello`。\n\n例如：\n\n``` python\na = 'hello'\nb = \"hello\"\nprint(a is b)\n```\n\n运行的结果：\n\n``` python \nTrue\n```\n\n也就是说，字符串用单引号`''`和双引号`\"\"`包括起来的效果是一样的。\n\n但是例如字符串本身包含单引号或者双引号，那么可以用另一个包括起来。\n\n例如：`\"This is Bean's Blog\"`和`'he said \"oh shit\"'`，都是合法的字符串。\n\n## 字符串的拼接\n\npython中，拼接两个字符串，可以通过两个字符串相加完成。\n\n例如有变量`a = 'hello'`和变量`b = 'world'`，要怎么只用这两个变量打印`hello world`呢？\n\n答案就是字符串的拼接\n\n``` python\na = 'hello'\nb = 'world'\nprint(a + ' ' + b)\n```\n\n> a和b两个字符串之间还缺一个空格，所以要`a+空格+b`\n\n结果就是：\n\n``` python\nhello world\n```\n\n## 字符串的格式化\n\n常常遇到，要打印一段字符串，但是字符串的内容又是由很多变量组成的。\n\n例如：\n\n``` python\nname = 'bear'\ntime = '2019-7-xx'\nsth = 'i dont know'\nprint('hello' + ',' + name + '.Now is '+ time + '. Bean said '+ sth)\n```\n\n运行的结果会是：\n\n``` python\nhello,bear.Now is 2019-7-xx. Bean said i dont know\n```\n\n会比较繁琐，写起来手也酸（加号和引号疯狂敲打），那么有没有一次性把整句话打完，再把`name`和`sth`这两个变量填进去的方法呢？\n\n对字符串进行格式化起的就是这样的作用。\n\n用字符串格式化的方式实现上面的例子，会是这样的：\n\n``` python\nname = 'bear'\ntime = '2019-7-xx'\nsth = 'i dont know'\nprint('hello,%s.Now is %s. Bean said %s' % (name,time,sth))\n```\n\n`print`括号里的内容就是在对字符串进行格式化，可以理解为是一个占位的东西。\n\n格式化的字符串是`'hello,%s.Now is %s. Bean said %s'`，而`%`是一个运算符，表示将右边的变量（有多个的话用小括号包括起来）按顺序，填入格式化的字符串中。\n\n`%`右边括号中的若干变量，也被称做是格式化的参数，关于参数，到函数那里会补充。\n\n`%s`被称作占位符，告诉程序，这里要填的内容是什么数据类型。\n\n> `%s`代表被格式化的内容是字符串\n\n而其他类似的占位符：\n\n| 占位符 | 替换内容 |\n|:---:|:---:|\n| %s | 字符串 |\n| %d | 整数 |\n| %f | 浮点数 |\n| %x | 十六进制整数 |\n\n当参数和占位符的数据类型不符时，会自动调用相应的类型转换函数进行类型转换。\n\n例如：\n\n``` python\nprint('i need a float : %f' % 555)\n```\n\n结果会是：\n\n``` python\ni need a float : 555.000000\n```\n\n也就是参数`555`，在被格式化填入到`%f`的位置的时候，自动进行了类型转换，从整数转换成了浮点数。\n\n同样的`%x`填入十六进制数也是一样的。\n\n``` python\nprint('here hava a hexadecimal integer : %x' % 666)\n```\n\n结果：\n\n``` python\nhere hava a hexadecimal integer : 29a\n```\n\n也就是十进制数`666`被自动转换成了十六进制数`29a`\n\n关于进制下面会讲。","source":"_drafts/2019-07-17-Python-string.md","raw":"---\ntitle: Python---字符串\ndate: 2019-07-17 13:22:59\ncategories:\n- Python\ntags:\n- Python\n- Note\n---\n## 本文内容\n\n初步介绍字符串的基本知识，编码问题的科普和字符串的格式化。\n\n其他的关于字符串的长度、编码转换等等，后续再补充。\n\n## 什么是字符串\n\n例如：`!`、`a`、`@`、`1`、`=`、`#`、`/`，等等这种单个字母、数字或者符号都称之为一个字符\n\n字符串，顾名思义就是字符组成的串，用来表示多个字符组成的一段序列，可以代表一个单词，一个句子，甚至一大段文字。\n\n在变量一节中，也提到了，字符串也是python基本数据类型的一种。\n\n## 编码问题 (科普说明)\n\n其实对于计算机来说，所有的东西，都是数字。\n\n不论多么复杂的东西，到最后都转换成二进制的数字。\n\n### 什么是二进制\n\n借用一下百度百科：\n\n>二进制数据是用0和1两个数码来表示的数。 它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。\n\n日常生活中计数用的是十进制，也就是逢十进一，每个数位上（个十百千万等）的数字都在0-9这10个数字里，当`9+1`时，个位变成了10，逢十进一，也就是变成了`10`。\n\n十进制里，`0+1`是`1`，`1+1`是`2`。\n\n在二进制里`0+1`是`1`，但是`1+1`的结果低位是`2`，逢二进一，也就是结果为`10`。\n\n>注意：这是二进制的`10`\n\n换算方法其实也就是`数位上的值乘以2的x次方的和`，x从0开始，从右往左依次相加。\n\n例如：二进制的`101`，换算为十进制，从右往左：`1*2^0 + 0*2^1 + 1*2^2 = 5`，也就是十进制的`5`\n\n### 什么是字节Byte\n\n讲完了二进制，那么什么是字节呢？\n\n在十进制中，每个数位有各自的名字，个十百千万等。\n\n在二进制中，每个数位称为一位（bit），也叫作比特。从右往左，称右边的数位为低位，左边的数位为高位。\n\n以`8`个bit为一个单位，叫做字节（byte），也就是`1 byte = 8 bit`\n\n在书面表示的时候，通常以每4个bit分割。\n\n例如：十进制数字`65`的二进制表示为`0100 0001`，在内存中占`2Byte`。\n\n常见数字十进制数字：`65535`，换算成二进制就是`1111 1111 1111 1111`也就是16位或16比特，`16/8=2`也就是这个数字占2个字节，是2个字节所能表示最大的整数。\n\n\n### 什么是编码问题\n\n计算机一开始设计的时候，内存很小，并且美国人母语是英文，所以一开始编入了`127`个字符，包括26个大小写字母和一些符号。\n\n这`127`个数字代表的`127`个字符也叫`ASCII`码，`ASCII`也是一种编码方式。\n\n后来呢，要表示中文、日文、俄文等等各种乱七八糟的文字，原来的`127`个数字肯定是不够的，所以需要拓展，用更多的字节容纳更多数字来表示更多的字符。\n\n那么，底层的计算机都是二进制数字，如何知道这个数字对应了什么字符呢。\n\n编码的作用就在这里，同样的数字，不同的编码对应的字符是不一样的。\n\n同样是数字`666666`，在unicode和utf8，两个编码集里可能代表了不同的字符。\n\n又例如，`\"中\"`这个中文，在`ASCII`码中已经超出显示范围了，是不能被显示的，而在`unicode`中，其对应二进制数：`0100 1110 0010 1101`，而在`utf8`中对应二进制数：`1110 0100 1011 1000 1010 1101`\n\n> 分别对应十进制的`20013`和`14,989,485`\n>\n> `unicode`和`utf8`都是编码集的一种，emoji就是被编码`unicode`里的。\n\n## 关于字符串\n\npython中，字符串的形式可以是`'hello'`，也可以是`\"hello\"`，两者都表示同一个字符串`hello`。\n\n例如：\n\n``` python\na = 'hello'\nb = \"hello\"\nprint(a is b)\n```\n\n运行的结果：\n\n``` python \nTrue\n```\n\n也就是说，字符串用单引号`''`和双引号`\"\"`包括起来的效果是一样的。\n\n但是例如字符串本身包含单引号或者双引号，那么可以用另一个包括起来。\n\n例如：`\"This is Bean's Blog\"`和`'he said \"oh shit\"'`，都是合法的字符串。\n\n## 字符串的拼接\n\npython中，拼接两个字符串，可以通过两个字符串相加完成。\n\n例如有变量`a = 'hello'`和变量`b = 'world'`，要怎么只用这两个变量打印`hello world`呢？\n\n答案就是字符串的拼接\n\n``` python\na = 'hello'\nb = 'world'\nprint(a + ' ' + b)\n```\n\n> a和b两个字符串之间还缺一个空格，所以要`a+空格+b`\n\n结果就是：\n\n``` python\nhello world\n```\n\n## 字符串的格式化\n\n常常遇到，要打印一段字符串，但是字符串的内容又是由很多变量组成的。\n\n例如：\n\n``` python\nname = 'bear'\ntime = '2019-7-xx'\nsth = 'i dont know'\nprint('hello' + ',' + name + '.Now is '+ time + '. Bean said '+ sth)\n```\n\n运行的结果会是：\n\n``` python\nhello,bear.Now is 2019-7-xx. Bean said i dont know\n```\n\n会比较繁琐，写起来手也酸（加号和引号疯狂敲打），那么有没有一次性把整句话打完，再把`name`和`sth`这两个变量填进去的方法呢？\n\n对字符串进行格式化起的就是这样的作用。\n\n用字符串格式化的方式实现上面的例子，会是这样的：\n\n``` python\nname = 'bear'\ntime = '2019-7-xx'\nsth = 'i dont know'\nprint('hello,%s.Now is %s. Bean said %s' % (name,time,sth))\n```\n\n`print`括号里的内容就是在对字符串进行格式化，可以理解为是一个占位的东西。\n\n格式化的字符串是`'hello,%s.Now is %s. Bean said %s'`，而`%`是一个运算符，表示将右边的变量（有多个的话用小括号包括起来）按顺序，填入格式化的字符串中。\n\n`%`右边括号中的若干变量，也被称做是格式化的参数，关于参数，到函数那里会补充。\n\n`%s`被称作占位符，告诉程序，这里要填的内容是什么数据类型。\n\n> `%s`代表被格式化的内容是字符串\n\n而其他类似的占位符：\n\n| 占位符 | 替换内容 |\n|:---:|:---:|\n| %s | 字符串 |\n| %d | 整数 |\n| %f | 浮点数 |\n| %x | 十六进制整数 |\n\n当参数和占位符的数据类型不符时，会自动调用相应的类型转换函数进行类型转换。\n\n例如：\n\n``` python\nprint('i need a float : %f' % 555)\n```\n\n结果会是：\n\n``` python\ni need a float : 555.000000\n```\n\n也就是参数`555`，在被格式化填入到`%f`的位置的时候，自动进行了类型转换，从整数转换成了浮点数。\n\n同样的`%x`填入十六进制数也是一样的。\n\n``` python\nprint('here hava a hexadecimal integer : %x' % 666)\n```\n\n结果：\n\n``` python\nhere hava a hexadecimal integer : 29a\n```\n\n也就是十进制数`666`被自动转换成了十六进制数`29a`\n\n关于进制下面会讲。","slug":"Python-string","published":0,"updated":"2021-02-13T16:22:11.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaot0008cswgw1lnm2dx","content":"<h2 id=\"本文内容\"><a href=\"#本文内容\" class=\"headerlink\" title=\"本文内容\"></a>本文内容</h2><p>初步介绍字符串的基本知识，编码问题的科普和字符串的格式化。</p>\n<p>其他的关于字符串的长度、编码转换等等，后续再补充。</p>\n<h2 id=\"什么是字符串\"><a href=\"#什么是字符串\" class=\"headerlink\" title=\"什么是字符串\"></a>什么是字符串</h2><p>例如：<code>!</code>、<code>a</code>、<code>@</code>、<code>1</code>、<code>=</code>、<code>#</code>、<code>/</code>，等等这种单个字母、数字或者符号都称之为一个字符</p>\n<p>字符串，顾名思义就是字符组成的串，用来表示多个字符组成的一段序列，可以代表一个单词，一个句子，甚至一大段文字。</p>\n<p>在变量一节中，也提到了，字符串也是python基本数据类型的一种。</p>\n<h2 id=\"编码问题-科普说明\"><a href=\"#编码问题-科普说明\" class=\"headerlink\" title=\"编码问题 (科普说明)\"></a>编码问题 (科普说明)</h2><p>其实对于计算机来说，所有的东西，都是数字。</p>\n<p>不论多么复杂的东西，到最后都转换成二进制的数字。</p>\n<h3 id=\"什么是二进制\"><a href=\"#什么是二进制\" class=\"headerlink\" title=\"什么是二进制\"></a>什么是二进制</h3><p>借用一下百度百科：</p>\n<blockquote>\n<p>二进制数据是用0和1两个数码来表示的数。 它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。</p>\n</blockquote>\n<p>日常生活中计数用的是十进制，也就是逢十进一，每个数位上（个十百千万等）的数字都在0-9这10个数字里，当<code>9+1</code>时，个位变成了10，逢十进一，也就是变成了<code>10</code>。</p>\n<p>十进制里，<code>0+1</code>是<code>1</code>，<code>1+1</code>是<code>2</code>。</p>\n<p>在二进制里<code>0+1</code>是<code>1</code>，但是<code>1+1</code>的结果低位是<code>2</code>，逢二进一，也就是结果为<code>10</code>。</p>\n<blockquote>\n<p>注意：这是二进制的<code>10</code></p>\n</blockquote>\n<p>换算方法其实也就是<code>数位上的值乘以2的x次方的和</code>，x从0开始，从右往左依次相加。</p>\n<p>例如：二进制的<code>101</code>，换算为十进制，从右往左：<code>1*2^0 + 0*2^1 + 1*2^2 = 5</code>，也就是十进制的<code>5</code></p>\n<h3 id=\"什么是字节Byte\"><a href=\"#什么是字节Byte\" class=\"headerlink\" title=\"什么是字节Byte\"></a>什么是字节Byte</h3><p>讲完了二进制，那么什么是字节呢？</p>\n<p>在十进制中，每个数位有各自的名字，个十百千万等。</p>\n<p>在二进制中，每个数位称为一位（bit），也叫作比特。从右往左，称右边的数位为低位，左边的数位为高位。</p>\n<p>以<code>8</code>个bit为一个单位，叫做字节（byte），也就是<code>1 byte = 8 bit</code></p>\n<p>在书面表示的时候，通常以每4个bit分割。</p>\n<p>例如：十进制数字<code>65</code>的二进制表示为<code>0100 0001</code>，在内存中占<code>2Byte</code>。</p>\n<p>常见数字十进制数字：<code>65535</code>，换算成二进制就是<code>1111 1111 1111 1111</code>也就是16位或16比特，<code>16/8=2</code>也就是这个数字占2个字节，是2个字节所能表示最大的整数。</p>\n<h3 id=\"什么是编码问题\"><a href=\"#什么是编码问题\" class=\"headerlink\" title=\"什么是编码问题\"></a>什么是编码问题</h3><p>计算机一开始设计的时候，内存很小，并且美国人母语是英文，所以一开始编入了<code>127</code>个字符，包括26个大小写字母和一些符号。</p>\n<p>这<code>127</code>个数字代表的<code>127</code>个字符也叫<code>ASCII</code>码，<code>ASCII</code>也是一种编码方式。</p>\n<p>后来呢，要表示中文、日文、俄文等等各种乱七八糟的文字，原来的<code>127</code>个数字肯定是不够的，所以需要拓展，用更多的字节容纳更多数字来表示更多的字符。</p>\n<p>那么，底层的计算机都是二进制数字，如何知道这个数字对应了什么字符呢。</p>\n<p>编码的作用就在这里，同样的数字，不同的编码对应的字符是不一样的。</p>\n<p>同样是数字<code>666666</code>，在unicode和utf8，两个编码集里可能代表了不同的字符。</p>\n<p>又例如，<code>&quot;中&quot;</code>这个中文，在<code>ASCII</code>码中已经超出显示范围了，是不能被显示的，而在<code>unicode</code>中，其对应二进制数：<code>0100 1110 0010 1101</code>，而在<code>utf8</code>中对应二进制数：<code>1110 0100 1011 1000 1010 1101</code></p>\n<blockquote>\n<p>分别对应十进制的<code>20013</code>和<code>14,989,485</code></p>\n<p><code>unicode</code>和<code>utf8</code>都是编码集的一种，emoji就是被编码<code>unicode</code>里的。</p>\n</blockquote>\n<h2 id=\"关于字符串\"><a href=\"#关于字符串\" class=\"headerlink\" title=\"关于字符串\"></a>关于字符串</h2><p>python中，字符串的形式可以是<code>&#39;hello&#39;</code>，也可以是<code>&quot;hello&quot;</code>，两者都表示同一个字符串<code>hello</code>。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'hello'</span></span><br><span class=\"line\">b = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">print(a <span class=\"keyword\">is</span> b)</span><br></pre></td></tr></table></figure>\n<p>运行的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>也就是说，字符串用单引号<code>&#39;&#39;</code>和双引号<code>&quot;&quot;</code>包括起来的效果是一样的。</p>\n<p>但是例如字符串本身包含单引号或者双引号，那么可以用另一个包括起来。</p>\n<p>例如：<code>&quot;This is Bean&#39;s Blog&quot;</code>和<code>&#39;he said &quot;oh shit&quot;&#39;</code>，都是合法的字符串。</p>\n<h2 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a>字符串的拼接</h2><p>python中，拼接两个字符串，可以通过两个字符串相加完成。</p>\n<p>例如有变量<code>a = &#39;hello&#39;</code>和变量<code>b = &#39;world&#39;</code>，要怎么只用这两个变量打印<code>hello world</code>呢？</p>\n<p>答案就是字符串的拼接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'hello'</span></span><br><span class=\"line\">b = <span class=\"string\">'world'</span></span><br><span class=\"line\">print(a + <span class=\"string\">' '</span> + b)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>a和b两个字符串之间还缺一个空格，所以要<code>a+空格+b</code></p>\n</blockquote>\n<p>结果就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串的格式化\"><a href=\"#字符串的格式化\" class=\"headerlink\" title=\"字符串的格式化\"></a>字符串的格式化</h2><p>常常遇到，要打印一段字符串，但是字符串的内容又是由很多变量组成的。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">'bear'</span></span><br><span class=\"line\">time = <span class=\"string\">'2019-7-xx'</span></span><br><span class=\"line\">sth = <span class=\"string\">'i dont know'</span></span><br><span class=\"line\">print(<span class=\"string\">'hello'</span> + <span class=\"string\">','</span> + name + <span class=\"string\">'.Now is '</span>+ time + <span class=\"string\">'. Bean said '</span>+ sth)</span><br></pre></td></tr></table></figure>\n<p>运行的结果会是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello,bear.Now <span class=\"keyword\">is</span> <span class=\"number\">2019</span><span class=\"number\">-7</span>-xx. Bean said i dont know</span><br></pre></td></tr></table></figure>\n<p>会比较繁琐，写起来手也酸（加号和引号疯狂敲打），那么有没有一次性把整句话打完，再把<code>name</code>和<code>sth</code>这两个变量填进去的方法呢？</p>\n<p>对字符串进行格式化起的就是这样的作用。</p>\n<p>用字符串格式化的方式实现上面的例子，会是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">'bear'</span></span><br><span class=\"line\">time = <span class=\"string\">'2019-7-xx'</span></span><br><span class=\"line\">sth = <span class=\"string\">'i dont know'</span></span><br><span class=\"line\">print(<span class=\"string\">'hello,%s.Now is %s. Bean said %s'</span> % (name,time,sth))</span><br></pre></td></tr></table></figure>\n<p><code>print</code>括号里的内容就是在对字符串进行格式化，可以理解为是一个占位的东西。</p>\n<p>格式化的字符串是<code>&#39;hello,%s.Now is %s. Bean said %s&#39;</code>，而<code>%</code>是一个运算符，表示将右边的变量（有多个的话用小括号包括起来）按顺序，填入格式化的字符串中。</p>\n<p><code>%</code>右边括号中的若干变量，也被称做是格式化的参数，关于参数，到函数那里会补充。</p>\n<p><code>%s</code>被称作占位符，告诉程序，这里要填的内容是什么数据类型。</p>\n<blockquote>\n<p><code>%s</code>代表被格式化的内容是字符串</p>\n</blockquote>\n<p>而其他类似的占位符：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">占位符</th>\n<th style=\"text-align:center\">替换内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:center\">字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:center\">整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:center\">浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:center\">十六进制整数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>当参数和占位符的数据类型不符时，会自动调用相应的类型转换函数进行类型转换。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'i need a float : %f'</span> % <span class=\"number\">555</span>)</span><br></pre></td></tr></table></figure>\n<p>结果会是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i need a float : <span class=\"number\">555.000000</span></span><br></pre></td></tr></table></figure>\n<p>也就是参数<code>555</code>，在被格式化填入到<code>%f</code>的位置的时候，自动进行了类型转换，从整数转换成了浮点数。</p>\n<p>同样的<code>%x</code>填入十六进制数也是一样的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'here hava a hexadecimal integer : %x'</span> % <span class=\"number\">666</span>)</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">here hava a hexadecimal integer : <span class=\"number\">29</span>a</span><br></pre></td></tr></table></figure>\n<p>也就是十进制数<code>666</code>被自动转换成了十六进制数<code>29a</code></p>\n<p>关于进制下面会讲。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"本文内容\"><a href=\"#本文内容\" class=\"headerlink\" title=\"本文内容\"></a>本文内容</h2><p>初步介绍字符串的基本知识，编码问题的科普和字符串的格式化。</p>\n<p>其他的关于字符串的长度、编码转换等等，后续再补充。</p>\n<h2 id=\"什么是字符串\"><a href=\"#什么是字符串\" class=\"headerlink\" title=\"什么是字符串\"></a>什么是字符串</h2><p>例如：<code>!</code>、<code>a</code>、<code>@</code>、<code>1</code>、<code>=</code>、<code>#</code>、<code>/</code>，等等这种单个字母、数字或者符号都称之为一个字符</p>\n<p>字符串，顾名思义就是字符组成的串，用来表示多个字符组成的一段序列，可以代表一个单词，一个句子，甚至一大段文字。</p>\n<p>在变量一节中，也提到了，字符串也是python基本数据类型的一种。</p>\n<h2 id=\"编码问题-科普说明\"><a href=\"#编码问题-科普说明\" class=\"headerlink\" title=\"编码问题 (科普说明)\"></a>编码问题 (科普说明)</h2><p>其实对于计算机来说，所有的东西，都是数字。</p>\n<p>不论多么复杂的东西，到最后都转换成二进制的数字。</p>\n<h3 id=\"什么是二进制\"><a href=\"#什么是二进制\" class=\"headerlink\" title=\"什么是二进制\"></a>什么是二进制</h3><p>借用一下百度百科：</p>\n<blockquote>\n<p>二进制数据是用0和1两个数码来表示的数。 它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。</p>\n</blockquote>\n<p>日常生活中计数用的是十进制，也就是逢十进一，每个数位上（个十百千万等）的数字都在0-9这10个数字里，当<code>9+1</code>时，个位变成了10，逢十进一，也就是变成了<code>10</code>。</p>\n<p>十进制里，<code>0+1</code>是<code>1</code>，<code>1+1</code>是<code>2</code>。</p>\n<p>在二进制里<code>0+1</code>是<code>1</code>，但是<code>1+1</code>的结果低位是<code>2</code>，逢二进一，也就是结果为<code>10</code>。</p>\n<blockquote>\n<p>注意：这是二进制的<code>10</code></p>\n</blockquote>\n<p>换算方法其实也就是<code>数位上的值乘以2的x次方的和</code>，x从0开始，从右往左依次相加。</p>\n<p>例如：二进制的<code>101</code>，换算为十进制，从右往左：<code>1*2^0 + 0*2^1 + 1*2^2 = 5</code>，也就是十进制的<code>5</code></p>\n<h3 id=\"什么是字节Byte\"><a href=\"#什么是字节Byte\" class=\"headerlink\" title=\"什么是字节Byte\"></a>什么是字节Byte</h3><p>讲完了二进制，那么什么是字节呢？</p>\n<p>在十进制中，每个数位有各自的名字，个十百千万等。</p>\n<p>在二进制中，每个数位称为一位（bit），也叫作比特。从右往左，称右边的数位为低位，左边的数位为高位。</p>\n<p>以<code>8</code>个bit为一个单位，叫做字节（byte），也就是<code>1 byte = 8 bit</code></p>\n<p>在书面表示的时候，通常以每4个bit分割。</p>\n<p>例如：十进制数字<code>65</code>的二进制表示为<code>0100 0001</code>，在内存中占<code>2Byte</code>。</p>\n<p>常见数字十进制数字：<code>65535</code>，换算成二进制就是<code>1111 1111 1111 1111</code>也就是16位或16比特，<code>16/8=2</code>也就是这个数字占2个字节，是2个字节所能表示最大的整数。</p>\n<h3 id=\"什么是编码问题\"><a href=\"#什么是编码问题\" class=\"headerlink\" title=\"什么是编码问题\"></a>什么是编码问题</h3><p>计算机一开始设计的时候，内存很小，并且美国人母语是英文，所以一开始编入了<code>127</code>个字符，包括26个大小写字母和一些符号。</p>\n<p>这<code>127</code>个数字代表的<code>127</code>个字符也叫<code>ASCII</code>码，<code>ASCII</code>也是一种编码方式。</p>\n<p>后来呢，要表示中文、日文、俄文等等各种乱七八糟的文字，原来的<code>127</code>个数字肯定是不够的，所以需要拓展，用更多的字节容纳更多数字来表示更多的字符。</p>\n<p>那么，底层的计算机都是二进制数字，如何知道这个数字对应了什么字符呢。</p>\n<p>编码的作用就在这里，同样的数字，不同的编码对应的字符是不一样的。</p>\n<p>同样是数字<code>666666</code>，在unicode和utf8，两个编码集里可能代表了不同的字符。</p>\n<p>又例如，<code>&quot;中&quot;</code>这个中文，在<code>ASCII</code>码中已经超出显示范围了，是不能被显示的，而在<code>unicode</code>中，其对应二进制数：<code>0100 1110 0010 1101</code>，而在<code>utf8</code>中对应二进制数：<code>1110 0100 1011 1000 1010 1101</code></p>\n<blockquote>\n<p>分别对应十进制的<code>20013</code>和<code>14,989,485</code></p>\n<p><code>unicode</code>和<code>utf8</code>都是编码集的一种，emoji就是被编码<code>unicode</code>里的。</p>\n</blockquote>\n<h2 id=\"关于字符串\"><a href=\"#关于字符串\" class=\"headerlink\" title=\"关于字符串\"></a>关于字符串</h2><p>python中，字符串的形式可以是<code>&#39;hello&#39;</code>，也可以是<code>&quot;hello&quot;</code>，两者都表示同一个字符串<code>hello</code>。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'hello'</span></span><br><span class=\"line\">b = <span class=\"string\">\"hello\"</span></span><br><span class=\"line\">print(a <span class=\"keyword\">is</span> b)</span><br></pre></td></tr></table></figure>\n<p>运行的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure>\n<p>也就是说，字符串用单引号<code>&#39;&#39;</code>和双引号<code>&quot;&quot;</code>包括起来的效果是一样的。</p>\n<p>但是例如字符串本身包含单引号或者双引号，那么可以用另一个包括起来。</p>\n<p>例如：<code>&quot;This is Bean&#39;s Blog&quot;</code>和<code>&#39;he said &quot;oh shit&quot;&#39;</code>，都是合法的字符串。</p>\n<h2 id=\"字符串的拼接\"><a href=\"#字符串的拼接\" class=\"headerlink\" title=\"字符串的拼接\"></a>字符串的拼接</h2><p>python中，拼接两个字符串，可以通过两个字符串相加完成。</p>\n<p>例如有变量<code>a = &#39;hello&#39;</code>和变量<code>b = &#39;world&#39;</code>，要怎么只用这两个变量打印<code>hello world</code>呢？</p>\n<p>答案就是字符串的拼接</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"string\">'hello'</span></span><br><span class=\"line\">b = <span class=\"string\">'world'</span></span><br><span class=\"line\">print(a + <span class=\"string\">' '</span> + b)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>a和b两个字符串之间还缺一个空格，所以要<code>a+空格+b</code></p>\n</blockquote>\n<p>结果就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n<h2 id=\"字符串的格式化\"><a href=\"#字符串的格式化\" class=\"headerlink\" title=\"字符串的格式化\"></a>字符串的格式化</h2><p>常常遇到，要打印一段字符串，但是字符串的内容又是由很多变量组成的。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">'bear'</span></span><br><span class=\"line\">time = <span class=\"string\">'2019-7-xx'</span></span><br><span class=\"line\">sth = <span class=\"string\">'i dont know'</span></span><br><span class=\"line\">print(<span class=\"string\">'hello'</span> + <span class=\"string\">','</span> + name + <span class=\"string\">'.Now is '</span>+ time + <span class=\"string\">'. Bean said '</span>+ sth)</span><br></pre></td></tr></table></figure>\n<p>运行的结果会是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello,bear.Now <span class=\"keyword\">is</span> <span class=\"number\">2019</span><span class=\"number\">-7</span>-xx. Bean said i dont know</span><br></pre></td></tr></table></figure>\n<p>会比较繁琐，写起来手也酸（加号和引号疯狂敲打），那么有没有一次性把整句话打完，再把<code>name</code>和<code>sth</code>这两个变量填进去的方法呢？</p>\n<p>对字符串进行格式化起的就是这样的作用。</p>\n<p>用字符串格式化的方式实现上面的例子，会是这样的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name = <span class=\"string\">'bear'</span></span><br><span class=\"line\">time = <span class=\"string\">'2019-7-xx'</span></span><br><span class=\"line\">sth = <span class=\"string\">'i dont know'</span></span><br><span class=\"line\">print(<span class=\"string\">'hello,%s.Now is %s. Bean said %s'</span> % (name,time,sth))</span><br></pre></td></tr></table></figure>\n<p><code>print</code>括号里的内容就是在对字符串进行格式化，可以理解为是一个占位的东西。</p>\n<p>格式化的字符串是<code>&#39;hello,%s.Now is %s. Bean said %s&#39;</code>，而<code>%</code>是一个运算符，表示将右边的变量（有多个的话用小括号包括起来）按顺序，填入格式化的字符串中。</p>\n<p><code>%</code>右边括号中的若干变量，也被称做是格式化的参数，关于参数，到函数那里会补充。</p>\n<p><code>%s</code>被称作占位符，告诉程序，这里要填的内容是什么数据类型。</p>\n<blockquote>\n<p><code>%s</code>代表被格式化的内容是字符串</p>\n</blockquote>\n<p>而其他类似的占位符：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">占位符</th>\n<th style=\"text-align:center\">替换内容</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">%s</td>\n<td style=\"text-align:center\">字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%d</td>\n<td style=\"text-align:center\">整数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%f</td>\n<td style=\"text-align:center\">浮点数</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%x</td>\n<td style=\"text-align:center\">十六进制整数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>当参数和占位符的数据类型不符时，会自动调用相应的类型转换函数进行类型转换。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'i need a float : %f'</span> % <span class=\"number\">555</span>)</span><br></pre></td></tr></table></figure>\n<p>结果会是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i need a float : <span class=\"number\">555.000000</span></span><br></pre></td></tr></table></figure>\n<p>也就是参数<code>555</code>，在被格式化填入到<code>%f</code>的位置的时候，自动进行了类型转换，从整数转换成了浮点数。</p>\n<p>同样的<code>%x</code>填入十六进制数也是一样的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'here hava a hexadecimal integer : %x'</span> % <span class=\"number\">666</span>)</span><br></pre></td></tr></table></figure>\n<p>结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">here hava a hexadecimal integer : <span class=\"number\">29</span>a</span><br></pre></td></tr></table></figure>\n<p>也就是十进制数<code>666</code>被自动转换成了十六进制数<code>29a</code></p>\n<p>关于进制下面会讲。</p>\n"},{"title":"Python---代码块","date":"2019-07-17T07:09:23.000Z","_content":"## 代码块\n\n### 代码的缩进\n\n在python中，代码的缩进很重要。\n\n缩进的方式有两种：\n\n* 制表符缩进，也就是用制表符键（大写锁定上面那个按键，也就是tab）来进行缩进\n\n* 空格缩进，用空格来进行缩进\n\n个人推荐第一种用制表符进行缩进，比较方便，写出来的代码也会比较好看。\n\n> 但其实大部分编辑器或者IDE，在你按下tab的时候，是输入2个或者4个（或者自定义的数量）的空格。\n> \n> 如果你设置为制表符缩进，才会真的是以制表符缩进。\n\n一个制表符或者n个空格叫做一个缩进量\n\n\n\n以下内容运行会报错：\n\n* 制表符缩进\n\t\n    ``` python\n    print('hello')\n        print('world')\n    ```\n\n* 空格缩进\n\n    ``` python\n    i = 5\n     print 'Value is', i # Error! Notice a single space at the start of the line\n    print 'I repeat, the value is', i\n    ```\n\n错误为：\n\n``` python\n  File \"x.py\", line 2\n    print('world')\n    ^\nIndentationError: unexpected indent\n```\n\n也就是`意外的缩进`。\n\n>似乎python2会报`SyntaxError`即语法错误。并不确定，我装的是python3。\n\n#### 额外注意（可以跳过）\n\n两种缩进方式不要混用，有时候虽然看起来代码的层级是相同的，但其实有一行的缩进数量并不相同\n\n例如：\n\n``` python\nif 'hello' is 'hello':\n    print('A')\n \tprint('B')\nelse:\n    print('C')\n    print('D')\n```\n\n是会报错的：`TabError: inconsistent use of tabs and spaces in indentation`\n\n在这个文章里你可以看到`print('B')`比`print('A')`多了一个缩进量。\n\n但其实在编辑器里面`print('B')`的缩进是我先打了一个空格，再将缩进方式设置成制表符缩进，按下tab，在编辑器里`print('A')`和`print('B')`看起来是相同缩进量的。\n\n### 什么是代码块\n\n`代码块`是由多行语句组合成的，将缩进到相同层级的语句看做一个`代码块`。\n\n或者称之为`语句块`。\n\n例如：\n\n``` python\nprint('Start')\n\nif 'hello' is 'hello':\n    print('waooo')\n    print('秀秀秀')\n    print('好了')\n    print('编不下去了')\nelse:\n    print('hello 怎么可能不是 hello呢？')\n    print('这里的东西是不会执行的')\n```\n\n运行的结果会是：\n\n``` python\nStart\nwaooo\n秀秀秀\n好了\n编不下去了\n```\n\n上面的例子里头，`if`下面四行的`print(xxx)`的前面都有且只有一个缩进，也就是说这四行代码同属于一个代码块。\n\n而`if`的真正形式，其实是：\n\n``` python\nif 条件A:\n    代码块A\nelif 条件B:\n    代码块B\nelse:\n    代码块C\n```","source":"_drafts/2019-07-17-Python-代码块.md","raw":"---\ntitle: Python---代码块\ndate: 2019-07-17 15:09:23\ncategories:\n- Python\ntags:\n- Python\n- Note\n---\n## 代码块\n\n### 代码的缩进\n\n在python中，代码的缩进很重要。\n\n缩进的方式有两种：\n\n* 制表符缩进，也就是用制表符键（大写锁定上面那个按键，也就是tab）来进行缩进\n\n* 空格缩进，用空格来进行缩进\n\n个人推荐第一种用制表符进行缩进，比较方便，写出来的代码也会比较好看。\n\n> 但其实大部分编辑器或者IDE，在你按下tab的时候，是输入2个或者4个（或者自定义的数量）的空格。\n> \n> 如果你设置为制表符缩进，才会真的是以制表符缩进。\n\n一个制表符或者n个空格叫做一个缩进量\n\n\n\n以下内容运行会报错：\n\n* 制表符缩进\n\t\n    ``` python\n    print('hello')\n        print('world')\n    ```\n\n* 空格缩进\n\n    ``` python\n    i = 5\n     print 'Value is', i # Error! Notice a single space at the start of the line\n    print 'I repeat, the value is', i\n    ```\n\n错误为：\n\n``` python\n  File \"x.py\", line 2\n    print('world')\n    ^\nIndentationError: unexpected indent\n```\n\n也就是`意外的缩进`。\n\n>似乎python2会报`SyntaxError`即语法错误。并不确定，我装的是python3。\n\n#### 额外注意（可以跳过）\n\n两种缩进方式不要混用，有时候虽然看起来代码的层级是相同的，但其实有一行的缩进数量并不相同\n\n例如：\n\n``` python\nif 'hello' is 'hello':\n    print('A')\n \tprint('B')\nelse:\n    print('C')\n    print('D')\n```\n\n是会报错的：`TabError: inconsistent use of tabs and spaces in indentation`\n\n在这个文章里你可以看到`print('B')`比`print('A')`多了一个缩进量。\n\n但其实在编辑器里面`print('B')`的缩进是我先打了一个空格，再将缩进方式设置成制表符缩进，按下tab，在编辑器里`print('A')`和`print('B')`看起来是相同缩进量的。\n\n### 什么是代码块\n\n`代码块`是由多行语句组合成的，将缩进到相同层级的语句看做一个`代码块`。\n\n或者称之为`语句块`。\n\n例如：\n\n``` python\nprint('Start')\n\nif 'hello' is 'hello':\n    print('waooo')\n    print('秀秀秀')\n    print('好了')\n    print('编不下去了')\nelse:\n    print('hello 怎么可能不是 hello呢？')\n    print('这里的东西是不会执行的')\n```\n\n运行的结果会是：\n\n``` python\nStart\nwaooo\n秀秀秀\n好了\n编不下去了\n```\n\n上面的例子里头，`if`下面四行的`print(xxx)`的前面都有且只有一个缩进，也就是说这四行代码同属于一个代码块。\n\n而`if`的真正形式，其实是：\n\n``` python\nif 条件A:\n    代码块A\nelif 条件B:\n    代码块B\nelse:\n    代码块C\n```","slug":"Python-代码块","published":0,"updated":"2021-02-13T16:22:11.132Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaou000bcswg8txyj2ky","content":"<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><h3 id=\"代码的缩进\"><a href=\"#代码的缩进\" class=\"headerlink\" title=\"代码的缩进\"></a>代码的缩进</h3><p>在python中，代码的缩进很重要。</p>\n<p>缩进的方式有两种：</p>\n<ul>\n<li><p>制表符缩进，也就是用制表符键（大写锁定上面那个按键，也就是tab）来进行缩进</p>\n</li>\n<li><p>空格缩进，用空格来进行缩进</p>\n</li>\n</ul>\n<p>个人推荐第一种用制表符进行缩进，比较方便，写出来的代码也会比较好看。</p>\n<blockquote>\n<p>但其实大部分编辑器或者IDE，在你按下tab的时候，是输入2个或者4个（或者自定义的数量）的空格。</p>\n<p>如果你设置为制表符缩进，才会真的是以制表符缩进。</p>\n</blockquote>\n<p>一个制表符或者n个空格叫做一个缩进量</p>\n<p>以下内容运行会报错：</p>\n<ul>\n<li><p>制表符缩进</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'world'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空格缩进</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">5</span></span><br><span class=\"line\"> <span class=\"keyword\">print</span> <span class=\"string\">'Value is'</span>, i <span class=\"comment\"># Error! Notice a single space at the start of the line</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'I repeat, the value is'</span>, i</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>错误为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  File <span class=\"string\">\"x.py\"</span>, line <span class=\"number\">2</span></span><br><span class=\"line\">    print(<span class=\"string\">'world'</span>)</span><br><span class=\"line\">    ^</span><br><span class=\"line\">IndentationError: unexpected indent</span><br></pre></td></tr></table></figure>\n<p>也就是<code>意外的缩进</code>。</p>\n<blockquote>\n<p>似乎python2会报<code>SyntaxError</code>即语法错误。并不确定，我装的是python3。</p>\n</blockquote>\n<h4 id=\"额外注意（可以跳过）\"><a href=\"#额外注意（可以跳过）\" class=\"headerlink\" title=\"额外注意（可以跳过）\"></a>额外注意（可以跳过）</h4><p>两种缩进方式不要混用，有时候虽然看起来代码的层级是相同的，但其实有一行的缩进数量并不相同</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'hello'</span> <span class=\"keyword\">is</span> <span class=\"string\">'hello'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'A'</span>)</span><br><span class=\"line\"> \tprint(<span class=\"string\">'B'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'C'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'D'</span>)</span><br></pre></td></tr></table></figure>\n<p>是会报错的：<code>TabError: inconsistent use of tabs and spaces in indentation</code></p>\n<p>在这个文章里你可以看到<code>print(&#39;B&#39;)</code>比<code>print(&#39;A&#39;)</code>多了一个缩进量。</p>\n<p>但其实在编辑器里面<code>print(&#39;B&#39;)</code>的缩进是我先打了一个空格，再将缩进方式设置成制表符缩进，按下tab，在编辑器里<code>print(&#39;A&#39;)</code>和<code>print(&#39;B&#39;)</code>看起来是相同缩进量的。</p>\n<h3 id=\"什么是代码块\"><a href=\"#什么是代码块\" class=\"headerlink\" title=\"什么是代码块\"></a>什么是代码块</h3><p><code>代码块</code>是由多行语句组合成的，将缩进到相同层级的语句看做一个<code>代码块</code>。</p>\n<p>或者称之为<code>语句块</code>。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Start'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'hello'</span> <span class=\"keyword\">is</span> <span class=\"string\">'hello'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'waooo'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'秀秀秀'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'好了'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'编不下去了'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'hello 怎么可能不是 hello呢？'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'这里的东西是不会执行的'</span>)</span><br></pre></td></tr></table></figure>\n<p>运行的结果会是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Start</span><br><span class=\"line\">waooo</span><br><span class=\"line\">秀秀秀</span><br><span class=\"line\">好了</span><br><span class=\"line\">编不下去了</span><br></pre></td></tr></table></figure>\n<p>上面的例子里头，<code>if</code>下面四行的<code>print(xxx)</code>的前面都有且只有一个缩进，也就是说这四行代码同属于一个代码块。</p>\n<p>而<code>if</code>的真正形式，其实是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件A:</span><br><span class=\"line\">    代码块A</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件B:</span><br><span class=\"line\">    代码块B</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    代码块C</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><h3 id=\"代码的缩进\"><a href=\"#代码的缩进\" class=\"headerlink\" title=\"代码的缩进\"></a>代码的缩进</h3><p>在python中，代码的缩进很重要。</p>\n<p>缩进的方式有两种：</p>\n<ul>\n<li><p>制表符缩进，也就是用制表符键（大写锁定上面那个按键，也就是tab）来进行缩进</p>\n</li>\n<li><p>空格缩进，用空格来进行缩进</p>\n</li>\n</ul>\n<p>个人推荐第一种用制表符进行缩进，比较方便，写出来的代码也会比较好看。</p>\n<blockquote>\n<p>但其实大部分编辑器或者IDE，在你按下tab的时候，是输入2个或者4个（或者自定义的数量）的空格。</p>\n<p>如果你设置为制表符缩进，才会真的是以制表符缩进。</p>\n</blockquote>\n<p>一个制表符或者n个空格叫做一个缩进量</p>\n<p>以下内容运行会报错：</p>\n<ul>\n<li><p>制表符缩进</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'hello'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'world'</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>空格缩进</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i = <span class=\"number\">5</span></span><br><span class=\"line\"> <span class=\"keyword\">print</span> <span class=\"string\">'Value is'</span>, i <span class=\"comment\"># Error! Notice a single space at the start of the line</span></span><br><span class=\"line\"><span class=\"keyword\">print</span> <span class=\"string\">'I repeat, the value is'</span>, i</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>错误为：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  File <span class=\"string\">\"x.py\"</span>, line <span class=\"number\">2</span></span><br><span class=\"line\">    print(<span class=\"string\">'world'</span>)</span><br><span class=\"line\">    ^</span><br><span class=\"line\">IndentationError: unexpected indent</span><br></pre></td></tr></table></figure>\n<p>也就是<code>意外的缩进</code>。</p>\n<blockquote>\n<p>似乎python2会报<code>SyntaxError</code>即语法错误。并不确定，我装的是python3。</p>\n</blockquote>\n<h4 id=\"额外注意（可以跳过）\"><a href=\"#额外注意（可以跳过）\" class=\"headerlink\" title=\"额外注意（可以跳过）\"></a>额外注意（可以跳过）</h4><p>两种缩进方式不要混用，有时候虽然看起来代码的层级是相同的，但其实有一行的缩进数量并不相同</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'hello'</span> <span class=\"keyword\">is</span> <span class=\"string\">'hello'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'A'</span>)</span><br><span class=\"line\"> \tprint(<span class=\"string\">'B'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'C'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'D'</span>)</span><br></pre></td></tr></table></figure>\n<p>是会报错的：<code>TabError: inconsistent use of tabs and spaces in indentation</code></p>\n<p>在这个文章里你可以看到<code>print(&#39;B&#39;)</code>比<code>print(&#39;A&#39;)</code>多了一个缩进量。</p>\n<p>但其实在编辑器里面<code>print(&#39;B&#39;)</code>的缩进是我先打了一个空格，再将缩进方式设置成制表符缩进，按下tab，在编辑器里<code>print(&#39;A&#39;)</code>和<code>print(&#39;B&#39;)</code>看起来是相同缩进量的。</p>\n<h3 id=\"什么是代码块\"><a href=\"#什么是代码块\" class=\"headerlink\" title=\"什么是代码块\"></a>什么是代码块</h3><p><code>代码块</code>是由多行语句组合成的，将缩进到相同层级的语句看做一个<code>代码块</code>。</p>\n<p>或者称之为<code>语句块</code>。</p>\n<p>例如：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Start'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">'hello'</span> <span class=\"keyword\">is</span> <span class=\"string\">'hello'</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'waooo'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'秀秀秀'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'好了'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'编不下去了'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'hello 怎么可能不是 hello呢？'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'这里的东西是不会执行的'</span>)</span><br></pre></td></tr></table></figure>\n<p>运行的结果会是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Start</span><br><span class=\"line\">waooo</span><br><span class=\"line\">秀秀秀</span><br><span class=\"line\">好了</span><br><span class=\"line\">编不下去了</span><br></pre></td></tr></table></figure>\n<p>上面的例子里头，<code>if</code>下面四行的<code>print(xxx)</code>的前面都有且只有一个缩进，也就是说这四行代码同属于一个代码块。</p>\n<p>而<code>if</code>的真正形式，其实是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> 条件A:</span><br><span class=\"line\">    代码块A</span><br><span class=\"line\"><span class=\"keyword\">elif</span> 条件B:</span><br><span class=\"line\">    代码块B</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    代码块C</span><br></pre></td></tr></table></figure>"},{"title":"Python---变量和数据类型","date":"2019-07-16T18:16:45.000Z","_content":"## 内容\n\n基本的前提知识和基本数据类型的运算等。\n\n## 到底在学什么\n\n其实入门就是学一下思维方式，适应python编写的思维方式。\n\n写程序其实跟写文章没有很大区别，如果你把一个python的代码，全部（包括运算符）翻译成中文，那么其实一段代码在干什么是很直白的，其实也就是在学习一些基础的知识，并在敲demo的过程中适应python的思维方式，看到题目或者别的需求之类的就能想出相应的代码了。\n\n## 基本前提知识\n\n### 运算数\n\n进行运算的对象，`1 + 2`中，`1`和`2` 都是运算数，`+`是运算符。\n\n### 运算符\n\n按所需运算数数量的分法，分双目运算符、单目运算符。\n\n双目运算符：运算符左右两边都有值或表达式，例如：`<` 需要两个值 `1<2`才能进行运算。\n> 还有类似: `+=`、`*=` 等，后续再补充作用\n\n单目运算符：只需要一个运算数，例如：`not`只需要一个值`not True` 即可。\n> 还有类似: `++`、`--` 等，后续再补充作用\n\n`下面的算术运算符和比较运算符仅做介绍，不用记忆，需要了再看`\n\n#### 算术运算符\n\n以下假设变量： `a = 10`，`b = 20`：\n\n|运算符|\t描述|\t实例\n|:---:|:---:|:---:|\n| + |\t加 - 两个对象相加 |\t`a + b` 输出结果 30\n| - |\t减 - 得到负数或是一个数减去另一个数 |\t`a - b` 输出结果 -10\n| * |\t乘 - 两个数相乘或是返回一个被重复若干次的字符串 |\t`a * b` 输出结果 200\n| / |\t除 - x除以y |\t`b / a` 输出结果 2\n| % |\t取模 - 返回除法的余数 |\t`b % a` 输出结果 0\n| ** |\t幂 - 返回x的y次幂 |\t`a**b` 为10的20次方， 输出结果 100000000000000000000\n| // |\t取整除 - 返回商的整数部分 |向下取整\t\n\n`//`的例子：\n\n> 9//2\n>>4\n>\n> -9//2\n>>-5\n\n#### 比较运算符\n\n以下假设变量`a = 10`，变量`b = 20`：\n\n| 运算符\t| 描述\t| 实例\n|:---:|:---:|:---:|\n| ==\t| 等于 - 比较对象是否相等\t| (a == b) 返回 False。\n| !=\t| 不等于 - 比较两个对象是否不相等\t| (a != b) 返回 true.\n| <>\t| 不等于 - 比较两个对象是否不相等\t| (a <> b) 返回 true。这个运算符类似 != 。\n| >\t| 大于 - 返回x是否大于y\t(a > b) 返回 False。\n| <\t| 小于 - 返回x是否小于y。\t| (a < b) 返回 true。\n| >=\t| 大于等于\t- 返回x是否大于等于y。\t| (a >= b) 返回 False。\n| <=\t| 小于等于 -\t返回x是否小于等于y。\t| (a <= b) 返回 true。\n\n所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。\n\n#### 赋值\n\n`=` 等于号也即赋值运算符，将等号右边的值赋给左边的变量。\n\n例如：`a = 1` 将 整数1的值赋给变量`a`。\n\n赋值运算符的执行顺序是这样的：先计算右边的值，再讲将右边的值赋给左边的值。\n\n例如：\n\n`a = a + 1`\n\n假设`a`原来的值是`1`，从`=`的右边先看\n\n`a + 1`的结果是`2`\n\n程序计算完右边的值，对程序来说这个语句变成了：\n\n`a = 2`\n\n也就是说在阅读赋值表达式的时候，把右边的值先完全计算出来，然后用值把右边的所有东西都删去，替换成这个表达式的值，即可。\n\n另外，是不是感觉，`a = a + 1` 有点啰嗦，要打两次`a`。\n\n其实可以把它直接缩写成`a += 1`，这里可以看做就是`a + 1`，但是把左边的`=`省略到`+`里，变成`+=`。\n\n或者可以把`+=`读作“自增”，`a += 1`读作\"`a`自增`1`\"，也就可以理解`+=`的作用了。\n\n类似的还有`-=`等，\n\n如下：\n\n| 运算符 | 描述 | 实例 |\n|:---:  |:---:          |:---:|\n| +=\t  | 加法赋值运算符 |\t`c += a` 等效于 `c = c + a` |\n| -=\t  | 减法赋值运算符 |\t`c -= a` 等效于 `c = c - a` |\n| *=\t  | 乘法赋值运算符 |\t`c *= a` 等效于 `c = c * a` |\n| /=\t  | 除法赋值运算符 |\t`c /= a` 等效于 `c = c / a` |\n| %=\t  | 取模赋值运算符 |\t`c %= a` 等效于 `c = c % a` |\n| **=\t  | 幂赋值运算符  |\t`c **= a` 等效于 `c = c ** a` |\n| //=\t  | 取整除赋值运算符 |\t`c //= a` 等效于 `c = c // a` |\n\n`仅做介绍，不用记忆，用到再来`\n\n\n#### 逻辑运算符\n\n* `or` \n  * 逻辑或，作用：当左右两边的布尔表达式同时为假（False），运算结果为假（False），否则都为真（True）。(以下是例子)\n  >`1<2 or 3<2`的值为`True`。\n  >\n  >`3<2 or 1<2`的值为`True`。\n  >\n  >`1<2 or 3<4`的值为`True`。\n  >\n  >`3<2 or 4<2`的值为`False`。\n  * 也即以下值为`True`：\n    * `True or True`\n    * `True or False`\n    * `False or True`\n  * 而`Fasle or False`的值为`False`\n* `and`\n  * 逻辑与，作用：当左右两边的布尔表达式同时为真（True），运算结果即为真（True），否则都是`False`。(以下是例子)\n  >`1<2 and 3<4`的值为`True`。\n  >\n  >`1<2 and 3<2`的值为`False`。\n  >\n  >`3<2 and 1<2`的值为`False`。\n  >\n  >`3<2 and 4<2`的值为`False`。\n  * 也即以下值为`False`：\n    * `False and False`\n    * `True and False`\n    * `False and True`\n  * 而`True and True`的值为`True`\n* `not` \n  * 逻辑非，作用：将右边的布尔值取反。也就是True变False，False变True\n  >`not 1<2`的值为`False`\n  >\n  >`not 3<4`的值为`True`\n\n    * 也即:`not True`的值为`False`，`not False`的值为`True`\n* `!=` 和 `is not` （两者等效）\n  * 不等于\n* `==` 和 `is` （两者等效）\n  * 等于\n\n## 变量\n\n可以认为变量是对一个数据的命名，变量在使用前是需要声明的，在python中变量的声明通过对变量的赋值进行，例如`a = 1`即声明了一个变量`a`，他的值是`1`。\n\n例如以下代码会报出错误：`NameError: name 'a' is not defined`\n\n``` python\nprint(a)\n```\n\n原因是变量`a`并没有被提前声明\n\n改成下面这样就可以了：\n\n``` python\na = 1\nprint(a)\n```\n\n### 变量命名规范（初学的话仅做了解）\n\n变量就是一个有名字的数据，那么命名就很重要了。\n\n变量名有以下几个规则：\n\n1. 第一个字符必须是字母或者下划线“_”\n\n2. 剩下的部分可以是字母、下划线“_”或数字（0-9）\n\n3. 变量名称是对大小写敏感的，myname和myName不是同一个变量。\n\n规则是一定要符合的，不然程序会报错。\n\n变量的命名一定要具意命名并且用英文，比如保存姓名的变量就叫`name`，不要叫`mingzi`。\n\n`命名规范`是变量在符合上面的命名规则后的建议。\n\n例如有个变量，用来保存Bean曾经说过的话。\n\n不用`命名规范`来命名变量呢，他可以是这样`wordsfrombean`，也可以是`Words_fromBean`，单词量都一样，变量的实际含义也一样，但是形式却不统一，会让代码变得混乱。\n\n常见的`命名规范`方式有：\n\n* 驼峰命名法\n* 匈牙利命名法\n* 帕斯卡（Pascal）命名法\n* 下划线命名法\n\npython的命名风格主要是`驼峰命名法`和`下划线命名法`的混合：\n\n驼峰命名法：第一个单词以小写字母开始；从第二个单词开始以后的每个单词的首字母都采用大写字母。\n\n例如：`myFirstName`、`myLastName`\n\n下划线命名法：单词直接用 `_` （下划线）隔开，变量名小写、常量全大写等，详细看下面的几个介绍。\n\n> 下面关于函、类和模块的命名方式仅做介绍，后面学了函数和类再来看。\n\n1. 变量名\n\n  * 变量名尽量小写, 如有多个单词，用下划线隔开\n  \n  ``` python\n  count = 0\n  school_name = ''\n  ```\n\n  * 常量采用全大写，如有多个单词，使用下划线隔开\n\n  ```\n  MAX_CLIENT = 100\n  MAX_CONNECTION = 1000\n  CONNECTION_TIMEOUT = 600\n  ```\n\n2. 函数\n\n  * 函数名一律小写，如有多个单词，用下划线隔开\n\n  ``` python\n  def run():\n    pass\n\n  def run_with_env():\n      pass\n  ```\n\n  * 私有函数在函数前加一个下划线_\n\n  ``` python\n  class Person():\n\n    def _private_func():\n        pass\n  ```\n\n3. 类\n  类名使用驼峰(CamelCase)命名风格，首字母大写，私有类可用一个下划线开头\n\n  ``` python\n  class Farm():\n    pass\n\n  class AnimalFarm(Farm):\n      pass\n\n  class _PrivateFarm(Farm):\n      pass\n  ```\n  \n4. 模块\n  模块尽量使用小写命名，首字母保持小写，尽量不要用下划线(除非多个单词，且数量不多的情况)\n\n  ```python\n  # 正确的模块名\n  import decoder\n  import html_parser\n\n  # 不推荐的模块名\n  import Decoder\n  ```\n\n### 补充\n\npython 不是强类型语言，也就是在声明变量的时候不用去提前告诉程序，变量到底是什么类型。\n\n程序会根据当前的值去推算变量的类型。\n\n例如在强类型语言中（例如Java等），声明一个整数：`int a = 1`，python中只需要`a = 1`。\n\n强类型语言声明一个字符串：`String s = \"hello\"`，python中只需要`s = 'hello'`\n\n并且python的数据类型也是动态的，变量a可以先是整数，再将一个字符串赋值给它，就变成了字符串：\n``` python\na = 1\nprint(a)\na = 'hello'\nprint(a)\n```\n上面程序的结果是：\n```\n1\nhello\n```\n\n所以，不用很在意一个基本数据类型的变量到底是什么，但是如果是字典、列表、字典和集合的话就要注意，后续再补充为什么。\n\n### 基本数据类型\n\n* Python中的数据类型分为：\n    1. 字符串 str\n    2. 数字 \n        * int 整数\n        * float 浮点型 \n        * bool 布尔值（因为是逻辑值，其实也是数字，在离散数学里把0当做False，1当做True）\n    3. 列表 -> list\n    4. 元祖 -> tuple\n    5. 字典 -> dict\n    6. 集合 -> set\n\n上述6个数据类型中，前2个是基本数据类型，细分的话是4个。\n\n每个数据类型后面跟着的的英文是其在Python中的名字，也代表着转换函数的名称。\n\n>例如：`a = int('123')`，会将字符串'123'转换为整数123，并赋值给变量 `a`\n\n### 数据运算\n\n不同数据类型的变量在进行运算的时候一般不能直接运算。\n\n> 例如：`a = '1' + 2`会报错\n\n要进行数据运算时需要相同类型才能进行运算\n\n> 例如：`a = int('1') + 2`，才可以把字符串`'1'`转换为整数`1`和整数`2`进行加法运算。 \n> \n>注意：浮点型float可以和整数int直接运算，例如`a = 1.0 + 2`，得到的结果会是`2.0`，也就是会将整数转换为浮点数进行计算。\n\n而像列表、元祖、字典和集合属于特殊的数据类型，用于特殊的目的，他们的运算方式会比较特殊，后面再补充。","source":"_drafts/2019-07-17-Python1.md","raw":"---\ntitle: Python---变量和数据类型\ndate: 2019-07-17 02:16:45\ncategories:\n- Python\ntags:\n- Python\n- Note\n---\n## 内容\n\n基本的前提知识和基本数据类型的运算等。\n\n## 到底在学什么\n\n其实入门就是学一下思维方式，适应python编写的思维方式。\n\n写程序其实跟写文章没有很大区别，如果你把一个python的代码，全部（包括运算符）翻译成中文，那么其实一段代码在干什么是很直白的，其实也就是在学习一些基础的知识，并在敲demo的过程中适应python的思维方式，看到题目或者别的需求之类的就能想出相应的代码了。\n\n## 基本前提知识\n\n### 运算数\n\n进行运算的对象，`1 + 2`中，`1`和`2` 都是运算数，`+`是运算符。\n\n### 运算符\n\n按所需运算数数量的分法，分双目运算符、单目运算符。\n\n双目运算符：运算符左右两边都有值或表达式，例如：`<` 需要两个值 `1<2`才能进行运算。\n> 还有类似: `+=`、`*=` 等，后续再补充作用\n\n单目运算符：只需要一个运算数，例如：`not`只需要一个值`not True` 即可。\n> 还有类似: `++`、`--` 等，后续再补充作用\n\n`下面的算术运算符和比较运算符仅做介绍，不用记忆，需要了再看`\n\n#### 算术运算符\n\n以下假设变量： `a = 10`，`b = 20`：\n\n|运算符|\t描述|\t实例\n|:---:|:---:|:---:|\n| + |\t加 - 两个对象相加 |\t`a + b` 输出结果 30\n| - |\t减 - 得到负数或是一个数减去另一个数 |\t`a - b` 输出结果 -10\n| * |\t乘 - 两个数相乘或是返回一个被重复若干次的字符串 |\t`a * b` 输出结果 200\n| / |\t除 - x除以y |\t`b / a` 输出结果 2\n| % |\t取模 - 返回除法的余数 |\t`b % a` 输出结果 0\n| ** |\t幂 - 返回x的y次幂 |\t`a**b` 为10的20次方， 输出结果 100000000000000000000\n| // |\t取整除 - 返回商的整数部分 |向下取整\t\n\n`//`的例子：\n\n> 9//2\n>>4\n>\n> -9//2\n>>-5\n\n#### 比较运算符\n\n以下假设变量`a = 10`，变量`b = 20`：\n\n| 运算符\t| 描述\t| 实例\n|:---:|:---:|:---:|\n| ==\t| 等于 - 比较对象是否相等\t| (a == b) 返回 False。\n| !=\t| 不等于 - 比较两个对象是否不相等\t| (a != b) 返回 true.\n| <>\t| 不等于 - 比较两个对象是否不相等\t| (a <> b) 返回 true。这个运算符类似 != 。\n| >\t| 大于 - 返回x是否大于y\t(a > b) 返回 False。\n| <\t| 小于 - 返回x是否小于y。\t| (a < b) 返回 true。\n| >=\t| 大于等于\t- 返回x是否大于等于y。\t| (a >= b) 返回 False。\n| <=\t| 小于等于 -\t返回x是否小于等于y。\t| (a <= b) 返回 true。\n\n所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。\n\n#### 赋值\n\n`=` 等于号也即赋值运算符，将等号右边的值赋给左边的变量。\n\n例如：`a = 1` 将 整数1的值赋给变量`a`。\n\n赋值运算符的执行顺序是这样的：先计算右边的值，再讲将右边的值赋给左边的值。\n\n例如：\n\n`a = a + 1`\n\n假设`a`原来的值是`1`，从`=`的右边先看\n\n`a + 1`的结果是`2`\n\n程序计算完右边的值，对程序来说这个语句变成了：\n\n`a = 2`\n\n也就是说在阅读赋值表达式的时候，把右边的值先完全计算出来，然后用值把右边的所有东西都删去，替换成这个表达式的值，即可。\n\n另外，是不是感觉，`a = a + 1` 有点啰嗦，要打两次`a`。\n\n其实可以把它直接缩写成`a += 1`，这里可以看做就是`a + 1`，但是把左边的`=`省略到`+`里，变成`+=`。\n\n或者可以把`+=`读作“自增”，`a += 1`读作\"`a`自增`1`\"，也就可以理解`+=`的作用了。\n\n类似的还有`-=`等，\n\n如下：\n\n| 运算符 | 描述 | 实例 |\n|:---:  |:---:          |:---:|\n| +=\t  | 加法赋值运算符 |\t`c += a` 等效于 `c = c + a` |\n| -=\t  | 减法赋值运算符 |\t`c -= a` 等效于 `c = c - a` |\n| *=\t  | 乘法赋值运算符 |\t`c *= a` 等效于 `c = c * a` |\n| /=\t  | 除法赋值运算符 |\t`c /= a` 等效于 `c = c / a` |\n| %=\t  | 取模赋值运算符 |\t`c %= a` 等效于 `c = c % a` |\n| **=\t  | 幂赋值运算符  |\t`c **= a` 等效于 `c = c ** a` |\n| //=\t  | 取整除赋值运算符 |\t`c //= a` 等效于 `c = c // a` |\n\n`仅做介绍，不用记忆，用到再来`\n\n\n#### 逻辑运算符\n\n* `or` \n  * 逻辑或，作用：当左右两边的布尔表达式同时为假（False），运算结果为假（False），否则都为真（True）。(以下是例子)\n  >`1<2 or 3<2`的值为`True`。\n  >\n  >`3<2 or 1<2`的值为`True`。\n  >\n  >`1<2 or 3<4`的值为`True`。\n  >\n  >`3<2 or 4<2`的值为`False`。\n  * 也即以下值为`True`：\n    * `True or True`\n    * `True or False`\n    * `False or True`\n  * 而`Fasle or False`的值为`False`\n* `and`\n  * 逻辑与，作用：当左右两边的布尔表达式同时为真（True），运算结果即为真（True），否则都是`False`。(以下是例子)\n  >`1<2 and 3<4`的值为`True`。\n  >\n  >`1<2 and 3<2`的值为`False`。\n  >\n  >`3<2 and 1<2`的值为`False`。\n  >\n  >`3<2 and 4<2`的值为`False`。\n  * 也即以下值为`False`：\n    * `False and False`\n    * `True and False`\n    * `False and True`\n  * 而`True and True`的值为`True`\n* `not` \n  * 逻辑非，作用：将右边的布尔值取反。也就是True变False，False变True\n  >`not 1<2`的值为`False`\n  >\n  >`not 3<4`的值为`True`\n\n    * 也即:`not True`的值为`False`，`not False`的值为`True`\n* `!=` 和 `is not` （两者等效）\n  * 不等于\n* `==` 和 `is` （两者等效）\n  * 等于\n\n## 变量\n\n可以认为变量是对一个数据的命名，变量在使用前是需要声明的，在python中变量的声明通过对变量的赋值进行，例如`a = 1`即声明了一个变量`a`，他的值是`1`。\n\n例如以下代码会报出错误：`NameError: name 'a' is not defined`\n\n``` python\nprint(a)\n```\n\n原因是变量`a`并没有被提前声明\n\n改成下面这样就可以了：\n\n``` python\na = 1\nprint(a)\n```\n\n### 变量命名规范（初学的话仅做了解）\n\n变量就是一个有名字的数据，那么命名就很重要了。\n\n变量名有以下几个规则：\n\n1. 第一个字符必须是字母或者下划线“_”\n\n2. 剩下的部分可以是字母、下划线“_”或数字（0-9）\n\n3. 变量名称是对大小写敏感的，myname和myName不是同一个变量。\n\n规则是一定要符合的，不然程序会报错。\n\n变量的命名一定要具意命名并且用英文，比如保存姓名的变量就叫`name`，不要叫`mingzi`。\n\n`命名规范`是变量在符合上面的命名规则后的建议。\n\n例如有个变量，用来保存Bean曾经说过的话。\n\n不用`命名规范`来命名变量呢，他可以是这样`wordsfrombean`，也可以是`Words_fromBean`，单词量都一样，变量的实际含义也一样，但是形式却不统一，会让代码变得混乱。\n\n常见的`命名规范`方式有：\n\n* 驼峰命名法\n* 匈牙利命名法\n* 帕斯卡（Pascal）命名法\n* 下划线命名法\n\npython的命名风格主要是`驼峰命名法`和`下划线命名法`的混合：\n\n驼峰命名法：第一个单词以小写字母开始；从第二个单词开始以后的每个单词的首字母都采用大写字母。\n\n例如：`myFirstName`、`myLastName`\n\n下划线命名法：单词直接用 `_` （下划线）隔开，变量名小写、常量全大写等，详细看下面的几个介绍。\n\n> 下面关于函、类和模块的命名方式仅做介绍，后面学了函数和类再来看。\n\n1. 变量名\n\n  * 变量名尽量小写, 如有多个单词，用下划线隔开\n  \n  ``` python\n  count = 0\n  school_name = ''\n  ```\n\n  * 常量采用全大写，如有多个单词，使用下划线隔开\n\n  ```\n  MAX_CLIENT = 100\n  MAX_CONNECTION = 1000\n  CONNECTION_TIMEOUT = 600\n  ```\n\n2. 函数\n\n  * 函数名一律小写，如有多个单词，用下划线隔开\n\n  ``` python\n  def run():\n    pass\n\n  def run_with_env():\n      pass\n  ```\n\n  * 私有函数在函数前加一个下划线_\n\n  ``` python\n  class Person():\n\n    def _private_func():\n        pass\n  ```\n\n3. 类\n  类名使用驼峰(CamelCase)命名风格，首字母大写，私有类可用一个下划线开头\n\n  ``` python\n  class Farm():\n    pass\n\n  class AnimalFarm(Farm):\n      pass\n\n  class _PrivateFarm(Farm):\n      pass\n  ```\n  \n4. 模块\n  模块尽量使用小写命名，首字母保持小写，尽量不要用下划线(除非多个单词，且数量不多的情况)\n\n  ```python\n  # 正确的模块名\n  import decoder\n  import html_parser\n\n  # 不推荐的模块名\n  import Decoder\n  ```\n\n### 补充\n\npython 不是强类型语言，也就是在声明变量的时候不用去提前告诉程序，变量到底是什么类型。\n\n程序会根据当前的值去推算变量的类型。\n\n例如在强类型语言中（例如Java等），声明一个整数：`int a = 1`，python中只需要`a = 1`。\n\n强类型语言声明一个字符串：`String s = \"hello\"`，python中只需要`s = 'hello'`\n\n并且python的数据类型也是动态的，变量a可以先是整数，再将一个字符串赋值给它，就变成了字符串：\n``` python\na = 1\nprint(a)\na = 'hello'\nprint(a)\n```\n上面程序的结果是：\n```\n1\nhello\n```\n\n所以，不用很在意一个基本数据类型的变量到底是什么，但是如果是字典、列表、字典和集合的话就要注意，后续再补充为什么。\n\n### 基本数据类型\n\n* Python中的数据类型分为：\n    1. 字符串 str\n    2. 数字 \n        * int 整数\n        * float 浮点型 \n        * bool 布尔值（因为是逻辑值，其实也是数字，在离散数学里把0当做False，1当做True）\n    3. 列表 -> list\n    4. 元祖 -> tuple\n    5. 字典 -> dict\n    6. 集合 -> set\n\n上述6个数据类型中，前2个是基本数据类型，细分的话是4个。\n\n每个数据类型后面跟着的的英文是其在Python中的名字，也代表着转换函数的名称。\n\n>例如：`a = int('123')`，会将字符串'123'转换为整数123，并赋值给变量 `a`\n\n### 数据运算\n\n不同数据类型的变量在进行运算的时候一般不能直接运算。\n\n> 例如：`a = '1' + 2`会报错\n\n要进行数据运算时需要相同类型才能进行运算\n\n> 例如：`a = int('1') + 2`，才可以把字符串`'1'`转换为整数`1`和整数`2`进行加法运算。 \n> \n>注意：浮点型float可以和整数int直接运算，例如`a = 1.0 + 2`，得到的结果会是`2.0`，也就是会将整数转换为浮点数进行计算。\n\n而像列表、元祖、字典和集合属于特殊的数据类型，用于特殊的目的，他们的运算方式会比较特殊，后面再补充。","slug":"Python1","published":0,"updated":"2021-02-13T16:22:11.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaov000ccswgt1kbkhc8","content":"<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><p>基本的前提知识和基本数据类型的运算等。</p>\n<h2 id=\"到底在学什么\"><a href=\"#到底在学什么\" class=\"headerlink\" title=\"到底在学什么\"></a>到底在学什么</h2><p>其实入门就是学一下思维方式，适应python编写的思维方式。</p>\n<p>写程序其实跟写文章没有很大区别，如果你把一个python的代码，全部（包括运算符）翻译成中文，那么其实一段代码在干什么是很直白的，其实也就是在学习一些基础的知识，并在敲demo的过程中适应python的思维方式，看到题目或者别的需求之类的就能想出相应的代码了。</p>\n<h2 id=\"基本前提知识\"><a href=\"#基本前提知识\" class=\"headerlink\" title=\"基本前提知识\"></a>基本前提知识</h2><h3 id=\"运算数\"><a href=\"#运算数\" class=\"headerlink\" title=\"运算数\"></a>运算数</h3><p>进行运算的对象，<code>1 + 2</code>中，<code>1</code>和<code>2</code> 都是运算数，<code>+</code>是运算符。</p>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>按所需运算数数量的分法，分双目运算符、单目运算符。</p>\n<p>双目运算符：运算符左右两边都有值或表达式，例如：<code>&lt;</code> 需要两个值 <code>1&lt;2</code>才能进行运算。</p>\n<blockquote>\n<p>还有类似: <code>+=</code>、<code>*=</code> 等，后续再补充作用</p>\n</blockquote>\n<p>单目运算符：只需要一个运算数，例如：<code>not</code>只需要一个值<code>not True</code> 即可。</p>\n<blockquote>\n<p>还有类似: <code>++</code>、<code>--</code> 等，后续再补充作用</p>\n</blockquote>\n<p><code>下面的算术运算符和比较运算符仅做介绍，不用记忆，需要了再看</code></p>\n<h4 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h4><p>以下假设变量： <code>a = 10</code>，<code>b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">加 - 两个对象相加</td>\n<td style=\"text-align:center\"><code>a + b</code> 输出结果 30</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">减 - 得到负数或是一个数减去另一个数</td>\n<td style=\"text-align:center\"><code>a - b</code> 输出结果 -10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td style=\"text-align:center\"><code>a * b</code> 输出结果 200</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">除 - x除以y</td>\n<td style=\"text-align:center\"><code>b / a</code> 输出结果 2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:center\">取模 - 返回除法的余数</td>\n<td style=\"text-align:center\"><code>b % a</code> 输出结果 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**</td>\n<td style=\"text-align:center\">幂 - 返回x的y次幂</td>\n<td style=\"text-align:center\"><code>a**b</code> 为10的20次方， 输出结果 100000000000000000000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//</td>\n<td style=\"text-align:center\">取整除 - 返回商的整数部分</td>\n<td style=\"text-align:center\">向下取整    </td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><code>//</code>的例子：</p>\n<blockquote>\n<p>9//2</p>\n<blockquote>\n<p>4</p>\n</blockquote>\n<p>-9//2</p>\n<blockquote>\n<p>-5</p>\n</blockquote>\n</blockquote>\n<h4 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h4><p>以下假设变量<code>a = 10</code>，变量<code>b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">等于 - 比较对象是否相等</td>\n<td style=\"text-align:center\">(a == b) 返回 False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:center\">不等于 - 比较两个对象是否不相等</td>\n<td style=\"text-align:center\">(a != b) 返回 true.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&gt;</td>\n<td style=\"text-align:center\">不等于 - 比较两个对象是否不相等</td>\n<td style=\"text-align:center\">(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">大于 - 返回x是否大于y    (a &gt; b) 返回 False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">小于 - 返回x是否小于y。</td>\n<td style=\"text-align:center\">(a &lt; b) 返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:center\">大于等于    - 返回x是否大于等于y。</td>\n<td style=\"text-align:center\">(a &gt;= b) 返回 False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:center\">小于等于 -    返回x是否小于等于y。</td>\n<td style=\"text-align:center\">(a &lt;= b) 返回 true。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</p>\n<h4 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h4><p><code>=</code> 等于号也即赋值运算符，将等号右边的值赋给左边的变量。</p>\n<p>例如：<code>a = 1</code> 将 整数1的值赋给变量<code>a</code>。</p>\n<p>赋值运算符的执行顺序是这样的：先计算右边的值，再讲将右边的值赋给左边的值。</p>\n<p>例如：</p>\n<p><code>a = a + 1</code></p>\n<p>假设<code>a</code>原来的值是<code>1</code>，从<code>=</code>的右边先看</p>\n<p><code>a + 1</code>的结果是<code>2</code></p>\n<p>程序计算完右边的值，对程序来说这个语句变成了：</p>\n<p><code>a = 2</code></p>\n<p>也就是说在阅读赋值表达式的时候，把右边的值先完全计算出来，然后用值把右边的所有东西都删去，替换成这个表达式的值，即可。</p>\n<p>另外，是不是感觉，<code>a = a + 1</code> 有点啰嗦，要打两次<code>a</code>。</p>\n<p>其实可以把它直接缩写成<code>a += 1</code>，这里可以看做就是<code>a + 1</code>，但是把左边的<code>=</code>省略到<code>+</code>里，变成<code>+=</code>。</p>\n<p>或者可以把<code>+=</code>读作“自增”，<code>a += 1</code>读作”<code>a</code>自增<code>1</code>“，也就可以理解<code>+=</code>的作用了。</p>\n<p>类似的还有<code>-=</code>等，</p>\n<p>如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:center\">加法赋值运算符</td>\n<td style=\"text-align:center\"><code>c += a</code> 等效于 <code>c = c + a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:center\">减法赋值运算符</td>\n<td style=\"text-align:center\"><code>c -= a</code> 等效于 <code>c = c - a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:center\">乘法赋值运算符</td>\n<td style=\"text-align:center\"><code>c *= a</code> 等效于 <code>c = c * a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/=</td>\n<td style=\"text-align:center\">除法赋值运算符</td>\n<td style=\"text-align:center\"><code>c /= a</code> 等效于 <code>c = c / a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%=</td>\n<td style=\"text-align:center\">取模赋值运算符</td>\n<td style=\"text-align:center\"><code>c %= a</code> 等效于 <code>c = c % a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**=</td>\n<td style=\"text-align:center\">幂赋值运算符</td>\n<td style=\"text-align:center\"><code>c **= a</code> 等效于 <code>c = c ** a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//=</td>\n<td style=\"text-align:center\">取整除赋值运算符</td>\n<td style=\"text-align:center\"><code>c //= a</code> 等效于 <code>c = c // a</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><code>仅做介绍，不用记忆，用到再来</code></p>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><ul>\n<li><code>or</code> <ul>\n<li>逻辑或，作用：当左右两边的布尔表达式同时为假（False），运算结果为假（False），否则都为真（True）。(以下是例子)<blockquote>\n<p><code>1&lt;2 or 3&lt;2</code>的值为<code>True</code>。</p>\n<p><code>3&lt;2 or 1&lt;2</code>的值为<code>True</code>。</p>\n<p><code>1&lt;2 or 3&lt;4</code>的值为<code>True</code>。</p>\n<p><code>3&lt;2 or 4&lt;2</code>的值为<code>False</code>。</p>\n</blockquote>\n</li>\n<li>也即以下值为<code>True</code>：<ul>\n<li><code>True or True</code></li>\n<li><code>True or False</code></li>\n<li><code>False or True</code></li>\n</ul>\n</li>\n<li>而<code>Fasle or False</code>的值为<code>False</code></li>\n</ul>\n</li>\n<li><code>and</code><ul>\n<li>逻辑与，作用：当左右两边的布尔表达式同时为真（True），运算结果即为真（True），否则都是<code>False</code>。(以下是例子)<blockquote>\n<p><code>1&lt;2 and 3&lt;4</code>的值为<code>True</code>。</p>\n<p><code>1&lt;2 and 3&lt;2</code>的值为<code>False</code>。</p>\n<p><code>3&lt;2 and 1&lt;2</code>的值为<code>False</code>。</p>\n<p><code>3&lt;2 and 4&lt;2</code>的值为<code>False</code>。</p>\n</blockquote>\n</li>\n<li>也即以下值为<code>False</code>：<ul>\n<li><code>False and False</code></li>\n<li><code>True and False</code></li>\n<li><code>False and True</code></li>\n</ul>\n</li>\n<li>而<code>True and True</code>的值为<code>True</code></li>\n</ul>\n</li>\n<li><p><code>not</code> </p>\n<ul>\n<li><p>逻辑非，作用：将右边的布尔值取反。也就是True变False，False变True</p>\n<blockquote>\n<p><code>not 1&lt;2</code>的值为<code>False</code></p>\n<p><code>not 3&lt;4</code>的值为<code>True</code></p>\n</blockquote>\n<ul>\n<li>也即:<code>not True</code>的值为<code>False</code>，<code>not False</code>的值为<code>True</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>!=</code> 和 <code>is not</code> （两者等效）<ul>\n<li>不等于</li>\n</ul>\n</li>\n<li><code>==</code> 和 <code>is</code> （两者等效）<ul>\n<li>等于</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>可以认为变量是对一个数据的命名，变量在使用前是需要声明的，在python中变量的声明通过对变量的赋值进行，例如<code>a = 1</code>即声明了一个变量<code>a</code>，他的值是<code>1</code>。</p>\n<p>例如以下代码会报出错误：<code>NameError: name &#39;a&#39; is not defined</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n<p>原因是变量<code>a</code>并没有被提前声明</p>\n<p>改成下面这样就可以了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量命名规范（初学的话仅做了解）\"><a href=\"#变量命名规范（初学的话仅做了解）\" class=\"headerlink\" title=\"变量命名规范（初学的话仅做了解）\"></a>变量命名规范（初学的话仅做了解）</h3><p>变量就是一个有名字的数据，那么命名就很重要了。</p>\n<p>变量名有以下几个规则：</p>\n<ol>\n<li><p>第一个字符必须是字母或者下划线“_”</p>\n</li>\n<li><p>剩下的部分可以是字母、下划线“_”或数字（0-9）</p>\n</li>\n<li><p>变量名称是对大小写敏感的，myname和myName不是同一个变量。</p>\n</li>\n</ol>\n<p>规则是一定要符合的，不然程序会报错。</p>\n<p>变量的命名一定要具意命名并且用英文，比如保存姓名的变量就叫<code>name</code>，不要叫<code>mingzi</code>。</p>\n<p><code>命名规范</code>是变量在符合上面的命名规则后的建议。</p>\n<p>例如有个变量，用来保存Bean曾经说过的话。</p>\n<p>不用<code>命名规范</code>来命名变量呢，他可以是这样<code>wordsfrombean</code>，也可以是<code>Words_fromBean</code>，单词量都一样，变量的实际含义也一样，但是形式却不统一，会让代码变得混乱。</p>\n<p>常见的<code>命名规范</code>方式有：</p>\n<ul>\n<li>驼峰命名法</li>\n<li>匈牙利命名法</li>\n<li>帕斯卡（Pascal）命名法</li>\n<li>下划线命名法</li>\n</ul>\n<p>python的命名风格主要是<code>驼峰命名法</code>和<code>下划线命名法</code>的混合：</p>\n<p>驼峰命名法：第一个单词以小写字母开始；从第二个单词开始以后的每个单词的首字母都采用大写字母。</p>\n<p>例如：<code>myFirstName</code>、<code>myLastName</code></p>\n<p>下划线命名法：单词直接用 <code>_</code> （下划线）隔开，变量名小写、常量全大写等，详细看下面的几个介绍。</p>\n<blockquote>\n<p>下面关于函、类和模块的命名方式仅做介绍，后面学了函数和类再来看。</p>\n</blockquote>\n<ol>\n<li><p>变量名</p>\n<ul>\n<li>变量名尽量小写, 如有多个单词，用下划线隔开</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\">school_name = <span class=\"string\">''</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>常量采用全大写，如有多个单词，使用下划线隔开</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAX_CLIENT = 100</span><br><span class=\"line\">MAX_CONNECTION = 1000</span><br><span class=\"line\">CONNECTION_TIMEOUT = 600</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数</p>\n<ul>\n<li>函数名一律小写，如有多个单词，用下划线隔开</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_with_env</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>私有函数在函数前加一个下划线_</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_private_func</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类<br>类名使用驼峰(CamelCase)命名风格，首字母大写，私有类可用一个下划线开头</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Farm</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFarm</span><span class=\"params\">(Farm)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_PrivateFarm</span><span class=\"params\">(Farm)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>模块<br>模块尽量使用小写命名，首字母保持小写，尽量不要用下划线(除非多个单词，且数量不多的情况)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 正确的模块名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> decoder</span><br><span class=\"line\"><span class=\"keyword\">import</span> html_parser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不推荐的模块名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Decoder</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>python 不是强类型语言，也就是在声明变量的时候不用去提前告诉程序，变量到底是什么类型。</p>\n<p>程序会根据当前的值去推算变量的类型。</p>\n<p>例如在强类型语言中（例如Java等），声明一个整数：<code>int a = 1</code>，python中只需要<code>a = 1</code>。</p>\n<p>强类型语言声明一个字符串：<code>String s = &quot;hello&quot;</code>，python中只需要<code>s = &#39;hello&#39;</code></p>\n<p>并且python的数据类型也是动态的，变量a可以先是整数，再将一个字符串赋值给它，就变成了字符串：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">a = <span class=\"string\">'hello'</span></span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure></p>\n<p>上面程序的结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure></p>\n<p>所以，不用很在意一个基本数据类型的变量到底是什么，但是如果是字典、列表、字典和集合的话就要注意，后续再补充为什么。</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ul>\n<li>Python中的数据类型分为：<ol>\n<li>字符串 str</li>\n<li>数字 <ul>\n<li>int 整数</li>\n<li>float 浮点型 </li>\n<li>bool 布尔值（因为是逻辑值，其实也是数字，在离散数学里把0当做False，1当做True）</li>\n</ul>\n</li>\n<li>列表 -&gt; list</li>\n<li>元祖 -&gt; tuple</li>\n<li>字典 -&gt; dict</li>\n<li>集合 -&gt; set</li>\n</ol>\n</li>\n</ul>\n<p>上述6个数据类型中，前2个是基本数据类型，细分的话是4个。</p>\n<p>每个数据类型后面跟着的的英文是其在Python中的名字，也代表着转换函数的名称。</p>\n<blockquote>\n<p>例如：<code>a = int(&#39;123&#39;)</code>，会将字符串’123’转换为整数123，并赋值给变量 <code>a</code></p>\n</blockquote>\n<h3 id=\"数据运算\"><a href=\"#数据运算\" class=\"headerlink\" title=\"数据运算\"></a>数据运算</h3><p>不同数据类型的变量在进行运算的时候一般不能直接运算。</p>\n<blockquote>\n<p>例如：<code>a = &#39;1&#39; + 2</code>会报错</p>\n</blockquote>\n<p>要进行数据运算时需要相同类型才能进行运算</p>\n<blockquote>\n<p>例如：<code>a = int(&#39;1&#39;) + 2</code>，才可以把字符串<code>&#39;1&#39;</code>转换为整数<code>1</code>和整数<code>2</code>进行加法运算。 </p>\n<p>注意：浮点型float可以和整数int直接运算，例如<code>a = 1.0 + 2</code>，得到的结果会是<code>2.0</code>，也就是会将整数转换为浮点数进行计算。</p>\n</blockquote>\n<p>而像列表、元祖、字典和集合属于特殊的数据类型，用于特殊的目的，他们的运算方式会比较特殊，后面再补充。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h2><p>基本的前提知识和基本数据类型的运算等。</p>\n<h2 id=\"到底在学什么\"><a href=\"#到底在学什么\" class=\"headerlink\" title=\"到底在学什么\"></a>到底在学什么</h2><p>其实入门就是学一下思维方式，适应python编写的思维方式。</p>\n<p>写程序其实跟写文章没有很大区别，如果你把一个python的代码，全部（包括运算符）翻译成中文，那么其实一段代码在干什么是很直白的，其实也就是在学习一些基础的知识，并在敲demo的过程中适应python的思维方式，看到题目或者别的需求之类的就能想出相应的代码了。</p>\n<h2 id=\"基本前提知识\"><a href=\"#基本前提知识\" class=\"headerlink\" title=\"基本前提知识\"></a>基本前提知识</h2><h3 id=\"运算数\"><a href=\"#运算数\" class=\"headerlink\" title=\"运算数\"></a>运算数</h3><p>进行运算的对象，<code>1 + 2</code>中，<code>1</code>和<code>2</code> 都是运算数，<code>+</code>是运算符。</p>\n<h3 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h3><p>按所需运算数数量的分法，分双目运算符、单目运算符。</p>\n<p>双目运算符：运算符左右两边都有值或表达式，例如：<code>&lt;</code> 需要两个值 <code>1&lt;2</code>才能进行运算。</p>\n<blockquote>\n<p>还有类似: <code>+=</code>、<code>*=</code> 等，后续再补充作用</p>\n</blockquote>\n<p>单目运算符：只需要一个运算数，例如：<code>not</code>只需要一个值<code>not True</code> 即可。</p>\n<blockquote>\n<p>还有类似: <code>++</code>、<code>--</code> 等，后续再补充作用</p>\n</blockquote>\n<p><code>下面的算术运算符和比较运算符仅做介绍，不用记忆，需要了再看</code></p>\n<h4 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h4><p>以下假设变量： <code>a = 10</code>，<code>b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:center\">加 - 两个对象相加</td>\n<td style=\"text-align:center\"><code>a + b</code> 输出结果 30</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-</td>\n<td style=\"text-align:center\">减 - 得到负数或是一个数减去另一个数</td>\n<td style=\"text-align:center\"><code>a - b</code> 输出结果 -10</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:center\">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td>\n<td style=\"text-align:center\"><code>a * b</code> 输出结果 200</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/</td>\n<td style=\"text-align:center\">除 - x除以y</td>\n<td style=\"text-align:center\"><code>b / a</code> 输出结果 2</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%</td>\n<td style=\"text-align:center\">取模 - 返回除法的余数</td>\n<td style=\"text-align:center\"><code>b % a</code> 输出结果 0</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**</td>\n<td style=\"text-align:center\">幂 - 返回x的y次幂</td>\n<td style=\"text-align:center\"><code>a**b</code> 为10的20次方， 输出结果 100000000000000000000</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//</td>\n<td style=\"text-align:center\">取整除 - 返回商的整数部分</td>\n<td style=\"text-align:center\">向下取整    </td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><code>//</code>的例子：</p>\n<blockquote>\n<p>9//2</p>\n<blockquote>\n<p>4</p>\n</blockquote>\n<p>-9//2</p>\n<blockquote>\n<p>-5</p>\n</blockquote>\n</blockquote>\n<h4 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h4><p>以下假设变量<code>a = 10</code>，变量<code>b = 20</code>：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">==</td>\n<td style=\"text-align:center\">等于 - 比较对象是否相等</td>\n<td style=\"text-align:center\">(a == b) 返回 False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">!=</td>\n<td style=\"text-align:center\">不等于 - 比较两个对象是否不相等</td>\n<td style=\"text-align:center\">(a != b) 返回 true.</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;&gt;</td>\n<td style=\"text-align:center\">不等于 - 比较两个对象是否不相等</td>\n<td style=\"text-align:center\">(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;</td>\n<td style=\"text-align:center\">大于 - 返回x是否大于y    (a &gt; b) 返回 False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;</td>\n<td style=\"text-align:center\">小于 - 返回x是否小于y。</td>\n<td style=\"text-align:center\">(a &lt; b) 返回 true。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&gt;=</td>\n<td style=\"text-align:center\">大于等于    - 返回x是否大于等于y。</td>\n<td style=\"text-align:center\">(a &gt;= b) 返回 False。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">&lt;=</td>\n<td style=\"text-align:center\">小于等于 -    返回x是否小于等于y。</td>\n<td style=\"text-align:center\">(a &lt;= b) 返回 true。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</p>\n<h4 id=\"赋值\"><a href=\"#赋值\" class=\"headerlink\" title=\"赋值\"></a>赋值</h4><p><code>=</code> 等于号也即赋值运算符，将等号右边的值赋给左边的变量。</p>\n<p>例如：<code>a = 1</code> 将 整数1的值赋给变量<code>a</code>。</p>\n<p>赋值运算符的执行顺序是这样的：先计算右边的值，再讲将右边的值赋给左边的值。</p>\n<p>例如：</p>\n<p><code>a = a + 1</code></p>\n<p>假设<code>a</code>原来的值是<code>1</code>，从<code>=</code>的右边先看</p>\n<p><code>a + 1</code>的结果是<code>2</code></p>\n<p>程序计算完右边的值，对程序来说这个语句变成了：</p>\n<p><code>a = 2</code></p>\n<p>也就是说在阅读赋值表达式的时候，把右边的值先完全计算出来，然后用值把右边的所有东西都删去，替换成这个表达式的值，即可。</p>\n<p>另外，是不是感觉，<code>a = a + 1</code> 有点啰嗦，要打两次<code>a</code>。</p>\n<p>其实可以把它直接缩写成<code>a += 1</code>，这里可以看做就是<code>a + 1</code>，但是把左边的<code>=</code>省略到<code>+</code>里，变成<code>+=</code>。</p>\n<p>或者可以把<code>+=</code>读作“自增”，<code>a += 1</code>读作”<code>a</code>自增<code>1</code>“，也就可以理解<code>+=</code>的作用了。</p>\n<p>类似的还有<code>-=</code>等，</p>\n<p>如下：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算符</th>\n<th style=\"text-align:center\">描述</th>\n<th style=\"text-align:center\">实例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">+=</td>\n<td style=\"text-align:center\">加法赋值运算符</td>\n<td style=\"text-align:center\"><code>c += a</code> 等效于 <code>c = c + a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-=</td>\n<td style=\"text-align:center\">减法赋值运算符</td>\n<td style=\"text-align:center\"><code>c -= a</code> 等效于 <code>c = c - a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">*=</td>\n<td style=\"text-align:center\">乘法赋值运算符</td>\n<td style=\"text-align:center\"><code>c *= a</code> 等效于 <code>c = c * a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">/=</td>\n<td style=\"text-align:center\">除法赋值运算符</td>\n<td style=\"text-align:center\"><code>c /= a</code> 等效于 <code>c = c / a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">%=</td>\n<td style=\"text-align:center\">取模赋值运算符</td>\n<td style=\"text-align:center\"><code>c %= a</code> 等效于 <code>c = c % a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">**=</td>\n<td style=\"text-align:center\">幂赋值运算符</td>\n<td style=\"text-align:center\"><code>c **= a</code> 等效于 <code>c = c ** a</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">//=</td>\n<td style=\"text-align:center\">取整除赋值运算符</td>\n<td style=\"text-align:center\"><code>c //= a</code> 等效于 <code>c = c // a</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><code>仅做介绍，不用记忆，用到再来</code></p>\n<h4 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h4><ul>\n<li><code>or</code> <ul>\n<li>逻辑或，作用：当左右两边的布尔表达式同时为假（False），运算结果为假（False），否则都为真（True）。(以下是例子)<blockquote>\n<p><code>1&lt;2 or 3&lt;2</code>的值为<code>True</code>。</p>\n<p><code>3&lt;2 or 1&lt;2</code>的值为<code>True</code>。</p>\n<p><code>1&lt;2 or 3&lt;4</code>的值为<code>True</code>。</p>\n<p><code>3&lt;2 or 4&lt;2</code>的值为<code>False</code>。</p>\n</blockquote>\n</li>\n<li>也即以下值为<code>True</code>：<ul>\n<li><code>True or True</code></li>\n<li><code>True or False</code></li>\n<li><code>False or True</code></li>\n</ul>\n</li>\n<li>而<code>Fasle or False</code>的值为<code>False</code></li>\n</ul>\n</li>\n<li><code>and</code><ul>\n<li>逻辑与，作用：当左右两边的布尔表达式同时为真（True），运算结果即为真（True），否则都是<code>False</code>。(以下是例子)<blockquote>\n<p><code>1&lt;2 and 3&lt;4</code>的值为<code>True</code>。</p>\n<p><code>1&lt;2 and 3&lt;2</code>的值为<code>False</code>。</p>\n<p><code>3&lt;2 and 1&lt;2</code>的值为<code>False</code>。</p>\n<p><code>3&lt;2 and 4&lt;2</code>的值为<code>False</code>。</p>\n</blockquote>\n</li>\n<li>也即以下值为<code>False</code>：<ul>\n<li><code>False and False</code></li>\n<li><code>True and False</code></li>\n<li><code>False and True</code></li>\n</ul>\n</li>\n<li>而<code>True and True</code>的值为<code>True</code></li>\n</ul>\n</li>\n<li><p><code>not</code> </p>\n<ul>\n<li><p>逻辑非，作用：将右边的布尔值取反。也就是True变False，False变True</p>\n<blockquote>\n<p><code>not 1&lt;2</code>的值为<code>False</code></p>\n<p><code>not 3&lt;4</code>的值为<code>True</code></p>\n</blockquote>\n<ul>\n<li>也即:<code>not True</code>的值为<code>False</code>，<code>not False</code>的值为<code>True</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>!=</code> 和 <code>is not</code> （两者等效）<ul>\n<li>不等于</li>\n</ul>\n</li>\n<li><code>==</code> 和 <code>is</code> （两者等效）<ul>\n<li>等于</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>可以认为变量是对一个数据的命名，变量在使用前是需要声明的，在python中变量的声明通过对变量的赋值进行，例如<code>a = 1</code>即声明了一个变量<code>a</code>，他的值是<code>1</code>。</p>\n<p>例如以下代码会报出错误：<code>NameError: name &#39;a&#39; is not defined</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n<p>原因是变量<code>a</code>并没有被提前声明</p>\n<p>改成下面这样就可以了：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure>\n<h3 id=\"变量命名规范（初学的话仅做了解）\"><a href=\"#变量命名规范（初学的话仅做了解）\" class=\"headerlink\" title=\"变量命名规范（初学的话仅做了解）\"></a>变量命名规范（初学的话仅做了解）</h3><p>变量就是一个有名字的数据，那么命名就很重要了。</p>\n<p>变量名有以下几个规则：</p>\n<ol>\n<li><p>第一个字符必须是字母或者下划线“_”</p>\n</li>\n<li><p>剩下的部分可以是字母、下划线“_”或数字（0-9）</p>\n</li>\n<li><p>变量名称是对大小写敏感的，myname和myName不是同一个变量。</p>\n</li>\n</ol>\n<p>规则是一定要符合的，不然程序会报错。</p>\n<p>变量的命名一定要具意命名并且用英文，比如保存姓名的变量就叫<code>name</code>，不要叫<code>mingzi</code>。</p>\n<p><code>命名规范</code>是变量在符合上面的命名规则后的建议。</p>\n<p>例如有个变量，用来保存Bean曾经说过的话。</p>\n<p>不用<code>命名规范</code>来命名变量呢，他可以是这样<code>wordsfrombean</code>，也可以是<code>Words_fromBean</code>，单词量都一样，变量的实际含义也一样，但是形式却不统一，会让代码变得混乱。</p>\n<p>常见的<code>命名规范</code>方式有：</p>\n<ul>\n<li>驼峰命名法</li>\n<li>匈牙利命名法</li>\n<li>帕斯卡（Pascal）命名法</li>\n<li>下划线命名法</li>\n</ul>\n<p>python的命名风格主要是<code>驼峰命名法</code>和<code>下划线命名法</code>的混合：</p>\n<p>驼峰命名法：第一个单词以小写字母开始；从第二个单词开始以后的每个单词的首字母都采用大写字母。</p>\n<p>例如：<code>myFirstName</code>、<code>myLastName</code></p>\n<p>下划线命名法：单词直接用 <code>_</code> （下划线）隔开，变量名小写、常量全大写等，详细看下面的几个介绍。</p>\n<blockquote>\n<p>下面关于函、类和模块的命名方式仅做介绍，后面学了函数和类再来看。</p>\n</blockquote>\n<ol>\n<li><p>变量名</p>\n<ul>\n<li>变量名尽量小写, 如有多个单词，用下划线隔开</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\">school_name = <span class=\"string\">''</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>常量采用全大写，如有多个单词，使用下划线隔开</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MAX_CLIENT = 100</span><br><span class=\"line\">MAX_CONNECTION = 1000</span><br><span class=\"line\">CONNECTION_TIMEOUT = 600</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>函数</p>\n<ul>\n<li>函数名一律小写，如有多个单词，用下划线隔开</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">run_with_env</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>私有函数在函数前加一个下划线_</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_private_func</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">      <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类<br>类名使用驼峰(CamelCase)命名风格，首字母大写，私有类可用一个下划线开头</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Farm</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">  <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnimalFarm</span><span class=\"params\">(Farm)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_PrivateFarm</span><span class=\"params\">(Farm)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ol>\n<li><p>模块<br>模块尽量使用小写命名，首字母保持小写，尽量不要用下划线(除非多个单词，且数量不多的情况)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 正确的模块名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> decoder</span><br><span class=\"line\"><span class=\"keyword\">import</span> html_parser</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 不推荐的模块名</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Decoder</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h3><p>python 不是强类型语言，也就是在声明变量的时候不用去提前告诉程序，变量到底是什么类型。</p>\n<p>程序会根据当前的值去推算变量的类型。</p>\n<p>例如在强类型语言中（例如Java等），声明一个整数：<code>int a = 1</code>，python中只需要<code>a = 1</code>。</p>\n<p>强类型语言声明一个字符串：<code>String s = &quot;hello&quot;</code>，python中只需要<code>s = &#39;hello&#39;</code></p>\n<p>并且python的数据类型也是动态的，变量a可以先是整数，再将一个字符串赋值给它，就变成了字符串：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">1</span></span><br><span class=\"line\">print(a)</span><br><span class=\"line\">a = <span class=\"string\">'hello'</span></span><br><span class=\"line\">print(a)</span><br></pre></td></tr></table></figure></p>\n<p>上面程序的结果是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1</span><br><span class=\"line\">hello</span><br></pre></td></tr></table></figure></p>\n<p>所以，不用很在意一个基本数据类型的变量到底是什么，但是如果是字典、列表、字典和集合的话就要注意，后续再补充为什么。</p>\n<h3 id=\"基本数据类型\"><a href=\"#基本数据类型\" class=\"headerlink\" title=\"基本数据类型\"></a>基本数据类型</h3><ul>\n<li>Python中的数据类型分为：<ol>\n<li>字符串 str</li>\n<li>数字 <ul>\n<li>int 整数</li>\n<li>float 浮点型 </li>\n<li>bool 布尔值（因为是逻辑值，其实也是数字，在离散数学里把0当做False，1当做True）</li>\n</ul>\n</li>\n<li>列表 -&gt; list</li>\n<li>元祖 -&gt; tuple</li>\n<li>字典 -&gt; dict</li>\n<li>集合 -&gt; set</li>\n</ol>\n</li>\n</ul>\n<p>上述6个数据类型中，前2个是基本数据类型，细分的话是4个。</p>\n<p>每个数据类型后面跟着的的英文是其在Python中的名字，也代表着转换函数的名称。</p>\n<blockquote>\n<p>例如：<code>a = int(&#39;123&#39;)</code>，会将字符串’123’转换为整数123，并赋值给变量 <code>a</code></p>\n</blockquote>\n<h3 id=\"数据运算\"><a href=\"#数据运算\" class=\"headerlink\" title=\"数据运算\"></a>数据运算</h3><p>不同数据类型的变量在进行运算的时候一般不能直接运算。</p>\n<blockquote>\n<p>例如：<code>a = &#39;1&#39; + 2</code>会报错</p>\n</blockquote>\n<p>要进行数据运算时需要相同类型才能进行运算</p>\n<blockquote>\n<p>例如：<code>a = int(&#39;1&#39;) + 2</code>，才可以把字符串<code>&#39;1&#39;</code>转换为整数<code>1</code>和整数<code>2</code>进行加法运算。 </p>\n<p>注意：浮点型float可以和整数int直接运算，例如<code>a = 1.0 + 2</code>，得到的结果会是<code>2.0</code>，也就是会将整数转换为浮点数进行计算。</p>\n</blockquote>\n<p>而像列表、元祖、字典和集合属于特殊的数据类型，用于特殊的目的，他们的运算方式会比较特殊，后面再补充。</p>\n"},{"title":"Pyhton-Funtion","date":"2019-07-18T08:40:32.000Z","_content":"## 为什么讲函数\n\n函数其实想放到后面讲的，但是因为`for`循环会讲到`range()`这个函数，所以先基础的讲一下函数是什么。\n\n## 什么是函数？\n\n函数其实就是一段可以被重复使用的代码，用参数来代替其中的可变部分。\n\n例如，在一个软件里面，我需要打印5行不同的信息：\n\n``` python\nHello\nWhat\nI dont \nknow\nreally?\n```\n\npython实现：\n\n\n``` python\nprint('Hello')\nprint('What')\nprint('I dont')\nprint('know')\nprint('really?')\n```\n\n如果要重复打印这五行字，那么由之前的循环可以知道，当然是为这五行打印加上循环。\n\n``` python\na = 0\nwhile a<10:\n    print('Hello')\n    print('What')\n    print('I dont')\n    print('know')\n    print('really?')\n    a = a + 1\n```\n\n那么，如果我想打印n次这5行字后，打印其他的若干行，再回来打印这五行字，可能会变成这样：\n\n``` python \na = 0\nwhile a<10:\n    print('Hello')\n    print('What')\n    print('I dont')\n    print('know')\n    print('really?')\n    a = a + 1\n\nb = 0\nwhile b<10:\n    print('something else')\n    print('yep')\n\nc = 0\nwhile c<10:\n    print('Hello')\n    print('What')\n    print('I dont')\n    print('know')\n    print('really?')\n    c = c + 1\n```\n\n有没有发现，其实三个循环的第一和第三个循环除了用于判断的变量名字不一样之外，是不是完全一样呢？\n\n那么可以把这两个完全一样，或者称之为重复的代码片段，提取出来，提取出来后就被称之为函数了。\n\n用函数的思路把上面的例子改进一下，会变成：\n\n``` python\ndef print_my_words():\n    a = 0\n    while a<10:\n        print('Hello')\n        print('What')\n        print('I dont')\n        print('know')\n        print('really?')\n        a = a + 1\n\nprint_my_words()\n\nb = 0\nwhile b<10:\n    print('something else')\n    print('yep')\n\nprint_my_words()\n```\n\n会发现变得简洁了很多。\n\n>其实`print`就是一个函数，在前面`print('hello world')`的时候，就已经接触到什么是函数了。\n>\n>对于这个函数来说，`print`是他的函数名，小括号里的`'hello world'`是他的函数参数，至于什么是参数，下面讲解\n\n在python里，函数的使用方法是：`函数名(参数)`，和变量名的区别就是有无小括号和括号里的参数。\n\n例如，`a()`是调用函数`a`\n\n而，`a`是声明一个变量`a`\n\n## 编写函数的思路\n\n编写函数最简单的思路就是，提取重复。\n\n或者就像数学里头称的函数一样的思路，给定变量，返回结果。\n\n小学都学过加法：`1+1=2`，而其实在数学里，这个算式可以被抽象为`f(1,1)=2`。\n\n`f(1,1)`其实与python里的函数没有本质的区别。\n\n可以看做是函数名为`f`的函数，他的`参数列表`有两个`参数`，分别是`1`和`1`。\n\n而函数的内容，也就是函数体，就是在做两个参数相加的过程，也就可以得到一个相加函数：\n\n``` python\ndef add(x,y):\n    return x + y\n```\n\n## 函数形式和关键词的作用\n\npython中一个函数的形式如下：\n\n``` python\ndef functionname( parameters ):\n    \"function_docstring\"\n    function_body\n    return [expression]\n```\n\n\n`def`关键字是define的缩写，即 “定义”。\n\n`functionname`就是函数的名字，一般是要求符合命名规则，命名规则在变量和数据类型有提及，刚入门不要求记忆，随便命名既可，但要`具意命名`，例如打印函数就叫`print`\n\n> 具意命名就是名字和具体代表的东西要一致，用来表示名字的变量就叫`name`，用做加法的函数就叫`add()`\n\n其中`\"function_docstring\"`是对函数的说明，运行的时候会跳过。\n\n`function_body`就是函数体，也是一块可以被重复使用的代码块。\n\n`return` 表示将某个值返回的意思，例如写一个加法函数，要把最后结果保存下来，就会把结果值返回。\n\n下面是一个加法函数的例子：\n\n``` python\ndef add_two_number(first, second):\n    result = first + second\n    return result\n```\n\n\n上面例子里，有两个参数，`first`和`second`，参数其实就是外来的变量，也是在函数中可变的部分。\n\n这个函数的目的是做加法，加法的结果由两个数影响，这两个数是可变的，但是加法的过程是确定的。\n\n所以，这两个数就是函数的参数了。\n\n`return result`这一句的意思是把`result`变量返回，函数体运行结束后，需要把结果返回给调用者，也就是`return`的作用。\n\n>注意，如果不需要返回值，那么可以不用`return`语句\n>\n>假如你只有一个很简单的函数，用来打印一些信息，就不需要有返回值\n\n函数被定义，就是需要被使用的，使用的过程被叫做`函数的调用`\n\n那么，怎么调用一个函数呢？\n\n在“Hello World”的例子里：\n\n``` python\nprint('Hello World')\n```\n\n其实就是调用了一个函数`print`，`'Hello World'`是他的参数。\n\n上面例子里的加法函数的调用例子如下：\n\n``` python\ndef add_two_number(first, second):\n    result = first + second\n    return result\n\na_number = add_two_number(1,2)\n\nprint(a_number)\n```\n\n`add_two_number(1,2)`就是调用了这个函数，参数分别是`1`和`2`，按顺序对应。\n\n可以分解的看成，`a_number = add_two_number(1,2)`这个语句的执行步骤被分成了四部分：\n\n1. a_number = add_two_number(1,2)\n2. 执行跳到add_two_number的代码块来，执行对参数的赋值，也就是`first = 1`和`second = 2`\n3. 执行函数体\n4. 返回结果\n\n函数的`返回值`，可以看做执行后，把赋值语句替换掉，也就是`a_number = add_two_number(1,1)`替换成`a_number = 3`\n\n然后`print(a_number)`的结果就是打印了`3`\n\n# 总结一下\n\n函数其实就是一段可以被重复使用的代码，其中的可变部分，或者说依赖于这段代码以外的变量，就是`参数`了。\n\n函数的定义方式就是：\n\n``` python\ndef functionname( parameters ):\n    \"function_docstring\"\n    function_body\n    return [expression]\n```\n","source":"_drafts/2019-07-24-Pyhton-Funtion.md","raw":"---\ntitle: Pyhton-Funtion\ndate: 2019-07-18 16:40:32\ncategories:\n- Python\ntags:\n- Python\n- Note\n---\n## 为什么讲函数\n\n函数其实想放到后面讲的，但是因为`for`循环会讲到`range()`这个函数，所以先基础的讲一下函数是什么。\n\n## 什么是函数？\n\n函数其实就是一段可以被重复使用的代码，用参数来代替其中的可变部分。\n\n例如，在一个软件里面，我需要打印5行不同的信息：\n\n``` python\nHello\nWhat\nI dont \nknow\nreally?\n```\n\npython实现：\n\n\n``` python\nprint('Hello')\nprint('What')\nprint('I dont')\nprint('know')\nprint('really?')\n```\n\n如果要重复打印这五行字，那么由之前的循环可以知道，当然是为这五行打印加上循环。\n\n``` python\na = 0\nwhile a<10:\n    print('Hello')\n    print('What')\n    print('I dont')\n    print('know')\n    print('really?')\n    a = a + 1\n```\n\n那么，如果我想打印n次这5行字后，打印其他的若干行，再回来打印这五行字，可能会变成这样：\n\n``` python \na = 0\nwhile a<10:\n    print('Hello')\n    print('What')\n    print('I dont')\n    print('know')\n    print('really?')\n    a = a + 1\n\nb = 0\nwhile b<10:\n    print('something else')\n    print('yep')\n\nc = 0\nwhile c<10:\n    print('Hello')\n    print('What')\n    print('I dont')\n    print('know')\n    print('really?')\n    c = c + 1\n```\n\n有没有发现，其实三个循环的第一和第三个循环除了用于判断的变量名字不一样之外，是不是完全一样呢？\n\n那么可以把这两个完全一样，或者称之为重复的代码片段，提取出来，提取出来后就被称之为函数了。\n\n用函数的思路把上面的例子改进一下，会变成：\n\n``` python\ndef print_my_words():\n    a = 0\n    while a<10:\n        print('Hello')\n        print('What')\n        print('I dont')\n        print('know')\n        print('really?')\n        a = a + 1\n\nprint_my_words()\n\nb = 0\nwhile b<10:\n    print('something else')\n    print('yep')\n\nprint_my_words()\n```\n\n会发现变得简洁了很多。\n\n>其实`print`就是一个函数，在前面`print('hello world')`的时候，就已经接触到什么是函数了。\n>\n>对于这个函数来说，`print`是他的函数名，小括号里的`'hello world'`是他的函数参数，至于什么是参数，下面讲解\n\n在python里，函数的使用方法是：`函数名(参数)`，和变量名的区别就是有无小括号和括号里的参数。\n\n例如，`a()`是调用函数`a`\n\n而，`a`是声明一个变量`a`\n\n## 编写函数的思路\n\n编写函数最简单的思路就是，提取重复。\n\n或者就像数学里头称的函数一样的思路，给定变量，返回结果。\n\n小学都学过加法：`1+1=2`，而其实在数学里，这个算式可以被抽象为`f(1,1)=2`。\n\n`f(1,1)`其实与python里的函数没有本质的区别。\n\n可以看做是函数名为`f`的函数，他的`参数列表`有两个`参数`，分别是`1`和`1`。\n\n而函数的内容，也就是函数体，就是在做两个参数相加的过程，也就可以得到一个相加函数：\n\n``` python\ndef add(x,y):\n    return x + y\n```\n\n## 函数形式和关键词的作用\n\npython中一个函数的形式如下：\n\n``` python\ndef functionname( parameters ):\n    \"function_docstring\"\n    function_body\n    return [expression]\n```\n\n\n`def`关键字是define的缩写，即 “定义”。\n\n`functionname`就是函数的名字，一般是要求符合命名规则，命名规则在变量和数据类型有提及，刚入门不要求记忆，随便命名既可，但要`具意命名`，例如打印函数就叫`print`\n\n> 具意命名就是名字和具体代表的东西要一致，用来表示名字的变量就叫`name`，用做加法的函数就叫`add()`\n\n其中`\"function_docstring\"`是对函数的说明，运行的时候会跳过。\n\n`function_body`就是函数体，也是一块可以被重复使用的代码块。\n\n`return` 表示将某个值返回的意思，例如写一个加法函数，要把最后结果保存下来，就会把结果值返回。\n\n下面是一个加法函数的例子：\n\n``` python\ndef add_two_number(first, second):\n    result = first + second\n    return result\n```\n\n\n上面例子里，有两个参数，`first`和`second`，参数其实就是外来的变量，也是在函数中可变的部分。\n\n这个函数的目的是做加法，加法的结果由两个数影响，这两个数是可变的，但是加法的过程是确定的。\n\n所以，这两个数就是函数的参数了。\n\n`return result`这一句的意思是把`result`变量返回，函数体运行结束后，需要把结果返回给调用者，也就是`return`的作用。\n\n>注意，如果不需要返回值，那么可以不用`return`语句\n>\n>假如你只有一个很简单的函数，用来打印一些信息，就不需要有返回值\n\n函数被定义，就是需要被使用的，使用的过程被叫做`函数的调用`\n\n那么，怎么调用一个函数呢？\n\n在“Hello World”的例子里：\n\n``` python\nprint('Hello World')\n```\n\n其实就是调用了一个函数`print`，`'Hello World'`是他的参数。\n\n上面例子里的加法函数的调用例子如下：\n\n``` python\ndef add_two_number(first, second):\n    result = first + second\n    return result\n\na_number = add_two_number(1,2)\n\nprint(a_number)\n```\n\n`add_two_number(1,2)`就是调用了这个函数，参数分别是`1`和`2`，按顺序对应。\n\n可以分解的看成，`a_number = add_two_number(1,2)`这个语句的执行步骤被分成了四部分：\n\n1. a_number = add_two_number(1,2)\n2. 执行跳到add_two_number的代码块来，执行对参数的赋值，也就是`first = 1`和`second = 2`\n3. 执行函数体\n4. 返回结果\n\n函数的`返回值`，可以看做执行后，把赋值语句替换掉，也就是`a_number = add_two_number(1,1)`替换成`a_number = 3`\n\n然后`print(a_number)`的结果就是打印了`3`\n\n# 总结一下\n\n函数其实就是一段可以被重复使用的代码，其中的可变部分，或者说依赖于这段代码以外的变量，就是`参数`了。\n\n函数的定义方式就是：\n\n``` python\ndef functionname( parameters ):\n    \"function_docstring\"\n    function_body\n    return [expression]\n```\n","slug":"Pyhton-Funtion","published":0,"updated":"2021-02-13T16:22:11.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaoy000gcswg6wa1b95h","content":"<h2 id=\"为什么讲函数\"><a href=\"#为什么讲函数\" class=\"headerlink\" title=\"为什么讲函数\"></a>为什么讲函数</h2><p>函数其实想放到后面讲的，但是因为<code>for</code>循环会讲到<code>range()</code>这个函数，所以先基础的讲一下函数是什么。</p>\n<h2 id=\"什么是函数？\"><a href=\"#什么是函数？\" class=\"headerlink\" title=\"什么是函数？\"></a>什么是函数？</h2><p>函数其实就是一段可以被重复使用的代码，用参数来代替其中的可变部分。</p>\n<p>例如，在一个软件里面，我需要打印5行不同的信息：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello</span><br><span class=\"line\">What</span><br><span class=\"line\">I dont </span><br><span class=\"line\">know</span><br><span class=\"line\">really?</span><br></pre></td></tr></table></figure>\n<p>python实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'What'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'I dont'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'know'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'really?'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果要重复打印这五行字，那么由之前的循环可以知道，当然是为这五行打印加上循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'What'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'I dont'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'know'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'really?'</span>)</span><br><span class=\"line\">    a = a + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>那么，如果我想打印n次这5行字后，打印其他的若干行，再回来打印这五行字，可能会变成这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'What'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'I dont'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'know'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'really?'</span>)</span><br><span class=\"line\">    a = a + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> b&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'something else'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'yep'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> c&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'What'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'I dont'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'know'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'really?'</span>)</span><br><span class=\"line\">    c = c + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>有没有发现，其实三个循环的第一和第三个循环除了用于判断的变量名字不一样之外，是不是完全一样呢？</p>\n<p>那么可以把这两个完全一样，或者称之为重复的代码片段，提取出来，提取出来后就被称之为函数了。</p>\n<p>用函数的思路把上面的例子改进一下，会变成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_my_words</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    a = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> a&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'What'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'I dont'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'know'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'really?'</span>)</span><br><span class=\"line\">        a = a + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print_my_words()</span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> b&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'something else'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'yep'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print_my_words()</span><br></pre></td></tr></table></figure>\n<p>会发现变得简洁了很多。</p>\n<blockquote>\n<p>其实<code>print</code>就是一个函数，在前面<code>print(&#39;hello world&#39;)</code>的时候，就已经接触到什么是函数了。</p>\n<p>对于这个函数来说，<code>print</code>是他的函数名，小括号里的<code>&#39;hello world&#39;</code>是他的函数参数，至于什么是参数，下面讲解</p>\n</blockquote>\n<p>在python里，函数的使用方法是：<code>函数名(参数)</code>，和变量名的区别就是有无小括号和括号里的参数。</p>\n<p>例如，<code>a()</code>是调用函数<code>a</code></p>\n<p>而，<code>a</code>是声明一个变量<code>a</code></p>\n<h2 id=\"编写函数的思路\"><a href=\"#编写函数的思路\" class=\"headerlink\" title=\"编写函数的思路\"></a>编写函数的思路</h2><p>编写函数最简单的思路就是，提取重复。</p>\n<p>或者就像数学里头称的函数一样的思路，给定变量，返回结果。</p>\n<p>小学都学过加法：<code>1+1=2</code>，而其实在数学里，这个算式可以被抽象为<code>f(1,1)=2</code>。</p>\n<p><code>f(1,1)</code>其实与python里的函数没有本质的区别。</p>\n<p>可以看做是函数名为<code>f</code>的函数，他的<code>参数列表</code>有两个<code>参数</code>，分别是<code>1</code>和<code>1</code>。</p>\n<p>而函数的内容，也就是函数体，就是在做两个参数相加的过程，也就可以得到一个相加函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数形式和关键词的作用\"><a href=\"#函数形式和关键词的作用\" class=\"headerlink\" title=\"函数形式和关键词的作用\"></a>函数形式和关键词的作用</h2><p>python中一个函数的形式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span><span class=\"params\">( parameters )</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"function_docstring\"</span></span><br><span class=\"line\">    function_body</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [expression]</span><br></pre></td></tr></table></figure>\n<p><code>def</code>关键字是define的缩写，即 “定义”。</p>\n<p><code>functionname</code>就是函数的名字，一般是要求符合命名规则，命名规则在变量和数据类型有提及，刚入门不要求记忆，随便命名既可，但要<code>具意命名</code>，例如打印函数就叫<code>print</code></p>\n<blockquote>\n<p>具意命名就是名字和具体代表的东西要一致，用来表示名字的变量就叫<code>name</code>，用做加法的函数就叫<code>add()</code></p>\n</blockquote>\n<p>其中<code>&quot;function_docstring&quot;</code>是对函数的说明，运行的时候会跳过。</p>\n<p><code>function_body</code>就是函数体，也是一块可以被重复使用的代码块。</p>\n<p><code>return</code> 表示将某个值返回的意思，例如写一个加法函数，要把最后结果保存下来，就会把结果值返回。</p>\n<p>下面是一个加法函数的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_two_number</span><span class=\"params\">(first, second)</span>:</span></span><br><span class=\"line\">    result = first + second</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>上面例子里，有两个参数，<code>first</code>和<code>second</code>，参数其实就是外来的变量，也是在函数中可变的部分。</p>\n<p>这个函数的目的是做加法，加法的结果由两个数影响，这两个数是可变的，但是加法的过程是确定的。</p>\n<p>所以，这两个数就是函数的参数了。</p>\n<p><code>return result</code>这一句的意思是把<code>result</code>变量返回，函数体运行结束后，需要把结果返回给调用者，也就是<code>return</code>的作用。</p>\n<blockquote>\n<p>注意，如果不需要返回值，那么可以不用<code>return</code>语句</p>\n<p>假如你只有一个很简单的函数，用来打印一些信息，就不需要有返回值</p>\n</blockquote>\n<p>函数被定义，就是需要被使用的，使用的过程被叫做<code>函数的调用</code></p>\n<p>那么，怎么调用一个函数呢？</p>\n<p>在“Hello World”的例子里：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Hello World'</span>)</span><br></pre></td></tr></table></figure>\n<p>其实就是调用了一个函数<code>print</code>，<code>&#39;Hello World&#39;</code>是他的参数。</p>\n<p>上面例子里的加法函数的调用例子如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_two_number</span><span class=\"params\">(first, second)</span>:</span></span><br><span class=\"line\">    result = first + second</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">a_number = add_two_number(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(a_number)</span><br></pre></td></tr></table></figure>\n<p><code>add_two_number(1,2)</code>就是调用了这个函数，参数分别是<code>1</code>和<code>2</code>，按顺序对应。</p>\n<p>可以分解的看成，<code>a_number = add_two_number(1,2)</code>这个语句的执行步骤被分成了四部分：</p>\n<ol>\n<li>a_number = add_two_number(1,2)</li>\n<li>执行跳到add_two_number的代码块来，执行对参数的赋值，也就是<code>first = 1</code>和<code>second = 2</code></li>\n<li>执行函数体</li>\n<li>返回结果</li>\n</ol>\n<p>函数的<code>返回值</code>，可以看做执行后，把赋值语句替换掉，也就是<code>a_number = add_two_number(1,1)</code>替换成<code>a_number = 3</code></p>\n<p>然后<code>print(a_number)</code>的结果就是打印了<code>3</code></p>\n<h1 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h1><p>函数其实就是一段可以被重复使用的代码，其中的可变部分，或者说依赖于这段代码以外的变量，就是<code>参数</code>了。</p>\n<p>函数的定义方式就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span><span class=\"params\">( parameters )</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"function_docstring\"</span></span><br><span class=\"line\">    function_body</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [expression]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么讲函数\"><a href=\"#为什么讲函数\" class=\"headerlink\" title=\"为什么讲函数\"></a>为什么讲函数</h2><p>函数其实想放到后面讲的，但是因为<code>for</code>循环会讲到<code>range()</code>这个函数，所以先基础的讲一下函数是什么。</p>\n<h2 id=\"什么是函数？\"><a href=\"#什么是函数？\" class=\"headerlink\" title=\"什么是函数？\"></a>什么是函数？</h2><p>函数其实就是一段可以被重复使用的代码，用参数来代替其中的可变部分。</p>\n<p>例如，在一个软件里面，我需要打印5行不同的信息：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hello</span><br><span class=\"line\">What</span><br><span class=\"line\">I dont </span><br><span class=\"line\">know</span><br><span class=\"line\">really?</span><br></pre></td></tr></table></figure>\n<p>python实现：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'What'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'I dont'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'know'</span>)</span><br><span class=\"line\">print(<span class=\"string\">'really?'</span>)</span><br></pre></td></tr></table></figure>\n<p>如果要重复打印这五行字，那么由之前的循环可以知道，当然是为这五行打印加上循环。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'What'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'I dont'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'know'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'really?'</span>)</span><br><span class=\"line\">    a = a + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>那么，如果我想打印n次这5行字后，打印其他的若干行，再回来打印这五行字，可能会变成这样：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> a&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'What'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'I dont'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'know'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'really?'</span>)</span><br><span class=\"line\">    a = a + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> b&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'something else'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'yep'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">c = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> c&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'What'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'I dont'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'know'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'really?'</span>)</span><br><span class=\"line\">    c = c + <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<p>有没有发现，其实三个循环的第一和第三个循环除了用于判断的变量名字不一样之外，是不是完全一样呢？</p>\n<p>那么可以把这两个完全一样，或者称之为重复的代码片段，提取出来，提取出来后就被称之为函数了。</p>\n<p>用函数的思路把上面的例子改进一下，会变成：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">print_my_words</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    a = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> a&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'Hello'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'What'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'I dont'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'know'</span>)</span><br><span class=\"line\">        print(<span class=\"string\">'really?'</span>)</span><br><span class=\"line\">        a = a + <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">print_my_words()</span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> b&lt;<span class=\"number\">10</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'something else'</span>)</span><br><span class=\"line\">    print(<span class=\"string\">'yep'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print_my_words()</span><br></pre></td></tr></table></figure>\n<p>会发现变得简洁了很多。</p>\n<blockquote>\n<p>其实<code>print</code>就是一个函数，在前面<code>print(&#39;hello world&#39;)</code>的时候，就已经接触到什么是函数了。</p>\n<p>对于这个函数来说，<code>print</code>是他的函数名，小括号里的<code>&#39;hello world&#39;</code>是他的函数参数，至于什么是参数，下面讲解</p>\n</blockquote>\n<p>在python里，函数的使用方法是：<code>函数名(参数)</code>，和变量名的区别就是有无小括号和括号里的参数。</p>\n<p>例如，<code>a()</code>是调用函数<code>a</code></p>\n<p>而，<code>a</code>是声明一个变量<code>a</code></p>\n<h2 id=\"编写函数的思路\"><a href=\"#编写函数的思路\" class=\"headerlink\" title=\"编写函数的思路\"></a>编写函数的思路</h2><p>编写函数最简单的思路就是，提取重复。</p>\n<p>或者就像数学里头称的函数一样的思路，给定变量，返回结果。</p>\n<p>小学都学过加法：<code>1+1=2</code>，而其实在数学里，这个算式可以被抽象为<code>f(1,1)=2</code>。</p>\n<p><code>f(1,1)</code>其实与python里的函数没有本质的区别。</p>\n<p>可以看做是函数名为<code>f</code>的函数，他的<code>参数列表</code>有两个<code>参数</code>，分别是<code>1</code>和<code>1</code>。</p>\n<p>而函数的内容，也就是函数体，就是在做两个参数相加的过程，也就可以得到一个相加函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x,y)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br></pre></td></tr></table></figure>\n<h2 id=\"函数形式和关键词的作用\"><a href=\"#函数形式和关键词的作用\" class=\"headerlink\" title=\"函数形式和关键词的作用\"></a>函数形式和关键词的作用</h2><p>python中一个函数的形式如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span><span class=\"params\">( parameters )</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"function_docstring\"</span></span><br><span class=\"line\">    function_body</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [expression]</span><br></pre></td></tr></table></figure>\n<p><code>def</code>关键字是define的缩写，即 “定义”。</p>\n<p><code>functionname</code>就是函数的名字，一般是要求符合命名规则，命名规则在变量和数据类型有提及，刚入门不要求记忆，随便命名既可，但要<code>具意命名</code>，例如打印函数就叫<code>print</code></p>\n<blockquote>\n<p>具意命名就是名字和具体代表的东西要一致，用来表示名字的变量就叫<code>name</code>，用做加法的函数就叫<code>add()</code></p>\n</blockquote>\n<p>其中<code>&quot;function_docstring&quot;</code>是对函数的说明，运行的时候会跳过。</p>\n<p><code>function_body</code>就是函数体，也是一块可以被重复使用的代码块。</p>\n<p><code>return</code> 表示将某个值返回的意思，例如写一个加法函数，要把最后结果保存下来，就会把结果值返回。</p>\n<p>下面是一个加法函数的例子：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_two_number</span><span class=\"params\">(first, second)</span>:</span></span><br><span class=\"line\">    result = first + second</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br></pre></td></tr></table></figure>\n<p>上面例子里，有两个参数，<code>first</code>和<code>second</code>，参数其实就是外来的变量，也是在函数中可变的部分。</p>\n<p>这个函数的目的是做加法，加法的结果由两个数影响，这两个数是可变的，但是加法的过程是确定的。</p>\n<p>所以，这两个数就是函数的参数了。</p>\n<p><code>return result</code>这一句的意思是把<code>result</code>变量返回，函数体运行结束后，需要把结果返回给调用者，也就是<code>return</code>的作用。</p>\n<blockquote>\n<p>注意，如果不需要返回值，那么可以不用<code>return</code>语句</p>\n<p>假如你只有一个很简单的函数，用来打印一些信息，就不需要有返回值</p>\n</blockquote>\n<p>函数被定义，就是需要被使用的，使用的过程被叫做<code>函数的调用</code></p>\n<p>那么，怎么调用一个函数呢？</p>\n<p>在“Hello World”的例子里：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'Hello World'</span>)</span><br></pre></td></tr></table></figure>\n<p>其实就是调用了一个函数<code>print</code>，<code>&#39;Hello World&#39;</code>是他的参数。</p>\n<p>上面例子里的加法函数的调用例子如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_two_number</span><span class=\"params\">(first, second)</span>:</span></span><br><span class=\"line\">    result = first + second</span><br><span class=\"line\">    <span class=\"keyword\">return</span> result</span><br><span class=\"line\"></span><br><span class=\"line\">a_number = add_two_number(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">print(a_number)</span><br></pre></td></tr></table></figure>\n<p><code>add_two_number(1,2)</code>就是调用了这个函数，参数分别是<code>1</code>和<code>2</code>，按顺序对应。</p>\n<p>可以分解的看成，<code>a_number = add_two_number(1,2)</code>这个语句的执行步骤被分成了四部分：</p>\n<ol>\n<li>a_number = add_two_number(1,2)</li>\n<li>执行跳到add_two_number的代码块来，执行对参数的赋值，也就是<code>first = 1</code>和<code>second = 2</code></li>\n<li>执行函数体</li>\n<li>返回结果</li>\n</ol>\n<p>函数的<code>返回值</code>，可以看做执行后，把赋值语句替换掉，也就是<code>a_number = add_two_number(1,1)</code>替换成<code>a_number = 3</code></p>\n<p>然后<code>print(a_number)</code>的结果就是打印了<code>3</code></p>\n<h1 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a>总结一下</h1><p>函数其实就是一段可以被重复使用的代码，其中的可变部分，或者说依赖于这段代码以外的变量，就是<code>参数</code>了。</p>\n<p>函数的定义方式就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">functionname</span><span class=\"params\">( parameters )</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"function_docstring\"</span></span><br><span class=\"line\">    function_body</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [expression]</span><br></pre></td></tr></table></figure>\n"},{"title":"Python-列表","date":"2019-08-05T19:15:11.000Z","_content":"## 讲啥？\n\n之前在，`for`里头，已经对`列表`进行了初步的讲解，但是`列表`还有一些其他的特性需要解释一下。\n\n顺带简单介绍一下`元组（tuple）`、`集合（set）`和`字典（dict）`，后两者的其他特性后面再讲。\n\n","source":"_drafts/2019-08-06-Python-List.md","raw":"---\ntitle: Python-列表\ncategories:\n  - Python\ntags:\n  - Python\n  - Note\ndate: 2019-08-06 03:15:11\n---\n## 讲啥？\n\n之前在，`for`里头，已经对`列表`进行了初步的讲解，但是`列表`还有一些其他的特性需要解释一下。\n\n顺带简单介绍一下`元组（tuple）`、`集合（set）`和`字典（dict）`，后两者的其他特性后面再讲。\n\n","slug":"Python-List","published":0,"updated":"2021-02-13T16:22:11.422Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaoz000hcswgtckty4fk","content":"<h2 id=\"讲啥？\"><a href=\"#讲啥？\" class=\"headerlink\" title=\"讲啥？\"></a>讲啥？</h2><p>之前在，<code>for</code>里头，已经对<code>列表</code>进行了初步的讲解，但是<code>列表</code>还有一些其他的特性需要解释一下。</p>\n<p>顺带简单介绍一下<code>元组（tuple）</code>、<code>集合（set）</code>和<code>字典（dict）</code>，后两者的其他特性后面再讲。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"讲啥？\"><a href=\"#讲啥？\" class=\"headerlink\" title=\"讲啥？\"></a>讲啥？</h2><p>之前在，<code>for</code>里头，已经对<code>列表</code>进行了初步的讲解，但是<code>列表</code>还有一些其他的特性需要解释一下。</p>\n<p>顺带简单介绍一下<code>元组（tuple）</code>、<code>集合（set）</code>和<code>字典（dict）</code>，后两者的其他特性后面再讲。</p>\n"},{"title":"Python-循环和if更进一步","date":"2019-08-05T17:47:52.000Z","_content":"## 讲的What？\n\n本章主题是，`while`和`for`循环，还有`if`的嵌套。\n\n## 为什么讲嵌套？\n\n先从`if`的嵌套开始。\n\n前面学过了，`if`的形式就是那几种，最简单的就是：\n\n``` python\nif bool_expression:\n    statements()\n```\n\n那么，举个例子！\n\n让我们把例子的复杂度稍稍提高一下，并且贴近一下生活。\n\n现在，你要去美团买演唱会的票，但是你们是四人行，四个好兄弟，只能一起行动，缺谁都8行。\n\n并且，打印你的买票心理活动。\n\n那么，能够买到票的前提是：\n\n1. 起码有4张票可以买\n2. 口袋里的钱够用\n\n思考一下，是你的话需要怎么编写这个程序？\n\n如果没想好第一步，那么就从变量声明开始吧！\n\n如果还是不知道怎么开始。\n\n那么下面给你开始的代码：\n\n``` python\navailable_ticket = 3\nticket_price = 100\npocket_money = 500\n...你的if语句...\n...若干个print()...\n```\n\n可以自己思考一下，写得出来可以发出来瞧瞧。\n\n<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n\n当然，以下是参考答案。\n\n<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n\n### 参考答案\n\n``` python\navailable_ticket = 3    #可用的票数\nticket_price = 100      #票价\npocket_money = 500      #口袋里的小钱钱\nif available_ticket >= 4:\n    print('票够')\n    if ticket_price * 4 <= pocket_money:\n        print('可以了，冲锋！')\n    else:\n        print('啊哦，钱不够了')\nelse:\n    print('没票了')\n```\n\n你可以修改上面的三个变量来打印不同的结果。\n\n### if的嵌套\n\n上面的参考答案里头，你可以看到，第一个`if`，也就是判断票是否够的那一片代码块里，又嵌套了另一个`if`，用于判断口袋里的钱是否够买4张票。\n\n为什么要`嵌套`呢？\n\n因为按照正常思路，如果票不够，那我也就不用考虑口袋里的钱是否够用的问题。\n\n所以整个的思路是这样的：\n\n1. 票够不够？\n2. 票够，那口袋里的钱够不够呢？\n   1. 如果够，就打印`可以了，冲锋！`\n   2. 如果不够，就打印`啊哦，钱不够了`\n3. 不够就打印`没票了`，并且结束程序.\n\n这是一个渐进式的思路，在第一个判断成立的条件下，再进行判断第二个条件是否成立，因为第二个条件跟第一个条件不成立时无关（不考虑）。\n\n这就是`嵌套`。\n\n可以把例子里的：\n\n``` python\n    print('票够')\n    if ticket_price * 4 <= pocket_money:\n        print('可以了，冲锋！')\n    else:\n        print('啊哦，钱不够了')\n```\n\n看做是一个独立的`代码块`，他们拥有相同的`缩进量`。\n\n> 上面的两个可能因为渲染问题，显示出来是顶格的，我想展示出的是带有一个tab缩进的代码块。就像下面的例子里去掉第一行。\n\n下面的：\n\n``` python\n    print('没票了')\n```\n\n也是一样的道理。\n\n其实，可以看做是在另一个代码块里再写一个普通的`if`。\n\n然后，从上面的一个`if`来说，就是一个嵌套的`if`：\n\n``` python\nif available_ticket >= 4:\n    print('票够')\n    if ticket_price * 4 <= pocket_money:\n        print('可以了，冲锋！')\n    else:\n        print('啊哦，钱不够了')\n```\n\n当然，不是只能在`if`里写嵌套，`else`也可以。\n\n对参考答案进行等效的转换：\n\n``` python\nif available_ticket < 4:\n    print('没票了')\nelse:\n    print('票够')\n    if ticket_price * 4 <= pocket_money:\n        print('可以了，冲锋！')\n    else:\n        print('啊哦，钱不够了')\n```\n\n其实也就是把条件反过来，然后对调一下`嵌套`的位置而已。\n\n其实大多数教程不怎么讲`if`的`嵌套`，因为是个很正常的思路过程，这里之所以提，是因为`if`的`嵌套`和`循环`的`嵌套`类似。\n\n### 循环的嵌套\n\n循环分两种：`for`和`while`，单纯的循环多少次或者在某个条件成立下循环是很直接的。\n\n例如，循环打印5个“hello”，每个“hello”中间以空格间隔。\n\n先自己思考一下。\n\n> 提示：`print()`函数默认是每调用一次，自动换行一次。\n> \n> 用`print('hello', end=\" \")`可以实现打印一次不换号，以`\" \"`空格结尾。\n\n<br/><br/><br/><br/><br/>\n<br/><br/><br/><br/><br/>\n<br/><br/><br/><br/><br/>\n\n#### 参考答案\n\n``` python\nfor i in range(5):\n    print('hello', end=\" \")\n```\n\n打印出来的结果会是：\n\n``` python\nhello hello hello hello hello\n```\n\n那么，如果我想打印成一个方阵呢？\n\n也就是这样的结果：\n\n``` python\nhello hello hello hello hello\nhello hello hello hello hello\nhello hello hello hello hello\nhello hello hello hello hello\nhello hello hello hello hello\n```\n\n是不是想到了上面讲的`if`的`嵌套`？\n\n那么应该怎么嵌套呢？\n\n可以自己思考思考。\n\n下面又有答案。\n\n> 提示：可以用单纯的`print()`换行\n\n<br/><br/><br/><br/><br/>\n<br/><br/><br/><br/><br/>\n<br/><br/><br/><br/><br/>\n\n#### 参考答案\n\n``` python\nfor i in range(5):\n    for i in range(5):\n        print('hello', end=\" \")\n    print()\n```\n\n上面就是`for`的`嵌套`，`while`的`嵌套`也是同理。\n\n其实就是在循环体里，再写循环。\n\n可以这样理解，上一节讲的`for`，把一次循环执行称为`迭代`，把它看做普通的若干行代码，只是在若干行代码里，碰上了又一个循环。\n\n或者按照箭头的说法。\n\n1. 第一个`for`箭头指向了第一个`range(5)`的第一个数字`0`。\n2. 碰到第二个`for`，就出来另一个箭头，指向第二个`range(5)`的第一个数字`0`，这才执行到内层`for`的循环体，打印一下`hello`。\n3. 第二个`for`的第二次迭代，执行了第二个`range(5)`的第二个数字`1`，打印一下`hello`，直到第二个`for`的5次执行完成。\n4. 然后碰到`print()`，换行。\n5. 第一个`for`的箭头再前进，执行下一次`迭代`，第一个`for`的`range(5)`来到了`1`，再回到`步骤2`。","source":"_drafts/2019-08-06-Python-Loop.md","raw":"---\ntitle: Python-循环和if更进一步\ncategories:\n  - Python\ntags:\n  - Python\n  - Note\ndate: 2019-08-06 01:47:52\n---\n## 讲的What？\n\n本章主题是，`while`和`for`循环，还有`if`的嵌套。\n\n## 为什么讲嵌套？\n\n先从`if`的嵌套开始。\n\n前面学过了，`if`的形式就是那几种，最简单的就是：\n\n``` python\nif bool_expression:\n    statements()\n```\n\n那么，举个例子！\n\n让我们把例子的复杂度稍稍提高一下，并且贴近一下生活。\n\n现在，你要去美团买演唱会的票，但是你们是四人行，四个好兄弟，只能一起行动，缺谁都8行。\n\n并且，打印你的买票心理活动。\n\n那么，能够买到票的前提是：\n\n1. 起码有4张票可以买\n2. 口袋里的钱够用\n\n思考一下，是你的话需要怎么编写这个程序？\n\n如果没想好第一步，那么就从变量声明开始吧！\n\n如果还是不知道怎么开始。\n\n那么下面给你开始的代码：\n\n``` python\navailable_ticket = 3\nticket_price = 100\npocket_money = 500\n...你的if语句...\n...若干个print()...\n```\n\n可以自己思考一下，写得出来可以发出来瞧瞧。\n\n<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n\n当然，以下是参考答案。\n\n<br/><br/><br/><br/><br/><br/><br/><br/><br/><br/>\n\n### 参考答案\n\n``` python\navailable_ticket = 3    #可用的票数\nticket_price = 100      #票价\npocket_money = 500      #口袋里的小钱钱\nif available_ticket >= 4:\n    print('票够')\n    if ticket_price * 4 <= pocket_money:\n        print('可以了，冲锋！')\n    else:\n        print('啊哦，钱不够了')\nelse:\n    print('没票了')\n```\n\n你可以修改上面的三个变量来打印不同的结果。\n\n### if的嵌套\n\n上面的参考答案里头，你可以看到，第一个`if`，也就是判断票是否够的那一片代码块里，又嵌套了另一个`if`，用于判断口袋里的钱是否够买4张票。\n\n为什么要`嵌套`呢？\n\n因为按照正常思路，如果票不够，那我也就不用考虑口袋里的钱是否够用的问题。\n\n所以整个的思路是这样的：\n\n1. 票够不够？\n2. 票够，那口袋里的钱够不够呢？\n   1. 如果够，就打印`可以了，冲锋！`\n   2. 如果不够，就打印`啊哦，钱不够了`\n3. 不够就打印`没票了`，并且结束程序.\n\n这是一个渐进式的思路，在第一个判断成立的条件下，再进行判断第二个条件是否成立，因为第二个条件跟第一个条件不成立时无关（不考虑）。\n\n这就是`嵌套`。\n\n可以把例子里的：\n\n``` python\n    print('票够')\n    if ticket_price * 4 <= pocket_money:\n        print('可以了，冲锋！')\n    else:\n        print('啊哦，钱不够了')\n```\n\n看做是一个独立的`代码块`，他们拥有相同的`缩进量`。\n\n> 上面的两个可能因为渲染问题，显示出来是顶格的，我想展示出的是带有一个tab缩进的代码块。就像下面的例子里去掉第一行。\n\n下面的：\n\n``` python\n    print('没票了')\n```\n\n也是一样的道理。\n\n其实，可以看做是在另一个代码块里再写一个普通的`if`。\n\n然后，从上面的一个`if`来说，就是一个嵌套的`if`：\n\n``` python\nif available_ticket >= 4:\n    print('票够')\n    if ticket_price * 4 <= pocket_money:\n        print('可以了，冲锋！')\n    else:\n        print('啊哦，钱不够了')\n```\n\n当然，不是只能在`if`里写嵌套，`else`也可以。\n\n对参考答案进行等效的转换：\n\n``` python\nif available_ticket < 4:\n    print('没票了')\nelse:\n    print('票够')\n    if ticket_price * 4 <= pocket_money:\n        print('可以了，冲锋！')\n    else:\n        print('啊哦，钱不够了')\n```\n\n其实也就是把条件反过来，然后对调一下`嵌套`的位置而已。\n\n其实大多数教程不怎么讲`if`的`嵌套`，因为是个很正常的思路过程，这里之所以提，是因为`if`的`嵌套`和`循环`的`嵌套`类似。\n\n### 循环的嵌套\n\n循环分两种：`for`和`while`，单纯的循环多少次或者在某个条件成立下循环是很直接的。\n\n例如，循环打印5个“hello”，每个“hello”中间以空格间隔。\n\n先自己思考一下。\n\n> 提示：`print()`函数默认是每调用一次，自动换行一次。\n> \n> 用`print('hello', end=\" \")`可以实现打印一次不换号，以`\" \"`空格结尾。\n\n<br/><br/><br/><br/><br/>\n<br/><br/><br/><br/><br/>\n<br/><br/><br/><br/><br/>\n\n#### 参考答案\n\n``` python\nfor i in range(5):\n    print('hello', end=\" \")\n```\n\n打印出来的结果会是：\n\n``` python\nhello hello hello hello hello\n```\n\n那么，如果我想打印成一个方阵呢？\n\n也就是这样的结果：\n\n``` python\nhello hello hello hello hello\nhello hello hello hello hello\nhello hello hello hello hello\nhello hello hello hello hello\nhello hello hello hello hello\n```\n\n是不是想到了上面讲的`if`的`嵌套`？\n\n那么应该怎么嵌套呢？\n\n可以自己思考思考。\n\n下面又有答案。\n\n> 提示：可以用单纯的`print()`换行\n\n<br/><br/><br/><br/><br/>\n<br/><br/><br/><br/><br/>\n<br/><br/><br/><br/><br/>\n\n#### 参考答案\n\n``` python\nfor i in range(5):\n    for i in range(5):\n        print('hello', end=\" \")\n    print()\n```\n\n上面就是`for`的`嵌套`，`while`的`嵌套`也是同理。\n\n其实就是在循环体里，再写循环。\n\n可以这样理解，上一节讲的`for`，把一次循环执行称为`迭代`，把它看做普通的若干行代码，只是在若干行代码里，碰上了又一个循环。\n\n或者按照箭头的说法。\n\n1. 第一个`for`箭头指向了第一个`range(5)`的第一个数字`0`。\n2. 碰到第二个`for`，就出来另一个箭头，指向第二个`range(5)`的第一个数字`0`，这才执行到内层`for`的循环体，打印一下`hello`。\n3. 第二个`for`的第二次迭代，执行了第二个`range(5)`的第二个数字`1`，打印一下`hello`，直到第二个`for`的5次执行完成。\n4. 然后碰到`print()`，换行。\n5. 第一个`for`的箭头再前进，执行下一次`迭代`，第一个`for`的`range(5)`来到了`1`，再回到`步骤2`。","slug":"Python-Loop","published":0,"updated":"2021-02-13T16:22:11.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjap1000lcswg76re0y8g","content":"<h2 id=\"讲的What？\"><a href=\"#讲的What？\" class=\"headerlink\" title=\"讲的What？\"></a>讲的What？</h2><p>本章主题是，<code>while</code>和<code>for</code>循环，还有<code>if</code>的嵌套。</p>\n<h2 id=\"为什么讲嵌套？\"><a href=\"#为什么讲嵌套？\" class=\"headerlink\" title=\"为什么讲嵌套？\"></a>为什么讲嵌套？</h2><p>先从<code>if</code>的嵌套开始。</p>\n<p>前面学过了，<code>if</code>的形式就是那几种，最简单的就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> bool_expression:</span><br><span class=\"line\">    statements()</span><br></pre></td></tr></table></figure>\n<p>那么，举个例子！</p>\n<p>让我们把例子的复杂度稍稍提高一下，并且贴近一下生活。</p>\n<p>现在，你要去美团买演唱会的票，但是你们是四人行，四个好兄弟，只能一起行动，缺谁都8行。</p>\n<p>并且，打印你的买票心理活动。</p>\n<p>那么，能够买到票的前提是：</p>\n<ol>\n<li>起码有4张票可以买</li>\n<li>口袋里的钱够用</li>\n</ol>\n<p>思考一下，是你的话需要怎么编写这个程序？</p>\n<p>如果没想好第一步，那么就从变量声明开始吧！</p>\n<p>如果还是不知道怎么开始。</p>\n<p>那么下面给你开始的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">available_ticket = <span class=\"number\">3</span></span><br><span class=\"line\">ticket_price = <span class=\"number\">100</span></span><br><span class=\"line\">pocket_money = <span class=\"number\">500</span></span><br><span class=\"line\">...你的<span class=\"keyword\">if</span>语句...</span><br><span class=\"line\">...若干个print()...</span><br></pre></td></tr></table></figure>\n<p>可以自己思考一下，写得出来可以发出来瞧瞧。</p>\n<p><br><br><br><br><br><br><br><br><br><br></p>\n<p>当然，以下是参考答案。</p>\n<p><br><br><br><br><br><br><br><br><br><br></p>\n<h3 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">available_ticket = <span class=\"number\">3</span>    <span class=\"comment\">#可用的票数</span></span><br><span class=\"line\">ticket_price = <span class=\"number\">100</span>      <span class=\"comment\">#票价</span></span><br><span class=\"line\">pocket_money = <span class=\"number\">500</span>      <span class=\"comment\">#口袋里的小钱钱</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> available_ticket &gt;= <span class=\"number\">4</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'票够'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ticket_price * <span class=\"number\">4</span> &lt;= pocket_money:</span><br><span class=\"line\">        print(<span class=\"string\">'可以了，冲锋！'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'啊哦，钱不够了'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'没票了'</span>)</span><br></pre></td></tr></table></figure>\n<p>你可以修改上面的三个变量来打印不同的结果。</p>\n<h3 id=\"if的嵌套\"><a href=\"#if的嵌套\" class=\"headerlink\" title=\"if的嵌套\"></a>if的嵌套</h3><p>上面的参考答案里头，你可以看到，第一个<code>if</code>，也就是判断票是否够的那一片代码块里，又嵌套了另一个<code>if</code>，用于判断口袋里的钱是否够买4张票。</p>\n<p>为什么要<code>嵌套</code>呢？</p>\n<p>因为按照正常思路，如果票不够，那我也就不用考虑口袋里的钱是否够用的问题。</p>\n<p>所以整个的思路是这样的：</p>\n<ol>\n<li>票够不够？</li>\n<li>票够，那口袋里的钱够不够呢？<ol>\n<li>如果够，就打印<code>可以了，冲锋！</code></li>\n<li>如果不够，就打印<code>啊哦，钱不够了</code></li>\n</ol>\n</li>\n<li>不够就打印<code>没票了</code>，并且结束程序.</li>\n</ol>\n<p>这是一个渐进式的思路，在第一个判断成立的条件下，再进行判断第二个条件是否成立，因为第二个条件跟第一个条件不成立时无关（不考虑）。</p>\n<p>这就是<code>嵌套</code>。</p>\n<p>可以把例子里的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'票够'</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> ticket_price * <span class=\"number\">4</span> &lt;= pocket_money:</span><br><span class=\"line\">    print(<span class=\"string\">'可以了，冲锋！'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'啊哦，钱不够了'</span>)</span><br></pre></td></tr></table></figure>\n<p>看做是一个独立的<code>代码块</code>，他们拥有相同的<code>缩进量</code>。</p>\n<blockquote>\n<p>上面的两个可能因为渲染问题，显示出来是顶格的，我想展示出的是带有一个tab缩进的代码块。就像下面的例子里去掉第一行。</p>\n</blockquote>\n<p>下面的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'没票了'</span>)</span><br></pre></td></tr></table></figure>\n<p>也是一样的道理。</p>\n<p>其实，可以看做是在另一个代码块里再写一个普通的<code>if</code>。</p>\n<p>然后，从上面的一个<code>if</code>来说，就是一个嵌套的<code>if</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> available_ticket &gt;= <span class=\"number\">4</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'票够'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ticket_price * <span class=\"number\">4</span> &lt;= pocket_money:</span><br><span class=\"line\">        print(<span class=\"string\">'可以了，冲锋！'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'啊哦，钱不够了'</span>)</span><br></pre></td></tr></table></figure>\n<p>当然，不是只能在<code>if</code>里写嵌套，<code>else</code>也可以。</p>\n<p>对参考答案进行等效的转换：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> available_ticket &lt; <span class=\"number\">4</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'没票了'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'票够'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ticket_price * <span class=\"number\">4</span> &lt;= pocket_money:</span><br><span class=\"line\">        print(<span class=\"string\">'可以了，冲锋！'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'啊哦，钱不够了'</span>)</span><br></pre></td></tr></table></figure>\n<p>其实也就是把条件反过来，然后对调一下<code>嵌套</code>的位置而已。</p>\n<p>其实大多数教程不怎么讲<code>if</code>的<code>嵌套</code>，因为是个很正常的思路过程，这里之所以提，是因为<code>if</code>的<code>嵌套</code>和<code>循环</code>的<code>嵌套</code>类似。</p>\n<h3 id=\"循环的嵌套\"><a href=\"#循环的嵌套\" class=\"headerlink\" title=\"循环的嵌套\"></a>循环的嵌套</h3><p>循环分两种：<code>for</code>和<code>while</code>，单纯的循环多少次或者在某个条件成立下循环是很直接的。</p>\n<p>例如，循环打印5个“hello”，每个“hello”中间以空格间隔。</p>\n<p>先自己思考一下。</p>\n<blockquote>\n<p>提示：<code>print()</code>函数默认是每调用一次，自动换行一次。</p>\n<p>用<code>print(&#39;hello&#39;, end=&quot; &quot;)</code>可以实现打印一次不换号，以<code>&quot; &quot;</code>空格结尾。</p>\n</blockquote>\n<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>\n<h4 id=\"参考答案-1\"><a href=\"#参考答案-1\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(<span class=\"string\">'hello'</span>, end=<span class=\"string\">\" \"</span>)</span><br></pre></td></tr></table></figure>\n<p>打印出来的结果会是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello hello hello hello hello</span><br></pre></td></tr></table></figure>\n<p>那么，如果我想打印成一个方阵呢？</p>\n<p>也就是这样的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello hello hello hello hello</span><br><span class=\"line\">hello hello hello hello hello</span><br><span class=\"line\">hello hello hello hello hello</span><br><span class=\"line\">hello hello hello hello hello</span><br><span class=\"line\">hello hello hello hello hello</span><br></pre></td></tr></table></figure>\n<p>是不是想到了上面讲的<code>if</code>的<code>嵌套</code>？</p>\n<p>那么应该怎么嵌套呢？</p>\n<p>可以自己思考思考。</p>\n<p>下面又有答案。</p>\n<blockquote>\n<p>提示：可以用单纯的<code>print()</code>换行</p>\n</blockquote>\n<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>\n<h4 id=\"参考答案-2\"><a href=\"#参考答案-2\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        print(<span class=\"string\">'hello'</span>, end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure>\n<p>上面就是<code>for</code>的<code>嵌套</code>，<code>while</code>的<code>嵌套</code>也是同理。</p>\n<p>其实就是在循环体里，再写循环。</p>\n<p>可以这样理解，上一节讲的<code>for</code>，把一次循环执行称为<code>迭代</code>，把它看做普通的若干行代码，只是在若干行代码里，碰上了又一个循环。</p>\n<p>或者按照箭头的说法。</p>\n<ol>\n<li>第一个<code>for</code>箭头指向了第一个<code>range(5)</code>的第一个数字<code>0</code>。</li>\n<li>碰到第二个<code>for</code>，就出来另一个箭头，指向第二个<code>range(5)</code>的第一个数字<code>0</code>，这才执行到内层<code>for</code>的循环体，打印一下<code>hello</code>。</li>\n<li>第二个<code>for</code>的第二次迭代，执行了第二个<code>range(5)</code>的第二个数字<code>1</code>，打印一下<code>hello</code>，直到第二个<code>for</code>的5次执行完成。</li>\n<li>然后碰到<code>print()</code>，换行。</li>\n<li>第一个<code>for</code>的箭头再前进，执行下一次<code>迭代</code>，第一个<code>for</code>的<code>range(5)</code>来到了<code>1</code>，再回到<code>步骤2</code>。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"讲的What？\"><a href=\"#讲的What？\" class=\"headerlink\" title=\"讲的What？\"></a>讲的What？</h2><p>本章主题是，<code>while</code>和<code>for</code>循环，还有<code>if</code>的嵌套。</p>\n<h2 id=\"为什么讲嵌套？\"><a href=\"#为什么讲嵌套？\" class=\"headerlink\" title=\"为什么讲嵌套？\"></a>为什么讲嵌套？</h2><p>先从<code>if</code>的嵌套开始。</p>\n<p>前面学过了，<code>if</code>的形式就是那几种，最简单的就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> bool_expression:</span><br><span class=\"line\">    statements()</span><br></pre></td></tr></table></figure>\n<p>那么，举个例子！</p>\n<p>让我们把例子的复杂度稍稍提高一下，并且贴近一下生活。</p>\n<p>现在，你要去美团买演唱会的票，但是你们是四人行，四个好兄弟，只能一起行动，缺谁都8行。</p>\n<p>并且，打印你的买票心理活动。</p>\n<p>那么，能够买到票的前提是：</p>\n<ol>\n<li>起码有4张票可以买</li>\n<li>口袋里的钱够用</li>\n</ol>\n<p>思考一下，是你的话需要怎么编写这个程序？</p>\n<p>如果没想好第一步，那么就从变量声明开始吧！</p>\n<p>如果还是不知道怎么开始。</p>\n<p>那么下面给你开始的代码：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">available_ticket = <span class=\"number\">3</span></span><br><span class=\"line\">ticket_price = <span class=\"number\">100</span></span><br><span class=\"line\">pocket_money = <span class=\"number\">500</span></span><br><span class=\"line\">...你的<span class=\"keyword\">if</span>语句...</span><br><span class=\"line\">...若干个print()...</span><br></pre></td></tr></table></figure>\n<p>可以自己思考一下，写得出来可以发出来瞧瞧。</p>\n<p><br><br><br><br><br><br><br><br><br><br></p>\n<p>当然，以下是参考答案。</p>\n<p><br><br><br><br><br><br><br><br><br><br></p>\n<h3 id=\"参考答案\"><a href=\"#参考答案\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">available_ticket = <span class=\"number\">3</span>    <span class=\"comment\">#可用的票数</span></span><br><span class=\"line\">ticket_price = <span class=\"number\">100</span>      <span class=\"comment\">#票价</span></span><br><span class=\"line\">pocket_money = <span class=\"number\">500</span>      <span class=\"comment\">#口袋里的小钱钱</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> available_ticket &gt;= <span class=\"number\">4</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'票够'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ticket_price * <span class=\"number\">4</span> &lt;= pocket_money:</span><br><span class=\"line\">        print(<span class=\"string\">'可以了，冲锋！'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'啊哦，钱不够了'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'没票了'</span>)</span><br></pre></td></tr></table></figure>\n<p>你可以修改上面的三个变量来打印不同的结果。</p>\n<h3 id=\"if的嵌套\"><a href=\"#if的嵌套\" class=\"headerlink\" title=\"if的嵌套\"></a>if的嵌套</h3><p>上面的参考答案里头，你可以看到，第一个<code>if</code>，也就是判断票是否够的那一片代码块里，又嵌套了另一个<code>if</code>，用于判断口袋里的钱是否够买4张票。</p>\n<p>为什么要<code>嵌套</code>呢？</p>\n<p>因为按照正常思路，如果票不够，那我也就不用考虑口袋里的钱是否够用的问题。</p>\n<p>所以整个的思路是这样的：</p>\n<ol>\n<li>票够不够？</li>\n<li>票够，那口袋里的钱够不够呢？<ol>\n<li>如果够，就打印<code>可以了，冲锋！</code></li>\n<li>如果不够，就打印<code>啊哦，钱不够了</code></li>\n</ol>\n</li>\n<li>不够就打印<code>没票了</code>，并且结束程序.</li>\n</ol>\n<p>这是一个渐进式的思路，在第一个判断成立的条件下，再进行判断第二个条件是否成立，因为第二个条件跟第一个条件不成立时无关（不考虑）。</p>\n<p>这就是<code>嵌套</code>。</p>\n<p>可以把例子里的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'票够'</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> ticket_price * <span class=\"number\">4</span> &lt;= pocket_money:</span><br><span class=\"line\">    print(<span class=\"string\">'可以了，冲锋！'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'啊哦，钱不够了'</span>)</span><br></pre></td></tr></table></figure>\n<p>看做是一个独立的<code>代码块</code>，他们拥有相同的<code>缩进量</code>。</p>\n<blockquote>\n<p>上面的两个可能因为渲染问题，显示出来是顶格的，我想展示出的是带有一个tab缩进的代码块。就像下面的例子里去掉第一行。</p>\n</blockquote>\n<p>下面的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(<span class=\"string\">'没票了'</span>)</span><br></pre></td></tr></table></figure>\n<p>也是一样的道理。</p>\n<p>其实，可以看做是在另一个代码块里再写一个普通的<code>if</code>。</p>\n<p>然后，从上面的一个<code>if</code>来说，就是一个嵌套的<code>if</code>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> available_ticket &gt;= <span class=\"number\">4</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'票够'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ticket_price * <span class=\"number\">4</span> &lt;= pocket_money:</span><br><span class=\"line\">        print(<span class=\"string\">'可以了，冲锋！'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'啊哦，钱不够了'</span>)</span><br></pre></td></tr></table></figure>\n<p>当然，不是只能在<code>if</code>里写嵌套，<code>else</code>也可以。</p>\n<p>对参考答案进行等效的转换：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> available_ticket &lt; <span class=\"number\">4</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'没票了'</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    print(<span class=\"string\">'票够'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ticket_price * <span class=\"number\">4</span> &lt;= pocket_money:</span><br><span class=\"line\">        print(<span class=\"string\">'可以了，冲锋！'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        print(<span class=\"string\">'啊哦，钱不够了'</span>)</span><br></pre></td></tr></table></figure>\n<p>其实也就是把条件反过来，然后对调一下<code>嵌套</code>的位置而已。</p>\n<p>其实大多数教程不怎么讲<code>if</code>的<code>嵌套</code>，因为是个很正常的思路过程，这里之所以提，是因为<code>if</code>的<code>嵌套</code>和<code>循环</code>的<code>嵌套</code>类似。</p>\n<h3 id=\"循环的嵌套\"><a href=\"#循环的嵌套\" class=\"headerlink\" title=\"循环的嵌套\"></a>循环的嵌套</h3><p>循环分两种：<code>for</code>和<code>while</code>，单纯的循环多少次或者在某个条件成立下循环是很直接的。</p>\n<p>例如，循环打印5个“hello”，每个“hello”中间以空格间隔。</p>\n<p>先自己思考一下。</p>\n<blockquote>\n<p>提示：<code>print()</code>函数默认是每调用一次，自动换行一次。</p>\n<p>用<code>print(&#39;hello&#39;, end=&quot; &quot;)</code>可以实现打印一次不换号，以<code>&quot; &quot;</code>空格结尾。</p>\n</blockquote>\n<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>\n<h4 id=\"参考答案-1\"><a href=\"#参考答案-1\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    print(<span class=\"string\">'hello'</span>, end=<span class=\"string\">\" \"</span>)</span><br></pre></td></tr></table></figure>\n<p>打印出来的结果会是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello hello hello hello hello</span><br></pre></td></tr></table></figure>\n<p>那么，如果我想打印成一个方阵呢？</p>\n<p>也就是这样的结果：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hello hello hello hello hello</span><br><span class=\"line\">hello hello hello hello hello</span><br><span class=\"line\">hello hello hello hello hello</span><br><span class=\"line\">hello hello hello hello hello</span><br><span class=\"line\">hello hello hello hello hello</span><br></pre></td></tr></table></figure>\n<p>是不是想到了上面讲的<code>if</code>的<code>嵌套</code>？</p>\n<p>那么应该怎么嵌套呢？</p>\n<p>可以自己思考思考。</p>\n<p>下面又有答案。</p>\n<blockquote>\n<p>提示：可以用单纯的<code>print()</code>换行</p>\n</blockquote>\n<p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p>\n<h4 id=\"参考答案-2\"><a href=\"#参考答案-2\" class=\"headerlink\" title=\"参考答案\"></a>参考答案</h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">5</span>):</span><br><span class=\"line\">        print(<span class=\"string\">'hello'</span>, end=<span class=\"string\">\" \"</span>)</span><br><span class=\"line\">    print()</span><br></pre></td></tr></table></figure>\n<p>上面就是<code>for</code>的<code>嵌套</code>，<code>while</code>的<code>嵌套</code>也是同理。</p>\n<p>其实就是在循环体里，再写循环。</p>\n<p>可以这样理解，上一节讲的<code>for</code>，把一次循环执行称为<code>迭代</code>，把它看做普通的若干行代码，只是在若干行代码里，碰上了又一个循环。</p>\n<p>或者按照箭头的说法。</p>\n<ol>\n<li>第一个<code>for</code>箭头指向了第一个<code>range(5)</code>的第一个数字<code>0</code>。</li>\n<li>碰到第二个<code>for</code>，就出来另一个箭头，指向第二个<code>range(5)</code>的第一个数字<code>0</code>，这才执行到内层<code>for</code>的循环体，打印一下<code>hello</code>。</li>\n<li>第二个<code>for</code>的第二次迭代，执行了第二个<code>range(5)</code>的第二个数字<code>1</code>，打印一下<code>hello</code>，直到第二个<code>for</code>的5次执行完成。</li>\n<li>然后碰到<code>print()</code>，换行。</li>\n<li>第一个<code>for</code>的箭头再前进，执行下一次<code>迭代</code>，第一个<code>for</code>的<code>range(5)</code>来到了<code>1</code>，再回到<code>步骤2</code>。</li>\n</ol>\n"},{"title":"DraftTest","_content":"# This is a Draft Test\n\nTest Test Test","source":"_drafts/DraftTest.md","raw":"---\ntitle: DraftTest\ncategories:\ntags:\n---\n# This is a Draft Test\n\nTest Test Test","slug":"DraftTest","published":0,"date":"2021-02-13T16:06:58.177Z","updated":"2021-02-13T16:06:58.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjap3000ocswgb87t85pz","content":"<h1 id=\"This-is-a-Draft-Test\"><a href=\"#This-is-a-Draft-Test\" class=\"headerlink\" title=\"This is a Draft Test\"></a>This is a Draft Test</h1><p>Test Test Test</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"This-is-a-Draft-Test\"><a href=\"#This-is-a-Draft-Test\" class=\"headerlink\" title=\"This is a Draft Test\"></a>This is a Draft Test</h1><p>Test Test Test</p>\n"},{"title":"python--temp","_content":"在讲`for`之前，需要知道`数组`或者`列表`的概念。\n\n### 列表\n\n列表其实就是一些变量的有序组合，注意，是`有序`组合。至于为什么强调有序，看到`set`等其他数据类型时就能明白。\n\n假设现在，你需要存储50个同学的数学成绩，在没有`列表`以前，你需要这样做：\n\n``` python\nmath1 = 0\nmath2 = 0\nmath3 = 0 \nmath4 = 0\nmath5 = 0\n...\n...\n...\nmath50 = 0\n```\n\n声明50个变量，并且一一赋值。这是很笨的方法，并且效率很低。\n\n那么，思考一下，是否为上面这些变量每一个单独命名是没有意义的呢？\n\n`列表`就派上用场了。只要简单声明，就能使用一个列表：\n\n``` python\nmath = []\n```\n\n或\n\n``` python\nmath = list()\n```\n\n不同的是，这个列表一开始并没有限定大小，它可以存储若干个数据。\n\n需要往列表里面添加数据，用函数`math.append()`。\n\n例如我想向列表里面添加1个数字`0`，那么就是：\n\n``` python\nmath.append(0)\n```\n\n并且，列表是可以被直接`print()`函数打印的。\n\n``` python\nmath = []\nmath.append(0)\nmath.append(1)\nprint(math)\n```\n\n可以得到结果\n\n``` python\n[0, 1]\n```\n\n中括号表示这是一个`列表`变量，每个元素以`,`分隔开。\n\n`列表`也是一个变量，变量名就代表了一整个`列表`，如果要访问，或者叫做获取列表里某一个元素的话怎么办呢？\n\n就需要用到下标，就像数学里头数列的累加公式里，`ai`是有下标的。\n\n下标表示，元素在`列表`中的位置，下标从`0`开始，访特定位置的`列表`元素，用`列表变量名[下标]`的方式访问。\n\n也就是说，如果现在有一个列表，存储了一组数学成绩：\n\n``` python\nmath = [10, 20, 90, 40, 30]\n```\n\n可以看出来，这个`列表`一共包含`5`个数字，下标从`0`开始。\n\n而`0->4`一共5个数字，也就是`4`是`列表`下标的最大值，`0`是最小值\n\n每一个元素的访问方式如下：\n\n* 10 ---> math[0]\n* 20 ---> math[1]\n* 90 ---> math[2]\n* 40 ---> math[3]\n* 30 ---> math[4]\n\n但是，访问`列表`的数据，不能超过列表当前的大小。\n\n比如，现在的`math`只有`5`个元素，下标最大的值是`4`，那么你如果想打印或者使用`math[5]`，那么会告诉你报错了，错误是：` list assignment index out of range`，也就是`列表`下标越界了。\n\n>可以通过`math.append(0)`来向`列表`添加元素\n\n那么，像`列表`这一小标题开头举的例子里讲的，现在知道了能用`列表`来存储若干个数字，但是要给他们每一个都赋初始值，比如`10`，是不是还是有点麻烦？\n\n脑海里是不是想：\n\n``` python\nmath[0] = 10\nmath[1] = 10\nmath[2] = 10\n...\n...\nmath[49] = 10\n```\n\n>注意，0 -> 49 一共50个数。\n\n那么，`for`就派上用场了\n\n### for 在列表例子里的应用\n\n讲完上面的`列表`，为什么要强调有序呢？因为有序，你就可以按顺序的，访问，或者叫做获取每一个数字。\n\n你可以想象有个箭头，从`列表`的第一个元素，每次往前跳一步，一直走到最后一个元素，这个过程叫做`遍历（traverse）`。\n\n而`for`其实就是在对`列表`进行这么一个`遍历`的过程\n\n通过上一节的`函数`和这一节的`列表`，那么`range(10)`这个`函数`其实生成了一个`列表`。\n\n`列表`里面存储了一排从`0`开始，到`range(x)`的`x-1`为止的等差数列，差是`1`。\n\n也就是：\n\n``` python \nprint( list( range(10) ) )\n```\n\n结果是：\n\n``` python\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n>其实，`range(10)`省略了第一个参数，函数提供了一个默认的参数值，\n>\n>所以其实`range(10)`是`range(0,10)`，也就是`0-10`范围的整数\n>\n>这一点如果你直接`print(range(10))`可以得到结果`range(0, 10)`，也就是为什么上面的打印结果我加了一个`list()`，让他转换为`列表`。\n\n那么你就能明白，重复执行50次，不需要重新声明一个变量，再去`while`的条件里面做判断。\n\n例如，对上面的例子的补充，想对50个数学成绩`依次`赋值为`10`，用`for`可以是：\n\n``` python\nmath = []\nfor i in range(50):\n    math.append(i)\n    math[i] = 10\n```\n\n上面的`i`，其实也就是`遍历`过程中的箭头，一开始指向`range(50)`生成列表的``","source":"_drafts/python-temp.md","raw":"---\ntitle: python--temp\ncategories:\ntags:\n---\n在讲`for`之前，需要知道`数组`或者`列表`的概念。\n\n### 列表\n\n列表其实就是一些变量的有序组合，注意，是`有序`组合。至于为什么强调有序，看到`set`等其他数据类型时就能明白。\n\n假设现在，你需要存储50个同学的数学成绩，在没有`列表`以前，你需要这样做：\n\n``` python\nmath1 = 0\nmath2 = 0\nmath3 = 0 \nmath4 = 0\nmath5 = 0\n...\n...\n...\nmath50 = 0\n```\n\n声明50个变量，并且一一赋值。这是很笨的方法，并且效率很低。\n\n那么，思考一下，是否为上面这些变量每一个单独命名是没有意义的呢？\n\n`列表`就派上用场了。只要简单声明，就能使用一个列表：\n\n``` python\nmath = []\n```\n\n或\n\n``` python\nmath = list()\n```\n\n不同的是，这个列表一开始并没有限定大小，它可以存储若干个数据。\n\n需要往列表里面添加数据，用函数`math.append()`。\n\n例如我想向列表里面添加1个数字`0`，那么就是：\n\n``` python\nmath.append(0)\n```\n\n并且，列表是可以被直接`print()`函数打印的。\n\n``` python\nmath = []\nmath.append(0)\nmath.append(1)\nprint(math)\n```\n\n可以得到结果\n\n``` python\n[0, 1]\n```\n\n中括号表示这是一个`列表`变量，每个元素以`,`分隔开。\n\n`列表`也是一个变量，变量名就代表了一整个`列表`，如果要访问，或者叫做获取列表里某一个元素的话怎么办呢？\n\n就需要用到下标，就像数学里头数列的累加公式里，`ai`是有下标的。\n\n下标表示，元素在`列表`中的位置，下标从`0`开始，访特定位置的`列表`元素，用`列表变量名[下标]`的方式访问。\n\n也就是说，如果现在有一个列表，存储了一组数学成绩：\n\n``` python\nmath = [10, 20, 90, 40, 30]\n```\n\n可以看出来，这个`列表`一共包含`5`个数字，下标从`0`开始。\n\n而`0->4`一共5个数字，也就是`4`是`列表`下标的最大值，`0`是最小值\n\n每一个元素的访问方式如下：\n\n* 10 ---> math[0]\n* 20 ---> math[1]\n* 90 ---> math[2]\n* 40 ---> math[3]\n* 30 ---> math[4]\n\n但是，访问`列表`的数据，不能超过列表当前的大小。\n\n比如，现在的`math`只有`5`个元素，下标最大的值是`4`，那么你如果想打印或者使用`math[5]`，那么会告诉你报错了，错误是：` list assignment index out of range`，也就是`列表`下标越界了。\n\n>可以通过`math.append(0)`来向`列表`添加元素\n\n那么，像`列表`这一小标题开头举的例子里讲的，现在知道了能用`列表`来存储若干个数字，但是要给他们每一个都赋初始值，比如`10`，是不是还是有点麻烦？\n\n脑海里是不是想：\n\n``` python\nmath[0] = 10\nmath[1] = 10\nmath[2] = 10\n...\n...\nmath[49] = 10\n```\n\n>注意，0 -> 49 一共50个数。\n\n那么，`for`就派上用场了\n\n### for 在列表例子里的应用\n\n讲完上面的`列表`，为什么要强调有序呢？因为有序，你就可以按顺序的，访问，或者叫做获取每一个数字。\n\n你可以想象有个箭头，从`列表`的第一个元素，每次往前跳一步，一直走到最后一个元素，这个过程叫做`遍历（traverse）`。\n\n而`for`其实就是在对`列表`进行这么一个`遍历`的过程\n\n通过上一节的`函数`和这一节的`列表`，那么`range(10)`这个`函数`其实生成了一个`列表`。\n\n`列表`里面存储了一排从`0`开始，到`range(x)`的`x-1`为止的等差数列，差是`1`。\n\n也就是：\n\n``` python \nprint( list( range(10) ) )\n```\n\n结果是：\n\n``` python\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n```\n\n>其实，`range(10)`省略了第一个参数，函数提供了一个默认的参数值，\n>\n>所以其实`range(10)`是`range(0,10)`，也就是`0-10`范围的整数\n>\n>这一点如果你直接`print(range(10))`可以得到结果`range(0, 10)`，也就是为什么上面的打印结果我加了一个`list()`，让他转换为`列表`。\n\n那么你就能明白，重复执行50次，不需要重新声明一个变量，再去`while`的条件里面做判断。\n\n例如，对上面的例子的补充，想对50个数学成绩`依次`赋值为`10`，用`for`可以是：\n\n``` python\nmath = []\nfor i in range(50):\n    math.append(i)\n    math[i] = 10\n```\n\n上面的`i`，其实也就是`遍历`过程中的箭头，一开始指向`range(50)`生成列表的``","slug":"python-temp","published":0,"date":"2021-02-13T16:06:58.177Z","updated":"2021-02-13T16:06:58.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjap5000tcswgdx0ba8py","content":"<p>在讲<code>for</code>之前，需要知道<code>数组</code>或者<code>列表</code>的概念。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>列表其实就是一些变量的有序组合，注意，是<code>有序</code>组合。至于为什么强调有序，看到<code>set</code>等其他数据类型时就能明白。</p>\n<p>假设现在，你需要存储50个同学的数学成绩，在没有<code>列表</code>以前，你需要这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math1 = <span class=\"number\">0</span></span><br><span class=\"line\">math2 = <span class=\"number\">0</span></span><br><span class=\"line\">math3 = <span class=\"number\">0</span> </span><br><span class=\"line\">math4 = <span class=\"number\">0</span></span><br><span class=\"line\">math5 = <span class=\"number\">0</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">math50 = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>声明50个变量，并且一一赋值。这是很笨的方法，并且效率很低。</p>\n<p>那么，思考一下，是否为上面这些变量每一个单独命名是没有意义的呢？</p>\n<p><code>列表</code>就派上用场了。只要简单声明，就能使用一个列表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = list()</span><br></pre></td></tr></table></figure>\n<p>不同的是，这个列表一开始并没有限定大小，它可以存储若干个数据。</p>\n<p>需要往列表里面添加数据，用函数<code>math.append()</code>。</p>\n<p>例如我想向列表里面添加1个数字<code>0</code>，那么就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.append(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>并且，列表是可以被直接<code>print()</code>函数打印的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br><span class=\"line\">math.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">math.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">print(math)</span><br></pre></td></tr></table></figure>\n<p>可以得到结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>中括号表示这是一个<code>列表</code>变量，每个元素以<code>,</code>分隔开。</p>\n<p><code>列表</code>也是一个变量，变量名就代表了一整个<code>列表</code>，如果要访问，或者叫做获取列表里某一个元素的话怎么办呢？</p>\n<p>就需要用到下标，就像数学里头数列的累加公式里，<code>ai</code>是有下标的。</p>\n<p>下标表示，元素在<code>列表</code>中的位置，下标从<code>0</code>开始，访特定位置的<code>列表</code>元素，用<code>列表变量名[下标]</code>的方式访问。</p>\n<p>也就是说，如果现在有一个列表，存储了一组数学成绩：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">90</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看出来，这个<code>列表</code>一共包含<code>5</code>个数字，下标从<code>0</code>开始。</p>\n<p>而<code>0-&gt;4</code>一共5个数字，也就是<code>4</code>是<code>列表</code>下标的最大值，<code>0</code>是最小值</p>\n<p>每一个元素的访问方式如下：</p>\n<ul>\n<li>10 —-&gt; math[0]</li>\n<li>20 —-&gt; math[1]</li>\n<li>90 —-&gt; math[2]</li>\n<li>40 —-&gt; math[3]</li>\n<li>30 —-&gt; math[4]</li>\n</ul>\n<p>但是，访问<code>列表</code>的数据，不能超过列表当前的大小。</p>\n<p>比如，现在的<code>math</code>只有<code>5</code>个元素，下标最大的值是<code>4</code>，那么你如果想打印或者使用<code>math[5]</code>，那么会告诉你报错了，错误是：<code>list assignment index out of range</code>，也就是<code>列表</code>下标越界了。</p>\n<blockquote>\n<p>可以通过<code>math.append(0)</code>来向<code>列表</code>添加元素</p>\n</blockquote>\n<p>那么，像<code>列表</code>这一小标题开头举的例子里讲的，现在知道了能用<code>列表</code>来存储若干个数字，但是要给他们每一个都赋初始值，比如<code>10</code>，是不是还是有点麻烦？</p>\n<p>脑海里是不是想：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math[<span class=\"number\">0</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">math[<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">math[<span class=\"number\">2</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">math[<span class=\"number\">49</span>] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，0 -&gt; 49 一共50个数。</p>\n</blockquote>\n<p>那么，<code>for</code>就派上用场了</p>\n<h3 id=\"for-在列表例子里的应用\"><a href=\"#for-在列表例子里的应用\" class=\"headerlink\" title=\"for 在列表例子里的应用\"></a>for 在列表例子里的应用</h3><p>讲完上面的<code>列表</code>，为什么要强调有序呢？因为有序，你就可以按顺序的，访问，或者叫做获取每一个数字。</p>\n<p>你可以想象有个箭头，从<code>列表</code>的第一个元素，每次往前跳一步，一直走到最后一个元素，这个过程叫做<code>遍历（traverse）</code>。</p>\n<p>而<code>for</code>其实就是在对<code>列表</code>进行这么一个<code>遍历</code>的过程</p>\n<p>通过上一节的<code>函数</code>和这一节的<code>列表</code>，那么<code>range(10)</code>这个<code>函数</code>其实生成了一个<code>列表</code>。</p>\n<p><code>列表</code>里面存储了一排从<code>0</code>开始，到<code>range(x)</code>的<code>x-1</code>为止的等差数列，差是<code>1</code>。</p>\n<p>也就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print( list( range(<span class=\"number\">10</span>) ) )</span><br></pre></td></tr></table></figure>\n<p>结果是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其实，<code>range(10)</code>省略了第一个参数，函数提供了一个默认的参数值，</p>\n<p>所以其实<code>range(10)</code>是<code>range(0,10)</code>，也就是<code>0-10</code>范围的整数</p>\n<p>这一点如果你直接<code>print(range(10))</code>可以得到结果<code>range(0, 10)</code>，也就是为什么上面的打印结果我加了一个<code>list()</code>，让他转换为<code>列表</code>。</p>\n</blockquote>\n<p>那么你就能明白，重复执行50次，不需要重新声明一个变量，再去<code>while</code>的条件里面做判断。</p>\n<p>例如，对上面的例子的补充，想对50个数学成绩<code>依次</code>赋值为<code>10</code>，用<code>for</code>可以是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">50</span>):</span><br><span class=\"line\">    math.append(i)</span><br><span class=\"line\">    math[i] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>上面的<code>i</code>，其实也就是<code>遍历</code>过程中的箭头，一开始指向<code>range(50)</code>生成列表的``</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在讲<code>for</code>之前，需要知道<code>数组</code>或者<code>列表</code>的概念。</p>\n<h3 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h3><p>列表其实就是一些变量的有序组合，注意，是<code>有序</code>组合。至于为什么强调有序，看到<code>set</code>等其他数据类型时就能明白。</p>\n<p>假设现在，你需要存储50个同学的数学成绩，在没有<code>列表</code>以前，你需要这样做：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math1 = <span class=\"number\">0</span></span><br><span class=\"line\">math2 = <span class=\"number\">0</span></span><br><span class=\"line\">math3 = <span class=\"number\">0</span> </span><br><span class=\"line\">math4 = <span class=\"number\">0</span></span><br><span class=\"line\">math5 = <span class=\"number\">0</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">math50 = <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>声明50个变量，并且一一赋值。这是很笨的方法，并且效率很低。</p>\n<p>那么，思考一下，是否为上面这些变量每一个单独命名是没有意义的呢？</p>\n<p><code>列表</code>就派上用场了。只要简单声明，就能使用一个列表：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = list()</span><br></pre></td></tr></table></figure>\n<p>不同的是，这个列表一开始并没有限定大小，它可以存储若干个数据。</p>\n<p>需要往列表里面添加数据，用函数<code>math.append()</code>。</p>\n<p>例如我想向列表里面添加1个数字<code>0</code>，那么就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math.append(<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n<p>并且，列表是可以被直接<code>print()</code>函数打印的。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br><span class=\"line\">math.append(<span class=\"number\">0</span>)</span><br><span class=\"line\">math.append(<span class=\"number\">1</span>)</span><br><span class=\"line\">print(math)</span><br></pre></td></tr></table></figure>\n<p>可以得到结果</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>]</span><br></pre></td></tr></table></figure>\n<p>中括号表示这是一个<code>列表</code>变量，每个元素以<code>,</code>分隔开。</p>\n<p><code>列表</code>也是一个变量，变量名就代表了一整个<code>列表</code>，如果要访问，或者叫做获取列表里某一个元素的话怎么办呢？</p>\n<p>就需要用到下标，就像数学里头数列的累加公式里，<code>ai</code>是有下标的。</p>\n<p>下标表示，元素在<code>列表</code>中的位置，下标从<code>0</code>开始，访特定位置的<code>列表</code>元素，用<code>列表变量名[下标]</code>的方式访问。</p>\n<p>也就是说，如果现在有一个列表，存储了一组数学成绩：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">90</span>, <span class=\"number\">40</span>, <span class=\"number\">30</span>]</span><br></pre></td></tr></table></figure>\n<p>可以看出来，这个<code>列表</code>一共包含<code>5</code>个数字，下标从<code>0</code>开始。</p>\n<p>而<code>0-&gt;4</code>一共5个数字，也就是<code>4</code>是<code>列表</code>下标的最大值，<code>0</code>是最小值</p>\n<p>每一个元素的访问方式如下：</p>\n<ul>\n<li>10 —-&gt; math[0]</li>\n<li>20 —-&gt; math[1]</li>\n<li>90 —-&gt; math[2]</li>\n<li>40 —-&gt; math[3]</li>\n<li>30 —-&gt; math[4]</li>\n</ul>\n<p>但是，访问<code>列表</code>的数据，不能超过列表当前的大小。</p>\n<p>比如，现在的<code>math</code>只有<code>5</code>个元素，下标最大的值是<code>4</code>，那么你如果想打印或者使用<code>math[5]</code>，那么会告诉你报错了，错误是：<code>list assignment index out of range</code>，也就是<code>列表</code>下标越界了。</p>\n<blockquote>\n<p>可以通过<code>math.append(0)</code>来向<code>列表</code>添加元素</p>\n</blockquote>\n<p>那么，像<code>列表</code>这一小标题开头举的例子里讲的，现在知道了能用<code>列表</code>来存储若干个数字，但是要给他们每一个都赋初始值，比如<code>10</code>，是不是还是有点麻烦？</p>\n<p>脑海里是不是想：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math[<span class=\"number\">0</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">math[<span class=\"number\">1</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">math[<span class=\"number\">2</span>] = <span class=\"number\">10</span></span><br><span class=\"line\">...</span><br><span class=\"line\">...</span><br><span class=\"line\">math[<span class=\"number\">49</span>] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意，0 -&gt; 49 一共50个数。</p>\n</blockquote>\n<p>那么，<code>for</code>就派上用场了</p>\n<h3 id=\"for-在列表例子里的应用\"><a href=\"#for-在列表例子里的应用\" class=\"headerlink\" title=\"for 在列表例子里的应用\"></a>for 在列表例子里的应用</h3><p>讲完上面的<code>列表</code>，为什么要强调有序呢？因为有序，你就可以按顺序的，访问，或者叫做获取每一个数字。</p>\n<p>你可以想象有个箭头，从<code>列表</code>的第一个元素，每次往前跳一步，一直走到最后一个元素，这个过程叫做<code>遍历（traverse）</code>。</p>\n<p>而<code>for</code>其实就是在对<code>列表</code>进行这么一个<code>遍历</code>的过程</p>\n<p>通过上一节的<code>函数</code>和这一节的<code>列表</code>，那么<code>range(10)</code>这个<code>函数</code>其实生成了一个<code>列表</code>。</p>\n<p><code>列表</code>里面存储了一排从<code>0</code>开始，到<code>range(x)</code>的<code>x-1</code>为止的等差数列，差是<code>1</code>。</p>\n<p>也就是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print( list( range(<span class=\"number\">10</span>) ) )</span><br></pre></td></tr></table></figure>\n<p>结果是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其实，<code>range(10)</code>省略了第一个参数，函数提供了一个默认的参数值，</p>\n<p>所以其实<code>range(10)</code>是<code>range(0,10)</code>，也就是<code>0-10</code>范围的整数</p>\n<p>这一点如果你直接<code>print(range(10))</code>可以得到结果<code>range(0, 10)</code>，也就是为什么上面的打印结果我加了一个<code>list()</code>，让他转换为<code>列表</code>。</p>\n</blockquote>\n<p>那么你就能明白，重复执行50次，不需要重新声明一个变量，再去<code>while</code>的条件里面做判断。</p>\n<p>例如，对上面的例子的补充，想对50个数学成绩<code>依次</code>赋值为<code>10</code>，用<code>for</code>可以是：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">math = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">50</span>):</span><br><span class=\"line\">    math.append(i)</span><br><span class=\"line\">    math[i] = <span class=\"number\">10</span></span><br></pre></td></tr></table></figure>\n<p>上面的<code>i</code>，其实也就是<code>遍历</code>过程中的箭头，一开始指向<code>range(50)</code>生成列表的``</p>\n"},{"title":"二进制相关","date":"2018-11-02T08:00:36.000Z","_content":"# 常用二进制\n\n$$\n2^0 = 1 \\qquad 2^1 = 2 \\qquad 2^2 = 4 \\qquad 2^3 = 8 \\qquad 2^4 = 16 \\qquad 2^5 = 32\\\\\n2^6 = 64 \\qquad 2^7 = 128 \\qquad 2^8 = 256 \\qquad 2^9 = 512 \\qquad 2^{10} = 1024\\\\\n$$\n\n# 位运算\n\n## 与\n& 同为1，结果为1\n## 或\n| 有一为1\n## 异或\n同0异1\n## 取反\n1变0，0变1\n## 左移\n全部左移若干位，高位丢弃，低位补0\n## 右移\n右移若干位，对无符号数，不同编译器处理不同，高位补符号位（算术右移）或补0（逻辑右移）\n\n# 二进制运算\n\n## 加\n$0+0=0 \\quad 0+1=1 \\quad 1+1=10 (进位)$\n\n## 减\n$0-0=0 \\quad 0-1=1(向高位借位) \\quad 1-0=1 \\quad 1-1=0 (模二加运算或异或运算)$\n\n## 乘\n$0 \\times 0 = 0 \\quad 0 \\times 1 = 0 \\quad 1 \\times 0 = 0 \\quad 1 \\times 1 = 1$\n\n## 除\n$0 ÷ 0 = 0 \\quad 0÷1 = 0 \\quad 1÷0 = 0 (无意义) \\quad 1÷1 = 1$","source":"_posts/2018-11-02-二进制相关.md","raw":"---\ntitle: 二进制相关\ndate: 2018-11-02 16:00:36\ncategories:\n- Note\ntags:\n- Note\n- Binary\n---\n# 常用二进制\n\n$$\n2^0 = 1 \\qquad 2^1 = 2 \\qquad 2^2 = 4 \\qquad 2^3 = 8 \\qquad 2^4 = 16 \\qquad 2^5 = 32\\\\\n2^6 = 64 \\qquad 2^7 = 128 \\qquad 2^8 = 256 \\qquad 2^9 = 512 \\qquad 2^{10} = 1024\\\\\n$$\n\n# 位运算\n\n## 与\n& 同为1，结果为1\n## 或\n| 有一为1\n## 异或\n同0异1\n## 取反\n1变0，0变1\n## 左移\n全部左移若干位，高位丢弃，低位补0\n## 右移\n右移若干位，对无符号数，不同编译器处理不同，高位补符号位（算术右移）或补0（逻辑右移）\n\n# 二进制运算\n\n## 加\n$0+0=0 \\quad 0+1=1 \\quad 1+1=10 (进位)$\n\n## 减\n$0-0=0 \\quad 0-1=1(向高位借位) \\quad 1-0=1 \\quad 1-1=0 (模二加运算或异或运算)$\n\n## 乘\n$0 \\times 0 = 0 \\quad 0 \\times 1 = 0 \\quad 1 \\times 0 = 0 \\quad 1 \\times 1 = 1$\n\n## 除\n$0 ÷ 0 = 0 \\quad 0÷1 = 0 \\quad 1÷0 = 0 (无意义) \\quad 1÷1 = 1$","slug":"二进制相关","published":1,"updated":"2021-02-13T16:06:58.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjap6000wcswgnqik6h26","content":"<h1 id=\"常用二进制\"><a href=\"#常用二进制\" class=\"headerlink\" title=\"常用二进制\"></a>常用二进制</h1><script type=\"math/tex; mode=display\">\n2^0 = 1 \\qquad 2^1 = 2 \\qquad 2^2 = 4 \\qquad 2^3 = 8 \\qquad 2^4 = 16 \\qquad 2^5 = 32\\\\\n2^6 = 64 \\qquad 2^7 = 128 \\qquad 2^8 = 256 \\qquad 2^9 = 512 \\qquad 2^{10} = 1024\\\\</script><h1 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h1><h2 id=\"与\"><a href=\"#与\" class=\"headerlink\" title=\"与\"></a>与</h2><p>&amp; 同为1，结果为1</p>\n<h2 id=\"或\"><a href=\"#或\" class=\"headerlink\" title=\"或\"></a>或</h2><p>| 有一为1</p>\n<h2 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h2><p>同0异1</p>\n<h2 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"取反\"></a>取反</h2><p>1变0，0变1</p>\n<h2 id=\"左移\"><a href=\"#左移\" class=\"headerlink\" title=\"左移\"></a>左移</h2><p>全部左移若干位，高位丢弃，低位补0</p>\n<h2 id=\"右移\"><a href=\"#右移\" class=\"headerlink\" title=\"右移\"></a>右移</h2><p>右移若干位，对无符号数，不同编译器处理不同，高位补符号位（算术右移）或补0（逻辑右移）</p>\n<h1 id=\"二进制运算\"><a href=\"#二进制运算\" class=\"headerlink\" title=\"二进制运算\"></a>二进制运算</h1><h2 id=\"加\"><a href=\"#加\" class=\"headerlink\" title=\"加\"></a>加</h2><p>$0+0=0 \\quad 0+1=1 \\quad 1+1=10 (进位)$</p>\n<h2 id=\"减\"><a href=\"#减\" class=\"headerlink\" title=\"减\"></a>减</h2><p>$0-0=0 \\quad 0-1=1(向高位借位) \\quad 1-0=1 \\quad 1-1=0 (模二加运算或异或运算)$</p>\n<h2 id=\"乘\"><a href=\"#乘\" class=\"headerlink\" title=\"乘\"></a>乘</h2><p>$0 \\times 0 = 0 \\quad 0 \\times 1 = 0 \\quad 1 \\times 0 = 0 \\quad 1 \\times 1 = 1$</p>\n<h2 id=\"除\"><a href=\"#除\" class=\"headerlink\" title=\"除\"></a>除</h2><p>$0 ÷ 0 = 0 \\quad 0÷1 = 0 \\quad 1÷0 = 0 (无意义) \\quad 1÷1 = 1$</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"常用二进制\"><a href=\"#常用二进制\" class=\"headerlink\" title=\"常用二进制\"></a>常用二进制</h1><script type=\"math/tex; mode=display\">\n2^0 = 1 \\qquad 2^1 = 2 \\qquad 2^2 = 4 \\qquad 2^3 = 8 \\qquad 2^4 = 16 \\qquad 2^5 = 32\\\\\n2^6 = 64 \\qquad 2^7 = 128 \\qquad 2^8 = 256 \\qquad 2^9 = 512 \\qquad 2^{10} = 1024\\\\</script><h1 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h1><h2 id=\"与\"><a href=\"#与\" class=\"headerlink\" title=\"与\"></a>与</h2><p>&amp; 同为1，结果为1</p>\n<h2 id=\"或\"><a href=\"#或\" class=\"headerlink\" title=\"或\"></a>或</h2><p>| 有一为1</p>\n<h2 id=\"异或\"><a href=\"#异或\" class=\"headerlink\" title=\"异或\"></a>异或</h2><p>同0异1</p>\n<h2 id=\"取反\"><a href=\"#取反\" class=\"headerlink\" title=\"取反\"></a>取反</h2><p>1变0，0变1</p>\n<h2 id=\"左移\"><a href=\"#左移\" class=\"headerlink\" title=\"左移\"></a>左移</h2><p>全部左移若干位，高位丢弃，低位补0</p>\n<h2 id=\"右移\"><a href=\"#右移\" class=\"headerlink\" title=\"右移\"></a>右移</h2><p>右移若干位，对无符号数，不同编译器处理不同，高位补符号位（算术右移）或补0（逻辑右移）</p>\n<h1 id=\"二进制运算\"><a href=\"#二进制运算\" class=\"headerlink\" title=\"二进制运算\"></a>二进制运算</h1><h2 id=\"加\"><a href=\"#加\" class=\"headerlink\" title=\"加\"></a>加</h2><p>$0+0=0 \\quad 0+1=1 \\quad 1+1=10 (进位)$</p>\n<h2 id=\"减\"><a href=\"#减\" class=\"headerlink\" title=\"减\"></a>减</h2><p>$0-0=0 \\quad 0-1=1(向高位借位) \\quad 1-0=1 \\quad 1-1=0 (模二加运算或异或运算)$</p>\n<h2 id=\"乘\"><a href=\"#乘\" class=\"headerlink\" title=\"乘\"></a>乘</h2><p>$0 \\times 0 = 0 \\quad 0 \\times 1 = 0 \\quad 1 \\times 0 = 0 \\quad 1 \\times 1 = 1$</p>\n<h2 id=\"除\"><a href=\"#除\" class=\"headerlink\" title=\"除\"></a>除</h2><p>$0 ÷ 0 = 0 \\quad 0÷1 = 0 \\quad 1÷0 = 0 (无意义) \\quad 1÷1 = 1$</p>\n"},{"title":"Travis+Hexo自动推送博客","date":"2019-02-06T14:42:02.000Z","_content":"# 简 介\n\n## Hexo是什么\n\n    Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n    本Blog也是基于Hexo搭建。\n\n## Travis是什么\n\n    Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，同时他是在在线的服务，不像jenkins需要你本地打架服务器，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建。对于做开源项目或者github的使用者，如果你的项目还没有加入Travis CI构建队列，那么我真的想对你说out了。  \n\n# 使用原因\n\n* 单纯的使用Hexo提供的hexo depoly，将编译后的静态页面上传到GitHubPage还不够。\n* 如果发生数据丢失、硬盘损坏等，项目文件丢失了。单纯的从编译好的静态页面文件并不能还原Hexo的项目文件，最重要的是项目中的Markdown文件的丢失。\n* 不用再调主题\n\n# 步骤\n\n## 注册Travis\n\nTravis支持GitHub账号直接登录，直接用GitHub账号授权即可。\n\n注册后如图\n\n![](https://i.loli.net/2019/02/06/5c5afb068ebdf.jpg)\n\n左侧选项卡点击加号，激活你的GitHubPage项目。\n\n## GitHub 准备\n\n### 项目准备\n\nGitHubPage对应的项目中，需要新建一个分支，名字任意，用来保存Hexo项目。\n\n### 授权准备\n\n* 进入GitHub的账号设置\n\n![账号设置](https://i.loli.net/2019/02/06/5c5afc7c753b2.jpg)\n\n* 选择Developer settings\n\n![Developer settings](https://i.loli.net/2019/02/07/5c5be272b6dc2.jpg)\n\n* 选择Personal Acess Token\n\n![Personal Acess Token](https://i.loli.net/2019/02/06/5c5afc7c5b4e7.jpg)\n\n* 点击右侧的Generate new Token\n\n![Generate new Token](https://i.loli.net/2019/02/06/5c5afdb0111cc.jpg)\n\n* 勾选如下权限\n\n![权限设置](https://i.loli.net/2019/02/06/5c5afe1f2dcc3.jpg)\n\n* 生成Token并复制\n\n* 回到Travis里，在激活的项目右侧点击Setting，下方添加变量'GH_TOKEN'，值为刚刚生成的Token\n\n* 在Hexo项目中，新建'.travis.yml'文件，填入：\n\n``` yml\nlanguage: node_js\nnode_js: stable\n\n# S: Build Lifecycle\ninstall:\n- npm install\n\n\n#before_script:\n# - npm install -g gulp\n\nscript:\n- hexo g\n\nafter_script:\n- cd ./public\n- git init\n- git config user.name \"@Github用户名@\"\n- git config user.email \"@Github邮箱@\"\n- git add .\n- git commit -m \"Update docs\"\n- git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master\n# E: Build LifeCycle\n\nbranches:\nonly:\n    - @创建的分支@\nenv:\nglobal:\n- GH_REF: @项目地址@\n```\n\n## 使用方法\n\n* 使用方法即普通的Git add->commit->push 一套Combo，Travis检测到变动会通过trvais.yml编译并提交到master里，Token已经给了Travis写入权限了。\n\n## 最后结果\n\n最后你会在GitHubPage的仓库里看到master分支和创建的hexo项目分支，其中hexo项目分支是自己手动git push上去的，而master分支即展示在GitHubPage上的静态页面是Travis编译完成并push的。\n\n## 参考文章\n\n[](https://www.2cto.com/kf/201605/505702.html)","source":"_posts/2019-02-06-Travis-Hexo自动推送博客.md","raw":"---\ntitle: Travis+Hexo自动推送博客\ndate: 2019-02-06 22:42:02\ncategories:\n- Note\ntags:\n- Note\n---\n# 简 介\n\n## Hexo是什么\n\n    Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n    本Blog也是基于Hexo搭建。\n\n## Travis是什么\n\n    Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，同时他是在在线的服务，不像jenkins需要你本地打架服务器，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建。对于做开源项目或者github的使用者，如果你的项目还没有加入Travis CI构建队列，那么我真的想对你说out了。  \n\n# 使用原因\n\n* 单纯的使用Hexo提供的hexo depoly，将编译后的静态页面上传到GitHubPage还不够。\n* 如果发生数据丢失、硬盘损坏等，项目文件丢失了。单纯的从编译好的静态页面文件并不能还原Hexo的项目文件，最重要的是项目中的Markdown文件的丢失。\n* 不用再调主题\n\n# 步骤\n\n## 注册Travis\n\nTravis支持GitHub账号直接登录，直接用GitHub账号授权即可。\n\n注册后如图\n\n![](https://i.loli.net/2019/02/06/5c5afb068ebdf.jpg)\n\n左侧选项卡点击加号，激活你的GitHubPage项目。\n\n## GitHub 准备\n\n### 项目准备\n\nGitHubPage对应的项目中，需要新建一个分支，名字任意，用来保存Hexo项目。\n\n### 授权准备\n\n* 进入GitHub的账号设置\n\n![账号设置](https://i.loli.net/2019/02/06/5c5afc7c753b2.jpg)\n\n* 选择Developer settings\n\n![Developer settings](https://i.loli.net/2019/02/07/5c5be272b6dc2.jpg)\n\n* 选择Personal Acess Token\n\n![Personal Acess Token](https://i.loli.net/2019/02/06/5c5afc7c5b4e7.jpg)\n\n* 点击右侧的Generate new Token\n\n![Generate new Token](https://i.loli.net/2019/02/06/5c5afdb0111cc.jpg)\n\n* 勾选如下权限\n\n![权限设置](https://i.loli.net/2019/02/06/5c5afe1f2dcc3.jpg)\n\n* 生成Token并复制\n\n* 回到Travis里，在激活的项目右侧点击Setting，下方添加变量'GH_TOKEN'，值为刚刚生成的Token\n\n* 在Hexo项目中，新建'.travis.yml'文件，填入：\n\n``` yml\nlanguage: node_js\nnode_js: stable\n\n# S: Build Lifecycle\ninstall:\n- npm install\n\n\n#before_script:\n# - npm install -g gulp\n\nscript:\n- hexo g\n\nafter_script:\n- cd ./public\n- git init\n- git config user.name \"@Github用户名@\"\n- git config user.email \"@Github邮箱@\"\n- git add .\n- git commit -m \"Update docs\"\n- git push --force --quiet \"https://${GH_TOKEN}@${GH_REF}\" master:master\n# E: Build LifeCycle\n\nbranches:\nonly:\n    - @创建的分支@\nenv:\nglobal:\n- GH_REF: @项目地址@\n```\n\n## 使用方法\n\n* 使用方法即普通的Git add->commit->push 一套Combo，Travis检测到变动会通过trvais.yml编译并提交到master里，Token已经给了Travis写入权限了。\n\n## 最后结果\n\n最后你会在GitHubPage的仓库里看到master分支和创建的hexo项目分支，其中hexo项目分支是自己手动git push上去的，而master分支即展示在GitHubPage上的静态页面是Travis编译完成并push的。\n\n## 参考文章\n\n[](https://www.2cto.com/kf/201605/505702.html)","slug":"Travis-Hexo自动推送博客","published":1,"updated":"2021-02-13T16:06:58.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjap80010cswgen9jm9ca","content":"<h1 id=\"简-介\"><a href=\"#简-介\" class=\"headerlink\" title=\"简 介\"></a>简 介</h1><h2 id=\"Hexo是什么\"><a href=\"#Hexo是什么\" class=\"headerlink\" title=\"Hexo是什么\"></a>Hexo是什么</h2><pre><code>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n本Blog也是基于Hexo搭建。\n</code></pre><h2 id=\"Travis是什么\"><a href=\"#Travis是什么\" class=\"headerlink\" title=\"Travis是什么\"></a>Travis是什么</h2><pre><code>Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，同时他是在在线的服务，不像jenkins需要你本地打架服务器，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建。对于做开源项目或者github的使用者，如果你的项目还没有加入Travis CI构建队列，那么我真的想对你说out了。  \n</code></pre><h1 id=\"使用原因\"><a href=\"#使用原因\" class=\"headerlink\" title=\"使用原因\"></a>使用原因</h1><ul>\n<li>单纯的使用Hexo提供的hexo depoly，将编译后的静态页面上传到GitHubPage还不够。</li>\n<li>如果发生数据丢失、硬盘损坏等，项目文件丢失了。单纯的从编译好的静态页面文件并不能还原Hexo的项目文件，最重要的是项目中的Markdown文件的丢失。</li>\n<li>不用再调主题</li>\n</ul>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"注册Travis\"><a href=\"#注册Travis\" class=\"headerlink\" title=\"注册Travis\"></a>注册Travis</h2><p>Travis支持GitHub账号直接登录，直接用GitHub账号授权即可。</p>\n<p>注册后如图</p>\n<p><img src=\"https://i.loli.net/2019/02/06/5c5afb068ebdf.jpg\" alt=\"\"></p>\n<p>左侧选项卡点击加号，激活你的GitHubPage项目。</p>\n<h2 id=\"GitHub-准备\"><a href=\"#GitHub-准备\" class=\"headerlink\" title=\"GitHub 准备\"></a>GitHub 准备</h2><h3 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h3><p>GitHubPage对应的项目中，需要新建一个分支，名字任意，用来保存Hexo项目。</p>\n<h3 id=\"授权准备\"><a href=\"#授权准备\" class=\"headerlink\" title=\"授权准备\"></a>授权准备</h3><ul>\n<li>进入GitHub的账号设置</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/02/06/5c5afc7c753b2.jpg\" alt=\"账号设置\"></p>\n<ul>\n<li>选择Developer settings</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/02/07/5c5be272b6dc2.jpg\" alt=\"Developer settings\"></p>\n<ul>\n<li>选择Personal Acess Token</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/02/06/5c5afc7c5b4e7.jpg\" alt=\"Personal Acess Token\"></p>\n<ul>\n<li>点击右侧的Generate new Token</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/02/06/5c5afdb0111cc.jpg\" alt=\"Generate new Token\"></p>\n<ul>\n<li>勾选如下权限</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/02/06/5c5afe1f2dcc3.jpg\" alt=\"权限设置\"></p>\n<ul>\n<li><p>生成Token并复制</p>\n</li>\n<li><p>回到Travis里，在激活的项目右侧点击Setting，下方添加变量’GH_TOKEN’，值为刚刚生成的Token</p>\n</li>\n<li><p>在Hexo项目中，新建’.travis.yml’文件，填入：</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># S: Build Lifecycle</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#before_script:</span></span><br><span class=\"line\"><span class=\"comment\"># - npm install -g gulp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">init</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.name</span> <span class=\"string\">\"@Github用户名@\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.email</span> <span class=\"string\">\"@Github邮箱@\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"bullet\">-m</span> <span class=\"string\">\"Update docs\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"bullet\">--force</span> <span class=\"bullet\">--quiet</span> <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> <span class=\"attr\">master:master</span></span><br><span class=\"line\"><span class=\"comment\"># E: Build LifeCycle</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">@创建的分支@</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\"><span class=\"attr\">- GH_REF:</span> <span class=\"string\">@项目地址@</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ul>\n<li>使用方法即普通的Git add-&gt;commit-&gt;push 一套Combo，Travis检测到变动会通过trvais.yml编译并提交到master里，Token已经给了Travis写入权限了。</li>\n</ul>\n<h2 id=\"最后结果\"><a href=\"#最后结果\" class=\"headerlink\" title=\"最后结果\"></a>最后结果</h2><p>最后你会在GitHubPage的仓库里看到master分支和创建的hexo项目分支，其中hexo项目分支是自己手动git push上去的，而master分支即展示在GitHubPage上的静态页面是Travis编译完成并push的。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.2cto.com/kf/201605/505702.html\" target=\"_blank\" rel=\"noopener\"></a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"简-介\"><a href=\"#简-介\" class=\"headerlink\" title=\"简 介\"></a>简 介</h1><h2 id=\"Hexo是什么\"><a href=\"#Hexo是什么\" class=\"headerlink\" title=\"Hexo是什么\"></a>Hexo是什么</h2><pre><code>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。\n本Blog也是基于Hexo搭建。\n</code></pre><h2 id=\"Travis是什么\"><a href=\"#Travis是什么\" class=\"headerlink\" title=\"Travis是什么\"></a>Travis是什么</h2><pre><code>Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，同时他是在在线的服务，不像jenkins需要你本地打架服务器，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建。对于做开源项目或者github的使用者，如果你的项目还没有加入Travis CI构建队列，那么我真的想对你说out了。  \n</code></pre><h1 id=\"使用原因\"><a href=\"#使用原因\" class=\"headerlink\" title=\"使用原因\"></a>使用原因</h1><ul>\n<li>单纯的使用Hexo提供的hexo depoly，将编译后的静态页面上传到GitHubPage还不够。</li>\n<li>如果发生数据丢失、硬盘损坏等，项目文件丢失了。单纯的从编译好的静态页面文件并不能还原Hexo的项目文件，最重要的是项目中的Markdown文件的丢失。</li>\n<li>不用再调主题</li>\n</ul>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h1><h2 id=\"注册Travis\"><a href=\"#注册Travis\" class=\"headerlink\" title=\"注册Travis\"></a>注册Travis</h2><p>Travis支持GitHub账号直接登录，直接用GitHub账号授权即可。</p>\n<p>注册后如图</p>\n<p><img src=\"https://i.loli.net/2019/02/06/5c5afb068ebdf.jpg\" alt=\"\"></p>\n<p>左侧选项卡点击加号，激活你的GitHubPage项目。</p>\n<h2 id=\"GitHub-准备\"><a href=\"#GitHub-准备\" class=\"headerlink\" title=\"GitHub 准备\"></a>GitHub 准备</h2><h3 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h3><p>GitHubPage对应的项目中，需要新建一个分支，名字任意，用来保存Hexo项目。</p>\n<h3 id=\"授权准备\"><a href=\"#授权准备\" class=\"headerlink\" title=\"授权准备\"></a>授权准备</h3><ul>\n<li>进入GitHub的账号设置</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/02/06/5c5afc7c753b2.jpg\" alt=\"账号设置\"></p>\n<ul>\n<li>选择Developer settings</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/02/07/5c5be272b6dc2.jpg\" alt=\"Developer settings\"></p>\n<ul>\n<li>选择Personal Acess Token</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/02/06/5c5afc7c5b4e7.jpg\" alt=\"Personal Acess Token\"></p>\n<ul>\n<li>点击右侧的Generate new Token</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/02/06/5c5afdb0111cc.jpg\" alt=\"Generate new Token\"></p>\n<ul>\n<li>勾选如下权限</li>\n</ul>\n<p><img src=\"https://i.loli.net/2019/02/06/5c5afe1f2dcc3.jpg\" alt=\"权限设置\"></p>\n<ul>\n<li><p>生成Token并复制</p>\n</li>\n<li><p>回到Travis里，在激活的项目右侧点击Setting，下方添加变量’GH_TOKEN’，值为刚刚生成的Token</p>\n</li>\n<li><p>在Hexo项目中，新建’.travis.yml’文件，填入：</p>\n</li>\n</ul>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">language:</span> <span class=\"string\">node_js</span></span><br><span class=\"line\"><span class=\"attr\">node_js:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># S: Build Lifecycle</span></span><br><span class=\"line\"><span class=\"attr\">install:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">npm</span> <span class=\"string\">install</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#before_script:</span></span><br><span class=\"line\"><span class=\"comment\"># - npm install -g gulp</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">hexo</span> <span class=\"string\">g</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">after_script:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">cd</span> <span class=\"string\">./public</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">init</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.name</span> <span class=\"string\">\"@Github用户名@\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">config</span> <span class=\"string\">user.email</span> <span class=\"string\">\"@Github邮箱@\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">add</span> <span class=\"string\">.</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">commit</span> <span class=\"bullet\">-m</span> <span class=\"string\">\"Update docs\"</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"string\">git</span> <span class=\"string\">push</span> <span class=\"bullet\">--force</span> <span class=\"bullet\">--quiet</span> <span class=\"string\">\"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;\"</span> <span class=\"attr\">master:master</span></span><br><span class=\"line\"><span class=\"comment\"># E: Build LifeCycle</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">branches:</span></span><br><span class=\"line\"><span class=\"attr\">only:</span></span><br><span class=\"line\"><span class=\"bullet\">    -</span> <span class=\"string\">@创建的分支@</span></span><br><span class=\"line\"><span class=\"attr\">env:</span></span><br><span class=\"line\"><span class=\"attr\">global:</span></span><br><span class=\"line\"><span class=\"attr\">- GH_REF:</span> <span class=\"string\">@项目地址@</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ul>\n<li>使用方法即普通的Git add-&gt;commit-&gt;push 一套Combo，Travis检测到变动会通过trvais.yml编译并提交到master里，Token已经给了Travis写入权限了。</li>\n</ul>\n<h2 id=\"最后结果\"><a href=\"#最后结果\" class=\"headerlink\" title=\"最后结果\"></a>最后结果</h2><p>最后你会在GitHubPage的仓库里看到master分支和创建的hexo项目分支，其中hexo项目分支是自己手动git push上去的，而master分支即展示在GitHubPage上的静态页面是Travis编译完成并push的。</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://www.2cto.com/kf/201605/505702.html\" target=\"_blank\" rel=\"noopener\"></a></p>\n"},{"title":"Centos下防火墙+ss多端口脚本","date":"2019-02-09T18:40:31.000Z","_content":"# 目的\n\n开启SS之后，添加多端口再去打开防火墙比较麻烦，做了一个一键脚本。\n\n## 代码\n\n### 简易，不带Shadowsocks安装检查\n\n``` bash\n#!/bin/sh\nmethod=\"aes-256-cfb\"\nmup=\"6001\"\nlog=\"./add.log\"\n\necho -e -n \"add: {\\\"server_port\\\": $1, \\\"password\\\":\\\"$2\\\"}\" > /dev/udp/127.0.0.1/$mup\n\ntcp=$(firewall-cmd --zone=public --add-port=$1/tcp --permanent)\necho \"TCP端口 $1 开放操作: $tcp\"\n\nudp=$(firewall-cmd --zone=public --add-port=$1/udp --permanent)\necho \"udp端口 $1 开放操作: $udp\"\n\nrel=$(firewall-cmd --reload)\necho \"防火墙重启操作: $rel\"\n\necho \"IP:$(curl ipinfo.io/ip) 端口:$1 密码:$2\"\n\nif [ ! -f \"$log\" ]; then\n\n    echo -e -n \"\\\"$1\\\":\\\"$2\\\"\" >> add.log\n\nelse\n\n    echo -e -n \",\\n\\\"$1\\\":\\\"$2\\\"\" >> add.log\n\nfi\n\n# base64链接\nlink=$( base64 <<< \"$method:$2@$(get_ip):$1\" )\n\necho \"ss://$link\"\n```\n\n其中获得IP的函数，依赖curl，需要能够访问两个网站：\n'ipinfo.io'\n和\n'ipv4.icanhazip.com'\n\n``` bash\nget_ip(){\n  IP = $(curl ipinfo.io/ip)\n  echo ${IP}\n}\n```\n\n或\n\n``` bash\nget_ip(){\n  IP = $(curl ipv4.icanhazip.com)\n  echo ${IP}\n}\n```\n\n通过查看本地网络连接信息的方式也可，用正则表达式筛选\n\n``` bash\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    echo ${IP}\n}\n```\n\n### 带安装检查\n\n``` bash\n#!/bin/sh\n\n# 一些常量\nmethod=\"aes-256-cfb\"\nmup=\"6001\"\nlog=\"./add.log\"\n\ninstall_sth(){\n    source /etc/os-release\n    case $ID in\n        debian|ubuntu|devuan)\n            apt-get install -y $1\n            ;;\n        centos|fedora|rhel)\n            yum install -y $1\n            ;;\n        *)\n            exit 1\n            ;;\n    esac\n}\n\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    echo ${IP}\n}\n\nadd_port(){\n    echo -e -n \"add: {\\\"server_port\\\": $1, \\\"password\\\":\\\"$2\\\"}\" > /dev/udp/127.0.0.1/$mup\n    tcp=$(firewall-cmd --zone=public --add-port=$1/tcp --permanent)\n    echo \"TCP端口 $1 开放操作: $tcp\"\n\n    udp=$(firewall-cmd --zone=public --add-port=$1/udp --permanent)\n    echo \"udp端口 $1 开放操作: $udp\"\n\n    rel=$(firewall-cmd --reload)\n    echo \"防火墙重启操作: $rel\"\n\n    echo \"IP:$(get_ip) 端口:$1 密码:$2\"\n\n    # base64链接\n    link=$( base64 <<< \"$method:$2@$(get_ip):$1\" )\n\n    echo \"ss://$link\"\n}\n\nstart_check(){\n    process=`ps aux | grep ssserver | grep -v grep`;\n    if [ \"$process\" == \"\" ]; then\n        echo \"Shaodwsock is not running\"\n        ssserver -p 443 -k bean -m aes-256-cfb --manager-address 127.0.0.1:6001 -d start\n        firewall-cmd --zone=public --add-port=443/tcp --permanent\n        firewall-cmd --zone=public --add-port=443/udp --permanent\n        firewall-cmd --reload\n        if [ -f \"$log\" ]; then\n            for line in `cat $log`\n                do\n                line=$(echo $line | tr -d \"\\\"\")\n                por=${line%:*}\n                pwd=${line#*:}\n                add_port $por $pwd\n                echo \"port:$por,pwd:$pwd\"\n            done\n        fi\n    else\n        echo \"Shaodwsock is running\"\n    fi\n}\n\n\nif ! [ -x \"$(command -v pip)\" ]; then\n  echo 'Python-pip is not installed.'\n  install_sth epel-release >&1\n  install_sth python-pip >&1\nfi\n\nif ! [ -x \"$(command -v ssserver)\" ]; then\n  echo 'Shadowsocks is not installed.'\n  pip install shadowsocks\nfi\n\nstart_check\n\nif [ -n \"$1\" ]; then\n    echo \"Add new $2@$1\"\n    add_port $1 $2\n    echo -e \"\\\"$1\\\":\\\"$2\\\"\" >> add.log\nelse\n    echo \"No port to Add\"\n\nfi\n```\n\n### 一键安装\n\n    wget --no-check-certificate https://raw.githubusercontent.com/BeanYa/OneScript/master/plane.sh && bash plane.sh","source":"_posts/2019-02-10-Centos下防火墙-ss多端口脚本.md","raw":"---\ntitle: Centos下防火墙+ss多端口脚本\ndate: 2019-02-10 02:40:31\ncategories:\n- Linux\ntags:\n- Linux\n- Note\n---\n# 目的\n\n开启SS之后，添加多端口再去打开防火墙比较麻烦，做了一个一键脚本。\n\n## 代码\n\n### 简易，不带Shadowsocks安装检查\n\n``` bash\n#!/bin/sh\nmethod=\"aes-256-cfb\"\nmup=\"6001\"\nlog=\"./add.log\"\n\necho -e -n \"add: {\\\"server_port\\\": $1, \\\"password\\\":\\\"$2\\\"}\" > /dev/udp/127.0.0.1/$mup\n\ntcp=$(firewall-cmd --zone=public --add-port=$1/tcp --permanent)\necho \"TCP端口 $1 开放操作: $tcp\"\n\nudp=$(firewall-cmd --zone=public --add-port=$1/udp --permanent)\necho \"udp端口 $1 开放操作: $udp\"\n\nrel=$(firewall-cmd --reload)\necho \"防火墙重启操作: $rel\"\n\necho \"IP:$(curl ipinfo.io/ip) 端口:$1 密码:$2\"\n\nif [ ! -f \"$log\" ]; then\n\n    echo -e -n \"\\\"$1\\\":\\\"$2\\\"\" >> add.log\n\nelse\n\n    echo -e -n \",\\n\\\"$1\\\":\\\"$2\\\"\" >> add.log\n\nfi\n\n# base64链接\nlink=$( base64 <<< \"$method:$2@$(get_ip):$1\" )\n\necho \"ss://$link\"\n```\n\n其中获得IP的函数，依赖curl，需要能够访问两个网站：\n'ipinfo.io'\n和\n'ipv4.icanhazip.com'\n\n``` bash\nget_ip(){\n  IP = $(curl ipinfo.io/ip)\n  echo ${IP}\n}\n```\n\n或\n\n``` bash\nget_ip(){\n  IP = $(curl ipv4.icanhazip.com)\n  echo ${IP}\n}\n```\n\n通过查看本地网络连接信息的方式也可，用正则表达式筛选\n\n``` bash\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    echo ${IP}\n}\n```\n\n### 带安装检查\n\n``` bash\n#!/bin/sh\n\n# 一些常量\nmethod=\"aes-256-cfb\"\nmup=\"6001\"\nlog=\"./add.log\"\n\ninstall_sth(){\n    source /etc/os-release\n    case $ID in\n        debian|ubuntu|devuan)\n            apt-get install -y $1\n            ;;\n        centos|fedora|rhel)\n            yum install -y $1\n            ;;\n        *)\n            exit 1\n            ;;\n    esac\n}\n\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    echo ${IP}\n}\n\nadd_port(){\n    echo -e -n \"add: {\\\"server_port\\\": $1, \\\"password\\\":\\\"$2\\\"}\" > /dev/udp/127.0.0.1/$mup\n    tcp=$(firewall-cmd --zone=public --add-port=$1/tcp --permanent)\n    echo \"TCP端口 $1 开放操作: $tcp\"\n\n    udp=$(firewall-cmd --zone=public --add-port=$1/udp --permanent)\n    echo \"udp端口 $1 开放操作: $udp\"\n\n    rel=$(firewall-cmd --reload)\n    echo \"防火墙重启操作: $rel\"\n\n    echo \"IP:$(get_ip) 端口:$1 密码:$2\"\n\n    # base64链接\n    link=$( base64 <<< \"$method:$2@$(get_ip):$1\" )\n\n    echo \"ss://$link\"\n}\n\nstart_check(){\n    process=`ps aux | grep ssserver | grep -v grep`;\n    if [ \"$process\" == \"\" ]; then\n        echo \"Shaodwsock is not running\"\n        ssserver -p 443 -k bean -m aes-256-cfb --manager-address 127.0.0.1:6001 -d start\n        firewall-cmd --zone=public --add-port=443/tcp --permanent\n        firewall-cmd --zone=public --add-port=443/udp --permanent\n        firewall-cmd --reload\n        if [ -f \"$log\" ]; then\n            for line in `cat $log`\n                do\n                line=$(echo $line | tr -d \"\\\"\")\n                por=${line%:*}\n                pwd=${line#*:}\n                add_port $por $pwd\n                echo \"port:$por,pwd:$pwd\"\n            done\n        fi\n    else\n        echo \"Shaodwsock is running\"\n    fi\n}\n\n\nif ! [ -x \"$(command -v pip)\" ]; then\n  echo 'Python-pip is not installed.'\n  install_sth epel-release >&1\n  install_sth python-pip >&1\nfi\n\nif ! [ -x \"$(command -v ssserver)\" ]; then\n  echo 'Shadowsocks is not installed.'\n  pip install shadowsocks\nfi\n\nstart_check\n\nif [ -n \"$1\" ]; then\n    echo \"Add new $2@$1\"\n    add_port $1 $2\n    echo -e \"\\\"$1\\\":\\\"$2\\\"\" >> add.log\nelse\n    echo \"No port to Add\"\n\nfi\n```\n\n### 一键安装\n\n    wget --no-check-certificate https://raw.githubusercontent.com/BeanYa/OneScript/master/plane.sh && bash plane.sh","slug":"Centos下防火墙-ss多端口脚本","published":1,"updated":"2021-02-13T16:06:58.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjapa0013cswgrxmkt3au","content":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>开启SS之后，添加多端口再去打开防火墙比较麻烦，做了一个一键脚本。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"简易，不带Shadowsocks安装检查\"><a href=\"#简易，不带Shadowsocks安装检查\" class=\"headerlink\" title=\"简易，不带Shadowsocks安装检查\"></a>简易，不带Shadowsocks安装检查</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">method=<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">mup=<span class=\"string\">\"6001\"</span></span><br><span class=\"line\"><span class=\"built_in\">log</span>=<span class=\"string\">\"./add.log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e -n <span class=\"string\">\"add: &#123;\\\"server_port\\\": <span class=\"variable\">$1</span>, \\\"password\\\":\\\"<span class=\"variable\">$2</span>\\\"&#125;\"</span> &gt; /dev/udp/127.0.0.1/<span class=\"variable\">$mup</span></span><br><span class=\"line\"></span><br><span class=\"line\">tcp=$(firewall-cmd --zone=public --add-port=<span class=\"variable\">$1</span>/tcp --permanent)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"TCP端口 <span class=\"variable\">$1</span> 开放操作: <span class=\"variable\">$tcp</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">udp=$(firewall-cmd --zone=public --add-port=<span class=\"variable\">$1</span>/udp --permanent)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"udp端口 <span class=\"variable\">$1</span> 开放操作: <span class=\"variable\">$udp</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">rel=$(firewall-cmd --reload)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"防火墙重启操作: <span class=\"variable\">$rel</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"IP:<span class=\"variable\">$(curl ipinfo.io/ip)</span> 端口:<span class=\"variable\">$1</span> 密码:<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -f <span class=\"string\">\"<span class=\"variable\">$log</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e -n <span class=\"string\">\"\\\"<span class=\"variable\">$1</span>\\\":\\\"<span class=\"variable\">$2</span>\\\"\"</span> &gt;&gt; add.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e -n <span class=\"string\">\",\\n\\\"<span class=\"variable\">$1</span>\\\":\\\"<span class=\"variable\">$2</span>\\\"\"</span> &gt;&gt; add.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># base64链接</span></span><br><span class=\"line\">link=$( base64 &lt;&lt;&lt; <span class=\"string\">\"<span class=\"variable\">$method</span>:<span class=\"variable\">$2</span>@<span class=\"variable\">$(get_ip)</span>:<span class=\"variable\">$1</span>\"</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"ss://<span class=\"variable\">$link</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>其中获得IP的函数，依赖curl，需要能够访问两个网站：<br>‘ipinfo.io’<br>和<br>‘ipv4.icanhazip.com’</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">get_ip</span></span>()&#123;</span><br><span class=\"line\">  IP = $(curl ipinfo.io/ip)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;IP&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">get_ip</span></span>()&#123;</span><br><span class=\"line\">  IP = $(curl ipv4.icanhazip.com)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;IP&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过查看本地网络连接信息的方式也可，用正则表达式筛选</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">get_ip</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> IP=$( ip addr | egrep -o <span class=\"string\">'[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;'</span> | egrep -v <span class=\"string\">\"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\"</span> | head -n 1 )</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;IP&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"带安装检查\"><a href=\"#带安装检查\" class=\"headerlink\" title=\"带安装检查\"></a>带安装检查</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一些常量</span></span><br><span class=\"line\">method=<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">mup=<span class=\"string\">\"6001\"</span></span><br><span class=\"line\"><span class=\"built_in\">log</span>=<span class=\"string\">\"./add.log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">install_sth</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">source</span> /etc/os-release</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$ID</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        debian|ubuntu|devuan)</span><br><span class=\"line\">            apt-get install -y <span class=\"variable\">$1</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        centos|fedora|rhel)</span><br><span class=\"line\">            yum install -y <span class=\"variable\">$1</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">get_ip</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> IP=$( ip addr | egrep -o <span class=\"string\">'[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;'</span> | egrep -v <span class=\"string\">\"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\"</span> | head -n 1 )</span><br><span class=\"line\">    [ -z <span class=\"variable\">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )</span><br><span class=\"line\">    [ -z <span class=\"variable\">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;IP&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_port</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e -n <span class=\"string\">\"add: &#123;\\\"server_port\\\": <span class=\"variable\">$1</span>, \\\"password\\\":\\\"<span class=\"variable\">$2</span>\\\"&#125;\"</span> &gt; /dev/udp/127.0.0.1/<span class=\"variable\">$mup</span></span><br><span class=\"line\">    tcp=$(firewall-cmd --zone=public --add-port=<span class=\"variable\">$1</span>/tcp --permanent)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"TCP端口 <span class=\"variable\">$1</span> 开放操作: <span class=\"variable\">$tcp</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    udp=$(firewall-cmd --zone=public --add-port=<span class=\"variable\">$1</span>/udp --permanent)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"udp端口 <span class=\"variable\">$1</span> 开放操作: <span class=\"variable\">$udp</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    rel=$(firewall-cmd --reload)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"防火墙重启操作: <span class=\"variable\">$rel</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"IP:<span class=\"variable\">$(get_ip)</span> 端口:<span class=\"variable\">$1</span> 密码:<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># base64链接</span></span><br><span class=\"line\">    link=$( base64 &lt;&lt;&lt; <span class=\"string\">\"<span class=\"variable\">$method</span>:<span class=\"variable\">$2</span>@<span class=\"variable\">$(get_ip)</span>:<span class=\"variable\">$1</span>\"</span> )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ss://<span class=\"variable\">$link</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start_check</span></span>()&#123;</span><br><span class=\"line\">    process=`ps aux | grep ssserver | grep -v grep`;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$process</span>\"</span> == <span class=\"string\">\"\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Shaodwsock is not running\"</span></span><br><span class=\"line\">        ssserver -p 443 -k bean -m aes-256-cfb --manager-address 127.0.0.1:6001 -d start</span><br><span class=\"line\">        firewall-cmd --zone=public --add-port=443/tcp --permanent</span><br><span class=\"line\">        firewall-cmd --zone=public --add-port=443/udp --permanent</span><br><span class=\"line\">        firewall-cmd --reload</span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$log</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> `cat <span class=\"variable\">$log</span>`</span><br><span class=\"line\">                <span class=\"keyword\">do</span></span><br><span class=\"line\">                line=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$line</span> | tr -d <span class=\"string\">\"\\\"\"</span>)</span><br><span class=\"line\">                por=<span class=\"variable\">$&#123;line%:*&#125;</span></span><br><span class=\"line\">                <span class=\"built_in\">pwd</span>=<span class=\"variable\">$&#123;line#*:&#125;</span></span><br><span class=\"line\">                add_port <span class=\"variable\">$por</span> <span class=\"variable\">$pwd</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"port:<span class=\"variable\">$por</span>,pwd:<span class=\"variable\">$pwd</span>\"</span></span><br><span class=\"line\">            <span class=\"keyword\">done</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Shaodwsock is running\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ! [ -x <span class=\"string\">\"<span class=\"variable\">$(command -v pip)</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'Python-pip is not installed.'</span></span><br><span class=\"line\">  install_sth epel-release &gt;&amp;1</span><br><span class=\"line\">  install_sth python-pip &gt;&amp;1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ! [ -x <span class=\"string\">\"<span class=\"variable\">$(command -v ssserver)</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'Shadowsocks is not installed.'</span></span><br><span class=\"line\">  pip install shadowsocks</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">start_check</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Add new <span class=\"variable\">$2</span>@<span class=\"variable\">$1</span>\"</span></span><br><span class=\"line\">    add_port <span class=\"variable\">$1</span> <span class=\"variable\">$2</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\\"<span class=\"variable\">$1</span>\\\":\\\"<span class=\"variable\">$2</span>\\\"\"</span> &gt;&gt; add.log</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"No port to Add\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一键安装\"><a href=\"#一键安装\" class=\"headerlink\" title=\"一键安装\"></a>一键安装</h3><pre><code>wget --no-check-certificate https://raw.githubusercontent.com/BeanYa/OneScript/master/plane.sh &amp;&amp; bash plane.sh\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>开启SS之后，添加多端口再去打开防火墙比较麻烦，做了一个一键脚本。</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"简易，不带Shadowsocks安装检查\"><a href=\"#简易，不带Shadowsocks安装检查\" class=\"headerlink\" title=\"简易，不带Shadowsocks安装检查\"></a>简易，不带Shadowsocks安装检查</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\">method=<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">mup=<span class=\"string\">\"6001\"</span></span><br><span class=\"line\"><span class=\"built_in\">log</span>=<span class=\"string\">\"./add.log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -e -n <span class=\"string\">\"add: &#123;\\\"server_port\\\": <span class=\"variable\">$1</span>, \\\"password\\\":\\\"<span class=\"variable\">$2</span>\\\"&#125;\"</span> &gt; /dev/udp/127.0.0.1/<span class=\"variable\">$mup</span></span><br><span class=\"line\"></span><br><span class=\"line\">tcp=$(firewall-cmd --zone=public --add-port=<span class=\"variable\">$1</span>/tcp --permanent)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"TCP端口 <span class=\"variable\">$1</span> 开放操作: <span class=\"variable\">$tcp</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">udp=$(firewall-cmd --zone=public --add-port=<span class=\"variable\">$1</span>/udp --permanent)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"udp端口 <span class=\"variable\">$1</span> 开放操作: <span class=\"variable\">$udp</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">rel=$(firewall-cmd --reload)</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"防火墙重启操作: <span class=\"variable\">$rel</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"IP:<span class=\"variable\">$(curl ipinfo.io/ip)</span> 端口:<span class=\"variable\">$1</span> 密码:<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ ! -f <span class=\"string\">\"<span class=\"variable\">$log</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e -n <span class=\"string\">\"\\\"<span class=\"variable\">$1</span>\\\":\\\"<span class=\"variable\">$2</span>\\\"\"</span> &gt;&gt; add.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e -n <span class=\"string\">\",\\n\\\"<span class=\"variable\">$1</span>\\\":\\\"<span class=\"variable\">$2</span>\\\"\"</span> &gt;&gt; add.log</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># base64链接</span></span><br><span class=\"line\">link=$( base64 &lt;&lt;&lt; <span class=\"string\">\"<span class=\"variable\">$method</span>:<span class=\"variable\">$2</span>@<span class=\"variable\">$(get_ip)</span>:<span class=\"variable\">$1</span>\"</span> )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"ss://<span class=\"variable\">$link</span>\"</span></span><br></pre></td></tr></table></figure>\n<p>其中获得IP的函数，依赖curl，需要能够访问两个网站：<br>‘ipinfo.io’<br>和<br>‘ipv4.icanhazip.com’</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">get_ip</span></span>()&#123;</span><br><span class=\"line\">  IP = $(curl ipinfo.io/ip)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;IP&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>或</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">get_ip</span></span>()&#123;</span><br><span class=\"line\">  IP = $(curl ipv4.icanhazip.com)</span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;IP&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过查看本地网络连接信息的方式也可，用正则表达式筛选</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"title\">get_ip</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> IP=$( ip addr | egrep -o <span class=\"string\">'[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;'</span> | egrep -v <span class=\"string\">\"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\"</span> | head -n 1 )</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;IP&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"带安装检查\"><a href=\"#带安装检查\" class=\"headerlink\" title=\"带安装检查\"></a>带安装检查</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 一些常量</span></span><br><span class=\"line\">method=<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">mup=<span class=\"string\">\"6001\"</span></span><br><span class=\"line\"><span class=\"built_in\">log</span>=<span class=\"string\">\"./add.log\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">install_sth</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">source</span> /etc/os-release</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"variable\">$ID</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        debian|ubuntu|devuan)</span><br><span class=\"line\">            apt-get install -y <span class=\"variable\">$1</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        centos|fedora|rhel)</span><br><span class=\"line\">            yum install -y <span class=\"variable\">$1</span></span><br><span class=\"line\">            ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">get_ip</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> IP=$( ip addr | egrep -o <span class=\"string\">'[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;'</span> | egrep -v <span class=\"string\">\"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\"</span> | head -n 1 )</span><br><span class=\"line\">    [ -z <span class=\"variable\">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )</span><br><span class=\"line\">    [ -z <span class=\"variable\">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;IP&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">add_port</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e -n <span class=\"string\">\"add: &#123;\\\"server_port\\\": <span class=\"variable\">$1</span>, \\\"password\\\":\\\"<span class=\"variable\">$2</span>\\\"&#125;\"</span> &gt; /dev/udp/127.0.0.1/<span class=\"variable\">$mup</span></span><br><span class=\"line\">    tcp=$(firewall-cmd --zone=public --add-port=<span class=\"variable\">$1</span>/tcp --permanent)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"TCP端口 <span class=\"variable\">$1</span> 开放操作: <span class=\"variable\">$tcp</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    udp=$(firewall-cmd --zone=public --add-port=<span class=\"variable\">$1</span>/udp --permanent)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"udp端口 <span class=\"variable\">$1</span> 开放操作: <span class=\"variable\">$udp</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    rel=$(firewall-cmd --reload)</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"防火墙重启操作: <span class=\"variable\">$rel</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"IP:<span class=\"variable\">$(get_ip)</span> 端口:<span class=\"variable\">$1</span> 密码:<span class=\"variable\">$2</span>\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># base64链接</span></span><br><span class=\"line\">    link=$( base64 &lt;&lt;&lt; <span class=\"string\">\"<span class=\"variable\">$method</span>:<span class=\"variable\">$2</span>@<span class=\"variable\">$(get_ip)</span>:<span class=\"variable\">$1</span>\"</span> )</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"ss://<span class=\"variable\">$link</span>\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">start_check</span></span>()&#123;</span><br><span class=\"line\">    process=`ps aux | grep ssserver | grep -v grep`;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"string\">\"<span class=\"variable\">$process</span>\"</span> == <span class=\"string\">\"\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Shaodwsock is not running\"</span></span><br><span class=\"line\">        ssserver -p 443 -k bean -m aes-256-cfb --manager-address 127.0.0.1:6001 -d start</span><br><span class=\"line\">        firewall-cmd --zone=public --add-port=443/tcp --permanent</span><br><span class=\"line\">        firewall-cmd --zone=public --add-port=443/udp --permanent</span><br><span class=\"line\">        firewall-cmd --reload</span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ -f <span class=\"string\">\"<span class=\"variable\">$log</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> `cat <span class=\"variable\">$log</span>`</span><br><span class=\"line\">                <span class=\"keyword\">do</span></span><br><span class=\"line\">                line=$(<span class=\"built_in\">echo</span> <span class=\"variable\">$line</span> | tr -d <span class=\"string\">\"\\\"\"</span>)</span><br><span class=\"line\">                por=<span class=\"variable\">$&#123;line%:*&#125;</span></span><br><span class=\"line\">                <span class=\"built_in\">pwd</span>=<span class=\"variable\">$&#123;line#*:&#125;</span></span><br><span class=\"line\">                add_port <span class=\"variable\">$por</span> <span class=\"variable\">$pwd</span></span><br><span class=\"line\">                <span class=\"built_in\">echo</span> <span class=\"string\">\"port:<span class=\"variable\">$por</span>,pwd:<span class=\"variable\">$pwd</span>\"</span></span><br><span class=\"line\">            <span class=\"keyword\">done</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Shaodwsock is running\"</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ! [ -x <span class=\"string\">\"<span class=\"variable\">$(command -v pip)</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'Python-pip is not installed.'</span></span><br><span class=\"line\">  install_sth epel-release &gt;&amp;1</span><br><span class=\"line\">  install_sth python-pip &gt;&amp;1</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> ! [ -x <span class=\"string\">\"<span class=\"variable\">$(command -v ssserver)</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">echo</span> <span class=\"string\">'Shadowsocks is not installed.'</span></span><br><span class=\"line\">  pip install shadowsocks</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">start_check</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> [ -n <span class=\"string\">\"<span class=\"variable\">$1</span>\"</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"Add new <span class=\"variable\">$2</span>@<span class=\"variable\">$1</span>\"</span></span><br><span class=\"line\">    add_port <span class=\"variable\">$1</span> <span class=\"variable\">$2</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> -e <span class=\"string\">\"\\\"<span class=\"variable\">$1</span>\\\":\\\"<span class=\"variable\">$2</span>\\\"\"</span> &gt;&gt; add.log</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"string\">\"No port to Add\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"一键安装\"><a href=\"#一键安装\" class=\"headerlink\" title=\"一键安装\"></a>一键安装</h3><pre><code>wget --no-check-certificate https://raw.githubusercontent.com/BeanYa/OneScript/master/plane.sh &amp;&amp; bash plane.sh\n</code></pre>"},{"title":"查询本机IP","date":"2019-02-09T18:47:47.000Z","_content":"# 目的\n\n运行Bash脚本得到本机IP\n\n## 代码\n\n``` bash\n#!/bin/sh\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    echo ${IP}\n}\n\necho $(get_ip)\n```\n","source":"_posts/2019-02-10-查询本机IP.md","raw":"---\ntitle: 查询本机IP\ndate: 2019-02-10 02:47:47\ncategories:\n- Linux\ntags:\n- Linux\n- Note\n---\n# 目的\n\n运行Bash脚本得到本机IP\n\n## 代码\n\n``` bash\n#!/bin/sh\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    echo ${IP}\n}\n\necho $(get_ip)\n```\n","slug":"查询本机IP","published":1,"updated":"2021-02-13T16:06:58.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjapc0017cswgng07aur4","content":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>运行Bash脚本得到本机IP</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">get_ip</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> IP=$( ip addr | egrep -o <span class=\"string\">'[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;'</span> | egrep -v <span class=\"string\">\"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\"</span> | head -n 1 )</span><br><span class=\"line\">    [ -z <span class=\"variable\">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )</span><br><span class=\"line\">    [ -z <span class=\"variable\">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;IP&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(get_ip)</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>运行Bash脚本得到本机IP</p>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/sh</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">get_ip</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">local</span> IP=$( ip addr | egrep -o <span class=\"string\">'[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;\\.[0-9]&#123;1,3&#125;'</span> | egrep -v <span class=\"string\">\"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\"</span> | head -n 1 )</span><br><span class=\"line\">    [ -z <span class=\"variable\">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )</span><br><span class=\"line\">    [ -z <span class=\"variable\">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> <span class=\"variable\">$&#123;IP&#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> $(get_ip)</span><br></pre></td></tr></table></figure>\n"},{"title":"Deploy Demo","date":"2021-02-12T16:00:00.000Z","_content":"\n# Test For Github Action Deploy\n\nTest\n","source":"_posts/2021-02-13-GHAction-Demo.md","raw":"---\ntitle: Deploy Demo\ncategories:\n  - Python\ntags:\n  - Python\n  - Note\ndate: 2021-02-13 00:00:00\n---\n\n# Test For Github Action Deploy\n\nTest\n","slug":"GHAction-Demo","published":1,"updated":"2021-02-13T16:06:58.332Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjape001bcswg4n6i994n","content":"<h1 id=\"Test-For-Github-Action-Deploy\"><a href=\"#Test-For-Github-Action-Deploy\" class=\"headerlink\" title=\"Test For Github Action Deploy\"></a>Test For Github Action Deploy</h1><p>Test</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Test-For-Github-Action-Deploy\"><a href=\"#Test-For-Github-Action-Deploy\" class=\"headerlink\" title=\"Test For Github Action Deploy\"></a>Test For Github Action Deploy</h1><p>Test</p>\n"},{"title":"排序算法笔记","date":"2018-10-31T06:20:52.000Z","_content":"# 排序是什么\n\n将无序的集合通过一定的算法处理，得到一个有序集合。\n\n# 常见的排序算法\n\n按难度（个人）分：\n\n- 基础\n    - [冒泡排序](#冒泡排序)\n    - [选择排序](#选择排序)\n- 一定难度\n    - [归并排序](#归并排序)\n    - [原地归并排序](#原地归并排序)\n    - [桶排序](#桶排序)\n    - [二叉排序树](#二叉排序树)\n    - [快速排序](#快速排序)\n    - [堆排序](#堆排序)\n    - [希尔排序](#希尔排序)\n\n## 冒泡排序\n\n### 描述\n\nBubble Sort 冒泡排序\n它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n### 原理/过程\n\n1. 比较相邻的两个元素（一对），如果顺序不符合要求（升序或降序），则调换顺序。\n2. 对每一对元素重复1的操作，即从第一对到最后一对，最后一个元素将会是最大的元素。\n3. 持续对上一步操作后少一个元素的集合重复1,2的操作(即每次循环排除最后一个元素的集合),直到没有元素\n\n### 时间复杂度\n\n算法可以实现原地排序，但是需要嵌套循环集合，效率较低\n\n在上步的2中有一个关于n的循环,3中也有一个\n\n可知时间复杂度 $ O(n^2) $\n\n### 代码实现\n\n``` csharp BubbleSort\npublic class BubbleSort{\n    public static void Sort(int[] arr){\n        //获得数组长度\n        int n = arr.getLength(0);\n        //进行n次,每一次的处理长度都减1\n        for(int i = 0;i < n;i++){\n            //处理每次相邻比较\n            for(int j = 0;j < n - i - 1;j++){\n                //如果前一个元素大于后一个元素，不符合升序\n                //交换前后元素\n                if(arr[j] > arr[j + 1]){\n                    int tmp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = tmp;\n                }\n            }\n        }\n    }\n}\n```\n\n## 选择排序\n\n与冒泡相似，都是每次循环中，从$1\\rightarrow n$中选出最大（或最小的）放在 $n$ 上，$n$递减并重复之前的操作。\n\n### 原理/过程\n\n1. 从未排序的集合中，找到最小（大）的元素，放在序列的最起始（末尾）位置\n2. 最起始（末尾）的以前（以后）的元素有序，重复操作未排序的集合，直到所有元素排序完毕。\n\n### 时间复杂度\n\n与冒泡相似，都是选择极值放置到相应的序列位置上。\n相比冒泡的相邻比较，可能每次比较都会发生交换。\n复杂度依旧集中在一个两层循环中，简单可得复杂度：$$O(n^2)$$\n\n### 代码实现\n\n``` csharp SelectSort\npublic class SelectSort{\n    public static void Sort(int[] arr){\n        //获得数组长度\n        int n = arr.getLength(0);\n        //第n次选择，或已有n个元素排序完成\n        for(int i = 0;i < n;i++){\n            int k = i;\n            for(int j = 0;j < n - 1 - i;j++){\n                if(arr[j] < arr[k])\n                    k = j;\n            }\n            //swap\n            int tmp = arr[k];\n            arr[k] = arr[i];\n            arr[i] = tmp;\n        }\n    }\n}\n```\n\n## 快速排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n<!-- ## 归并排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 原地归并排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 桶排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 二叉排序树\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 堆排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 希尔排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现 -->\n","source":"_posts/Algorithm/2018-10-31-Sort.md","raw":"---\ntitle: 排序算法笔记\ndate: 2018-10-31 14:20:52\ncategories:\n- Algorithm\ntags:\n- Algorithm\n- Sort\n- Note\n---\n# 排序是什么\n\n将无序的集合通过一定的算法处理，得到一个有序集合。\n\n# 常见的排序算法\n\n按难度（个人）分：\n\n- 基础\n    - [冒泡排序](#冒泡排序)\n    - [选择排序](#选择排序)\n- 一定难度\n    - [归并排序](#归并排序)\n    - [原地归并排序](#原地归并排序)\n    - [桶排序](#桶排序)\n    - [二叉排序树](#二叉排序树)\n    - [快速排序](#快速排序)\n    - [堆排序](#堆排序)\n    - [希尔排序](#希尔排序)\n\n## 冒泡排序\n\n### 描述\n\nBubble Sort 冒泡排序\n它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。\n\n### 原理/过程\n\n1. 比较相邻的两个元素（一对），如果顺序不符合要求（升序或降序），则调换顺序。\n2. 对每一对元素重复1的操作，即从第一对到最后一对，最后一个元素将会是最大的元素。\n3. 持续对上一步操作后少一个元素的集合重复1,2的操作(即每次循环排除最后一个元素的集合),直到没有元素\n\n### 时间复杂度\n\n算法可以实现原地排序，但是需要嵌套循环集合，效率较低\n\n在上步的2中有一个关于n的循环,3中也有一个\n\n可知时间复杂度 $ O(n^2) $\n\n### 代码实现\n\n``` csharp BubbleSort\npublic class BubbleSort{\n    public static void Sort(int[] arr){\n        //获得数组长度\n        int n = arr.getLength(0);\n        //进行n次,每一次的处理长度都减1\n        for(int i = 0;i < n;i++){\n            //处理每次相邻比较\n            for(int j = 0;j < n - i - 1;j++){\n                //如果前一个元素大于后一个元素，不符合升序\n                //交换前后元素\n                if(arr[j] > arr[j + 1]){\n                    int tmp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = tmp;\n                }\n            }\n        }\n    }\n}\n```\n\n## 选择排序\n\n与冒泡相似，都是每次循环中，从$1\\rightarrow n$中选出最大（或最小的）放在 $n$ 上，$n$递减并重复之前的操作。\n\n### 原理/过程\n\n1. 从未排序的集合中，找到最小（大）的元素，放在序列的最起始（末尾）位置\n2. 最起始（末尾）的以前（以后）的元素有序，重复操作未排序的集合，直到所有元素排序完毕。\n\n### 时间复杂度\n\n与冒泡相似，都是选择极值放置到相应的序列位置上。\n相比冒泡的相邻比较，可能每次比较都会发生交换。\n复杂度依旧集中在一个两层循环中，简单可得复杂度：$$O(n^2)$$\n\n### 代码实现\n\n``` csharp SelectSort\npublic class SelectSort{\n    public static void Sort(int[] arr){\n        //获得数组长度\n        int n = arr.getLength(0);\n        //第n次选择，或已有n个元素排序完成\n        for(int i = 0;i < n;i++){\n            int k = i;\n            for(int j = 0;j < n - 1 - i;j++){\n                if(arr[j] < arr[k])\n                    k = j;\n            }\n            //swap\n            int tmp = arr[k];\n            arr[k] = arr[i];\n            arr[i] = tmp;\n        }\n    }\n}\n```\n\n## 快速排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n<!-- ## 归并排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 原地归并排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 桶排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 二叉排序树\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 堆排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 希尔排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现 -->\n","slug":"Algorithm-2018-10-31-Sort","published":1,"updated":"2021-02-13T16:06:58.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjapy002jcswgkuppeoe4","content":"<h1 id=\"排序是什么\"><a href=\"#排序是什么\" class=\"headerlink\" title=\"排序是什么\"></a>排序是什么</h1><p>将无序的集合通过一定的算法处理，得到一个有序集合。</p>\n<h1 id=\"常见的排序算法\"><a href=\"#常见的排序算法\" class=\"headerlink\" title=\"常见的排序算法\"></a>常见的排序算法</h1><p>按难度（个人）分：</p>\n<ul>\n<li>基础<ul>\n<li><a href=\"#冒泡排序\">冒泡排序</a></li>\n<li><a href=\"#选择排序\">选择排序</a></li>\n</ul>\n</li>\n<li>一定难度<ul>\n<li><a href=\"#归并排序\">归并排序</a></li>\n<li><a href=\"#原地归并排序\">原地归并排序</a></li>\n<li><a href=\"#桶排序\">桶排序</a></li>\n<li><a href=\"#二叉排序树\">二叉排序树</a></li>\n<li><a href=\"#快速排序\">快速排序</a></li>\n<li><a href=\"#堆排序\">堆排序</a></li>\n<li><a href=\"#希尔排序\">希尔排序</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Bubble Sort 冒泡排序<br>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<h3 id=\"原理-过程\"><a href=\"#原理-过程\" class=\"headerlink\" title=\"原理/过程\"></a>原理/过程</h3><ol>\n<li>比较相邻的两个元素（一对），如果顺序不符合要求（升序或降序），则调换顺序。</li>\n<li>对每一对元素重复1的操作，即从第一对到最后一对，最后一个元素将会是最大的元素。</li>\n<li>持续对上一步操作后少一个元素的集合重复1,2的操作(即每次循环排除最后一个元素的集合),直到没有元素</li>\n</ol>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>算法可以实现原地排序，但是需要嵌套循环集合，效率较低</p>\n<p>在上步的2中有一个关于n的循环,3中也有一个</p>\n<p>可知时间复杂度 $ O(n^2) $</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight csharp\"><figcaption><span>BubbleSort</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BubbleSort</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Sort</span>(<span class=\"params\"><span class=\"keyword\">int</span>[] arr</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得数组长度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = arr.getLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//进行n次,每一次的处理长度都减1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//处理每次相邻比较</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; n - i - <span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果前一个元素大于后一个元素，不符合升序</span></span><br><span class=\"line\">                <span class=\"comment\">//交换前后元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[j] &gt; arr[j + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tmp = arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>与冒泡相似，都是每次循环中，从$1\\rightarrow n$中选出最大（或最小的）放在 $n$ 上，$n$递减并重复之前的操作。</p>\n<h3 id=\"原理-过程-1\"><a href=\"#原理-过程-1\" class=\"headerlink\" title=\"原理/过程\"></a>原理/过程</h3><ol>\n<li>从未排序的集合中，找到最小（大）的元素，放在序列的最起始（末尾）位置</li>\n<li>最起始（末尾）的以前（以后）的元素有序，重复操作未排序的集合，直到所有元素排序完毕。</li>\n</ol>\n<h3 id=\"时间复杂度-1\"><a href=\"#时间复杂度-1\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>与冒泡相似，都是选择极值放置到相应的序列位置上。<br>相比冒泡的相邻比较，可能每次比较都会发生交换。<br>复杂度依旧集中在一个两层循环中，简单可得复杂度：<script type=\"math/tex\">O(n^2)</script></p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight csharp\"><figcaption><span>SelectSort</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SelectSort</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Sort</span>(<span class=\"params\"><span class=\"keyword\">int</span>[] arr</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得数组长度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = arr.getLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//第n次选择，或已有n个元素排序完成</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; n - <span class=\"number\">1</span> - i;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[j] &lt; arr[k])</span><br><span class=\"line\">                    k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//swap</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = arr[k];</span><br><span class=\"line\">            arr[k] = arr[i];</span><br><span class=\"line\">            arr[i] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"原理-过程-2\"><a href=\"#原理-过程-2\" class=\"headerlink\" title=\"原理/过程\"></a>原理/过程</h3><h3 id=\"时间复杂度-2\"><a href=\"#时间复杂度-2\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><!-- ## 归并排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 原地归并排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 桶排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 二叉排序树\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 堆排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 希尔排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现 -->\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"排序是什么\"><a href=\"#排序是什么\" class=\"headerlink\" title=\"排序是什么\"></a>排序是什么</h1><p>将无序的集合通过一定的算法处理，得到一个有序集合。</p>\n<h1 id=\"常见的排序算法\"><a href=\"#常见的排序算法\" class=\"headerlink\" title=\"常见的排序算法\"></a>常见的排序算法</h1><p>按难度（个人）分：</p>\n<ul>\n<li>基础<ul>\n<li><a href=\"#冒泡排序\">冒泡排序</a></li>\n<li><a href=\"#选择排序\">选择排序</a></li>\n</ul>\n</li>\n<li>一定难度<ul>\n<li><a href=\"#归并排序\">归并排序</a></li>\n<li><a href=\"#原地归并排序\">原地归并排序</a></li>\n<li><a href=\"#桶排序\">桶排序</a></li>\n<li><a href=\"#二叉排序树\">二叉排序树</a></li>\n<li><a href=\"#快速排序\">快速排序</a></li>\n<li><a href=\"#堆排序\">堆排序</a></li>\n<li><a href=\"#希尔排序\">希尔排序</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><h3 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h3><p>Bubble Sort 冒泡排序<br>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>\n<h3 id=\"原理-过程\"><a href=\"#原理-过程\" class=\"headerlink\" title=\"原理/过程\"></a>原理/过程</h3><ol>\n<li>比较相邻的两个元素（一对），如果顺序不符合要求（升序或降序），则调换顺序。</li>\n<li>对每一对元素重复1的操作，即从第一对到最后一对，最后一个元素将会是最大的元素。</li>\n<li>持续对上一步操作后少一个元素的集合重复1,2的操作(即每次循环排除最后一个元素的集合),直到没有元素</li>\n</ol>\n<h3 id=\"时间复杂度\"><a href=\"#时间复杂度\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>算法可以实现原地排序，但是需要嵌套循环集合，效率较低</p>\n<p>在上步的2中有一个关于n的循环,3中也有一个</p>\n<p>可知时间复杂度 $ O(n^2) $</p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight csharp\"><figcaption><span>BubbleSort</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">BubbleSort</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Sort</span>(<span class=\"params\"><span class=\"keyword\">int</span>[] arr</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得数组长度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = arr.getLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//进行n次,每一次的处理长度都减1</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//处理每次相邻比较</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; n - i - <span class=\"number\">1</span>;j++)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//如果前一个元素大于后一个元素，不符合升序</span></span><br><span class=\"line\">                <span class=\"comment\">//交换前后元素</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[j] &gt; arr[j + <span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> tmp = arr[j];</span><br><span class=\"line\">                    arr[j] = arr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">                    arr[j + <span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>与冒泡相似，都是每次循环中，从$1\\rightarrow n$中选出最大（或最小的）放在 $n$ 上，$n$递减并重复之前的操作。</p>\n<h3 id=\"原理-过程-1\"><a href=\"#原理-过程-1\" class=\"headerlink\" title=\"原理/过程\"></a>原理/过程</h3><ol>\n<li>从未排序的集合中，找到最小（大）的元素，放在序列的最起始（末尾）位置</li>\n<li>最起始（末尾）的以前（以后）的元素有序，重复操作未排序的集合，直到所有元素排序完毕。</li>\n</ol>\n<h3 id=\"时间复杂度-1\"><a href=\"#时间复杂度-1\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><p>与冒泡相似，都是选择极值放置到相应的序列位置上。<br>相比冒泡的相邻比较，可能每次比较都会发生交换。<br>复杂度依旧集中在一个两层循环中，简单可得复杂度：<script type=\"math/tex\">O(n^2)</script></p>\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight csharp\"><figcaption><span>SelectSort</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">SelectSort</span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Sort</span>(<span class=\"params\"><span class=\"keyword\">int</span>[] arr</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得数组长度</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> n = arr.getLength(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"comment\">//第n次选择，或已有n个元素排序完成</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;i &lt; n;i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> k = i;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;j &lt; n - <span class=\"number\">1</span> - i;j++)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(arr[j] &lt; arr[k])</span><br><span class=\"line\">                    k = j;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//swap</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> tmp = arr[k];</span><br><span class=\"line\">            arr[k] = arr[i];</span><br><span class=\"line\">            arr[i] = tmp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><h3 id=\"原理-过程-2\"><a href=\"#原理-过程-2\" class=\"headerlink\" title=\"原理/过程\"></a>原理/过程</h3><h3 id=\"时间复杂度-2\"><a href=\"#时间复杂度-2\" class=\"headerlink\" title=\"时间复杂度\"></a>时间复杂度</h3><h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><!-- ## 归并排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 原地归并排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 桶排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 二叉排序树\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 堆排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现\n\n## 希尔排序\n\n### 原理/过程\n\n### 时间复杂度\n\n### 代码实现 -->\n"},{"title":"Marching Square","date":"2018-10-28T19:06:17.000Z","_content":"## Marching Squares 是什么\n\n- Marching Squares 是一种平面图形算法，用于生成平面上的图形轮廓。\n- 对应的，3D空间中的轮廓生成算法为Marching Cubes，将二维平面的Square，拓展至三维空间的Cube，过程类似但状态更多。\n\n## Marching Squares 原理\n\n- 将平面划分为一个正方形网格，每个网格称作一个Square，也即Wiki上提到的“图素”，每个Square拥有4个控制结点，分别是其四条边的交点，还拥有4个绘制结点，位于每条边中点，且一个控制结点又可被其他Square用作控制结点。（或者说网格上的每4个控制节点组成一个Square）\n\n- 每个控制结点带有权值，并定义一个与结点数组同样规模的布尔数组。（或在类中带有一个布尔值）\n- 算法开始时，定义一个阈值，遍历所有控制结点，并且将控制结点的权值与阈值比较，若大于阈值则对应位置的布尔值赋真（或相反）。\n- 一个结点在遍历完成后拥有两种状态，0或1，每个Square拥有4个结点，则2<sup>4</sup>=16共有16种状态，而在不同状态下连接对应的两个绘制结点，即完成了一个Square的轮廓生成过程。\n- 遍历所有的Square，也即算法名中的Marching，则完成了轮廓的绘制\n\n---\n## Wiki上Marching Squares的过程图\n\n![Marching Squares](https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Marching_squares_algorithm.svg/1065px-Marching_squares_algorithm.svg.png)\n\n---\n\n## 能用来干什么\n\n- 等高线生成\n- 我用于2D游戏的简单地形破坏生成（复杂的我不会）\n","source":"_posts/Algorithm/2018-10-29-Marching-Square.md","raw":"---\ntitle: Marching Square\ndate: 2018-10-29 03:06:17\ncategories:\ntags:\n---\n## Marching Squares 是什么\n\n- Marching Squares 是一种平面图形算法，用于生成平面上的图形轮廓。\n- 对应的，3D空间中的轮廓生成算法为Marching Cubes，将二维平面的Square，拓展至三维空间的Cube，过程类似但状态更多。\n\n## Marching Squares 原理\n\n- 将平面划分为一个正方形网格，每个网格称作一个Square，也即Wiki上提到的“图素”，每个Square拥有4个控制结点，分别是其四条边的交点，还拥有4个绘制结点，位于每条边中点，且一个控制结点又可被其他Square用作控制结点。（或者说网格上的每4个控制节点组成一个Square）\n\n- 每个控制结点带有权值，并定义一个与结点数组同样规模的布尔数组。（或在类中带有一个布尔值）\n- 算法开始时，定义一个阈值，遍历所有控制结点，并且将控制结点的权值与阈值比较，若大于阈值则对应位置的布尔值赋真（或相反）。\n- 一个结点在遍历完成后拥有两种状态，0或1，每个Square拥有4个结点，则2<sup>4</sup>=16共有16种状态，而在不同状态下连接对应的两个绘制结点，即完成了一个Square的轮廓生成过程。\n- 遍历所有的Square，也即算法名中的Marching，则完成了轮廓的绘制\n\n---\n## Wiki上Marching Squares的过程图\n\n![Marching Squares](https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Marching_squares_algorithm.svg/1065px-Marching_squares_algorithm.svg.png)\n\n---\n\n## 能用来干什么\n\n- 等高线生成\n- 我用于2D游戏的简单地形破坏生成（复杂的我不会）\n","slug":"Algorithm-2018-10-29-Marching-Square","published":1,"updated":"2021-02-13T16:06:58.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjapz002kcswgyx5lorio","content":"<h2 id=\"Marching-Squares-是什么\"><a href=\"#Marching-Squares-是什么\" class=\"headerlink\" title=\"Marching Squares 是什么\"></a>Marching Squares 是什么</h2><ul>\n<li>Marching Squares 是一种平面图形算法，用于生成平面上的图形轮廓。</li>\n<li>对应的，3D空间中的轮廓生成算法为Marching Cubes，将二维平面的Square，拓展至三维空间的Cube，过程类似但状态更多。</li>\n</ul>\n<h2 id=\"Marching-Squares-原理\"><a href=\"#Marching-Squares-原理\" class=\"headerlink\" title=\"Marching Squares 原理\"></a>Marching Squares 原理</h2><ul>\n<li><p>将平面划分为一个正方形网格，每个网格称作一个Square，也即Wiki上提到的“图素”，每个Square拥有4个控制结点，分别是其四条边的交点，还拥有4个绘制结点，位于每条边中点，且一个控制结点又可被其他Square用作控制结点。（或者说网格上的每4个控制节点组成一个Square）</p>\n</li>\n<li><p>每个控制结点带有权值，并定义一个与结点数组同样规模的布尔数组。（或在类中带有一个布尔值）</p>\n</li>\n<li>算法开始时，定义一个阈值，遍历所有控制结点，并且将控制结点的权值与阈值比较，若大于阈值则对应位置的布尔值赋真（或相反）。</li>\n<li>一个结点在遍历完成后拥有两种状态，0或1，每个Square拥有4个结点，则2<sup>4</sup>=16共有16种状态，而在不同状态下连接对应的两个绘制结点，即完成了一个Square的轮廓生成过程。</li>\n<li>遍历所有的Square，也即算法名中的Marching，则完成了轮廓的绘制</li>\n</ul>\n<hr>\n<h2 id=\"Wiki上Marching-Squares的过程图\"><a href=\"#Wiki上Marching-Squares的过程图\" class=\"headerlink\" title=\"Wiki上Marching Squares的过程图\"></a>Wiki上Marching Squares的过程图</h2><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Marching_squares_algorithm.svg/1065px-Marching_squares_algorithm.svg.png\" alt=\"Marching Squares\"></p>\n<hr>\n<h2 id=\"能用来干什么\"><a href=\"#能用来干什么\" class=\"headerlink\" title=\"能用来干什么\"></a>能用来干什么</h2><ul>\n<li>等高线生成</li>\n<li>我用于2D游戏的简单地形破坏生成（复杂的我不会）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Marching-Squares-是什么\"><a href=\"#Marching-Squares-是什么\" class=\"headerlink\" title=\"Marching Squares 是什么\"></a>Marching Squares 是什么</h2><ul>\n<li>Marching Squares 是一种平面图形算法，用于生成平面上的图形轮廓。</li>\n<li>对应的，3D空间中的轮廓生成算法为Marching Cubes，将二维平面的Square，拓展至三维空间的Cube，过程类似但状态更多。</li>\n</ul>\n<h2 id=\"Marching-Squares-原理\"><a href=\"#Marching-Squares-原理\" class=\"headerlink\" title=\"Marching Squares 原理\"></a>Marching Squares 原理</h2><ul>\n<li><p>将平面划分为一个正方形网格，每个网格称作一个Square，也即Wiki上提到的“图素”，每个Square拥有4个控制结点，分别是其四条边的交点，还拥有4个绘制结点，位于每条边中点，且一个控制结点又可被其他Square用作控制结点。（或者说网格上的每4个控制节点组成一个Square）</p>\n</li>\n<li><p>每个控制结点带有权值，并定义一个与结点数组同样规模的布尔数组。（或在类中带有一个布尔值）</p>\n</li>\n<li>算法开始时，定义一个阈值，遍历所有控制结点，并且将控制结点的权值与阈值比较，若大于阈值则对应位置的布尔值赋真（或相反）。</li>\n<li>一个结点在遍历完成后拥有两种状态，0或1，每个Square拥有4个结点，则2<sup>4</sup>=16共有16种状态，而在不同状态下连接对应的两个绘制结点，即完成了一个Square的轮廓生成过程。</li>\n<li>遍历所有的Square，也即算法名中的Marching，则完成了轮廓的绘制</li>\n</ul>\n<hr>\n<h2 id=\"Wiki上Marching-Squares的过程图\"><a href=\"#Wiki上Marching-Squares的过程图\" class=\"headerlink\" title=\"Wiki上Marching Squares的过程图\"></a>Wiki上Marching Squares的过程图</h2><p><img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Marching_squares_algorithm.svg/1065px-Marching_squares_algorithm.svg.png\" alt=\"Marching Squares\"></p>\n<hr>\n<h2 id=\"能用来干什么\"><a href=\"#能用来干什么\" class=\"headerlink\" title=\"能用来干什么\"></a>能用来干什么</h2><ul>\n<li>等高线生成</li>\n<li>我用于2D游戏的简单地形破坏生成（复杂的我不会）</li>\n</ul>\n"},{"title":"树的常用公式","date":"2018-10-30T13:08:15.000Z","_content":"## Introduction\n\n根据树的叶子结点个数、非叶子节点个数、树的深度等等，推导出的公式、定理也有不少，可以自己手工推算一下，记忆会更深刻，此博文只介绍公式、定理内容，不作推导。\n\n1. 二叉树第i层上至多有$ 2^i-1 $个结点，其中i大于等于1，$ 2^i $表示2的i次方；","source":"_posts/Algorithm/2018-10-30-树的常用公式.md","raw":"---\ntitle: 树的常用公式\ndate: 2018-10-30 21:08:15\ncategories:\n- Datastruct\ntags:\n- Tree\n- Algorithm\n---\n## Introduction\n\n根据树的叶子结点个数、非叶子节点个数、树的深度等等，推导出的公式、定理也有不少，可以自己手工推算一下，记忆会更深刻，此博文只介绍公式、定理内容，不作推导。\n\n1. 二叉树第i层上至多有$ 2^i-1 $个结点，其中i大于等于1，$ 2^i $表示2的i次方；","slug":"Algorithm-2018-10-30-树的常用公式","published":1,"updated":"2021-02-13T16:06:58.333Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaq0002ncswgptpb6j6v","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>根据树的叶子结点个数、非叶子节点个数、树的深度等等，推导出的公式、定理也有不少，可以自己手工推算一下，记忆会更深刻，此博文只介绍公式、定理内容，不作推导。</p>\n<ol>\n<li>二叉树第i层上至多有$ 2^i-1 $个结点，其中i大于等于1，$ 2^i $表示2的i次方；</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>根据树的叶子结点个数、非叶子节点个数、树的深度等等，推导出的公式、定理也有不少，可以自己手工推算一下，记忆会更深刻，此博文只介绍公式、定理内容，不作推导。</p>\n<ol>\n<li>二叉树第i层上至多有$ 2^i-1 $个结点，其中i大于等于1，$ 2^i $表示2的i次方；</li>\n</ol>\n"},{"title":"Shadowsocks","date":"2018-10-26T20:27:29.000Z","_content":"\n# Shadowsocks是什么\nShadowsocks是GitHub上的一个开源项目（原作者Clowwindy因为某些原因移除了），提供双端Socks5代理服务。\n有人拷贝了一份Shadowsocks的源码，[地址](https://github.com/ziggear/shadowsocks) \n\n# Shadowsocks安装\n\n首先需要有一个可以进行登录的VPS，自行购买。\n\n## 内核升级并开启TcpBBR拥塞控制\n\n仅仅安装Shadowsocks是不够的，可以升级内核并开启TcpBBR拥塞控制，提升速度。\n\n内核的升级用一键脚本完成即可\n```\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh\n```\n参考来自[秋水逸冰](https://teddysun.com/489.html)\n\n升级完成并重启系统后，输入`uname -r` 可以查看内核版本，再用`lsmod | grep bbr`查看bbr模块是否开启成功，一般会输出`tcp_bbr *****`即可，也可能没有，不同VPS不同结果。\n\n## Shadowsocks安装\n\n官方提供Python版的安装\n\nDebian / Ubuntu:\n```\napt-get install python-pip\npip install shadowsocks\n```\n\nCentOS:\n```\nyum install python-setuptools && easy_install pip\npip install shadowsocks\n```\n\nWindows下需要先安装Python，官方说明需要安装对应版本的OpenSSL，未测试，之后再进行`pip install shadowsocks`\n[详情](https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows)\n\n## 开启Shadowsocks服务\n\n示例\n`ssserver -p 443 -k password -m aes-256-cfb`\n\n后台运行`ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start`\n\n停止 `sudo ssserver -d stop`\n\n日志 `sudo less /var/log/shadowsocks.log`\n\n## 多端口运行\n\n创建一个配置文件，如ss.json或者config.json\n\n`vim ss.json`\n\n以json方式配置Shadowsocks\n\n以下是一个例子\n\n``` json\n{\n\t\"server\":\"*.*.*.*\",\n\t\"local_address\":\"127.0.0.1\",\n\t\"local_port\":1080,\n\t\"port_password\":{\n\t\t\"8888\":\"temp\",\n        \"8989\":\"temp\"\n    },\n\t\"timeout\":300,\n\t\"method\":\"aes-256-cfb\"\n}\n```\n\n`*.*.*.*`为VPS公网地址\n然后保存文件`:wq`\n\n执行`ssserver -c ss.json -d start`\n\nShadowsocks服务即在后台运行\n\n# 注意\n\n单纯的执行Shadowsocks的服务命令还不够，还需要修改防火墙规则，面板可以直接在对应的放行端口添加，也可手动添加防火墙规则\n\n例如Centos 7（或使用firewall-cmd做防火墙规则的）\n\n`firewall-cmd --zone=public --add-port=端口号/tcp --permanent`\n`firewall-cmd --zone=public --add-port=端口号/udp --permanent `\n\n或\n\n`firewall-cmd --zone=public --add-port=端口起始-端口终/tcp --permanent`\n`firewall-cmd --zone=public --add-port=端口起始-端口终/udp --permanent`\n\n其中`--permanent`为了规则持续生效，若不使用UDP转发，可以去掉第二行。\n\n最后`firewall-cmd --reload`重启防火墙即可\n\n# Windows客户端的连接\n\n[下载Windows客户端](https://github.com/shadowsocks/shadowsocks-windows/releases)\n\n直接打开即可，右下角任务栏右键小飞机，服务器地址填VPS公网IP或解析到该服务器的域名，服务器端口填上述ss.json或config.json中开放的端口，密码及加密方式对应填入，本地代理端口默认即可，修改为别的端口也行。\n\n# 技巧\n\nShadowsocks可以在后台常驻，并且第一次生效后就可以关闭启动了（并不是退出程序，仅仅是关闭系统代理）。\n\n其他程序需要代理时，仅需通过 Socks5 协议，在`127.0.0.1` 1080端口（默认本地代理端口），用户名密码置空或选择不验证即可实现代理。\n\n\n# 多用户\nEnable manager API by specifying --manager-address, which is either a Unix socket or an IP address:\n\n    # Use a Unix socket\n    ssserver --manager-address /var/run/shadowsocks-manager.sock -c tests/server-multi-passwd.json\n    # Use an IP address\n    ssserver --manager-address 127.0.0.1:6001 -c tests/server-multi-passwd.json\n    \nTo add a port:\n\n    add: {\"server_port\": 8001, \"password\":\"7cd308cc059\"}\n\nTo remove a port:\n\n    remove: {\"server_port\": 8001}\n    \necho:\n    \n    echo -n ping > /dev/udp/127.0.0.1/6001\n\ndemo:\n\n    ssserver -p 8888 -k password -m aes-256-cfb --manager-address 127.0.0.1:6001","source":"_posts/Linux/2018-10-27-Shadowsocks.md","raw":"---\ntitle: Shadowsocks\ndate: 2018-10-27 04:27:29\ncategories:\n- Proxy\ntags:\n- VPS\n- Linux\n- Shadowsocks\n- Proxy\n---\n\n# Shadowsocks是什么\nShadowsocks是GitHub上的一个开源项目（原作者Clowwindy因为某些原因移除了），提供双端Socks5代理服务。\n有人拷贝了一份Shadowsocks的源码，[地址](https://github.com/ziggear/shadowsocks) \n\n# Shadowsocks安装\n\n首先需要有一个可以进行登录的VPS，自行购买。\n\n## 内核升级并开启TcpBBR拥塞控制\n\n仅仅安装Shadowsocks是不够的，可以升级内核并开启TcpBBR拥塞控制，提升速度。\n\n内核的升级用一键脚本完成即可\n```\nwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh && chmod +x bbr.sh && ./bbr.sh\n```\n参考来自[秋水逸冰](https://teddysun.com/489.html)\n\n升级完成并重启系统后，输入`uname -r` 可以查看内核版本，再用`lsmod | grep bbr`查看bbr模块是否开启成功，一般会输出`tcp_bbr *****`即可，也可能没有，不同VPS不同结果。\n\n## Shadowsocks安装\n\n官方提供Python版的安装\n\nDebian / Ubuntu:\n```\napt-get install python-pip\npip install shadowsocks\n```\n\nCentOS:\n```\nyum install python-setuptools && easy_install pip\npip install shadowsocks\n```\n\nWindows下需要先安装Python，官方说明需要安装对应版本的OpenSSL，未测试，之后再进行`pip install shadowsocks`\n[详情](https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows)\n\n## 开启Shadowsocks服务\n\n示例\n`ssserver -p 443 -k password -m aes-256-cfb`\n\n后台运行`ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start`\n\n停止 `sudo ssserver -d stop`\n\n日志 `sudo less /var/log/shadowsocks.log`\n\n## 多端口运行\n\n创建一个配置文件，如ss.json或者config.json\n\n`vim ss.json`\n\n以json方式配置Shadowsocks\n\n以下是一个例子\n\n``` json\n{\n\t\"server\":\"*.*.*.*\",\n\t\"local_address\":\"127.0.0.1\",\n\t\"local_port\":1080,\n\t\"port_password\":{\n\t\t\"8888\":\"temp\",\n        \"8989\":\"temp\"\n    },\n\t\"timeout\":300,\n\t\"method\":\"aes-256-cfb\"\n}\n```\n\n`*.*.*.*`为VPS公网地址\n然后保存文件`:wq`\n\n执行`ssserver -c ss.json -d start`\n\nShadowsocks服务即在后台运行\n\n# 注意\n\n单纯的执行Shadowsocks的服务命令还不够，还需要修改防火墙规则，面板可以直接在对应的放行端口添加，也可手动添加防火墙规则\n\n例如Centos 7（或使用firewall-cmd做防火墙规则的）\n\n`firewall-cmd --zone=public --add-port=端口号/tcp --permanent`\n`firewall-cmd --zone=public --add-port=端口号/udp --permanent `\n\n或\n\n`firewall-cmd --zone=public --add-port=端口起始-端口终/tcp --permanent`\n`firewall-cmd --zone=public --add-port=端口起始-端口终/udp --permanent`\n\n其中`--permanent`为了规则持续生效，若不使用UDP转发，可以去掉第二行。\n\n最后`firewall-cmd --reload`重启防火墙即可\n\n# Windows客户端的连接\n\n[下载Windows客户端](https://github.com/shadowsocks/shadowsocks-windows/releases)\n\n直接打开即可，右下角任务栏右键小飞机，服务器地址填VPS公网IP或解析到该服务器的域名，服务器端口填上述ss.json或config.json中开放的端口，密码及加密方式对应填入，本地代理端口默认即可，修改为别的端口也行。\n\n# 技巧\n\nShadowsocks可以在后台常驻，并且第一次生效后就可以关闭启动了（并不是退出程序，仅仅是关闭系统代理）。\n\n其他程序需要代理时，仅需通过 Socks5 协议，在`127.0.0.1` 1080端口（默认本地代理端口），用户名密码置空或选择不验证即可实现代理。\n\n\n# 多用户\nEnable manager API by specifying --manager-address, which is either a Unix socket or an IP address:\n\n    # Use a Unix socket\n    ssserver --manager-address /var/run/shadowsocks-manager.sock -c tests/server-multi-passwd.json\n    # Use an IP address\n    ssserver --manager-address 127.0.0.1:6001 -c tests/server-multi-passwd.json\n    \nTo add a port:\n\n    add: {\"server_port\": 8001, \"password\":\"7cd308cc059\"}\n\nTo remove a port:\n\n    remove: {\"server_port\": 8001}\n    \necho:\n    \n    echo -n ping > /dev/udp/127.0.0.1/6001\n\ndemo:\n\n    ssserver -p 8888 -k password -m aes-256-cfb --manager-address 127.0.0.1:6001","slug":"Linux-2018-10-27-Shadowsocks","published":1,"updated":"2021-02-13T16:06:58.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaq0002ocswg5b1li4m3","content":"<h1 id=\"Shadowsocks是什么\"><a href=\"#Shadowsocks是什么\" class=\"headerlink\" title=\"Shadowsocks是什么\"></a>Shadowsocks是什么</h1><p>Shadowsocks是GitHub上的一个开源项目（原作者Clowwindy因为某些原因移除了），提供双端Socks5代理服务。<br>有人拷贝了一份Shadowsocks的源码，<a href=\"https://github.com/ziggear/shadowsocks\" target=\"_blank\" rel=\"noopener\">地址</a> </p>\n<h1 id=\"Shadowsocks安装\"><a href=\"#Shadowsocks安装\" class=\"headerlink\" title=\"Shadowsocks安装\"></a>Shadowsocks安装</h1><p>首先需要有一个可以进行登录的VPS，自行购买。</p>\n<h2 id=\"内核升级并开启TcpBBR拥塞控制\"><a href=\"#内核升级并开启TcpBBR拥塞控制\" class=\"headerlink\" title=\"内核升级并开启TcpBBR拥塞控制\"></a>内核升级并开启TcpBBR拥塞控制</h2><p>仅仅安装Shadowsocks是不够的，可以升级内核并开启TcpBBR拥塞控制，提升速度。</p>\n<p>内核的升级用一键脚本完成即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure></p>\n<p>参考来自<a href=\"https://teddysun.com/489.html\" target=\"_blank\" rel=\"noopener\">秋水逸冰</a></p>\n<p>升级完成并重启系统后，输入<code>uname -r</code> 可以查看内核版本，再用<code>lsmod | grep bbr</code>查看bbr模块是否开启成功，一般会输出<code>tcp_bbr *****</code>即可，也可能没有，不同VPS不同结果。</p>\n<h2 id=\"Shadowsocks安装-1\"><a href=\"#Shadowsocks安装-1\" class=\"headerlink\" title=\"Shadowsocks安装\"></a>Shadowsocks安装</h2><p>官方提供Python版的安装</p>\n<p>Debian / Ubuntu:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure></p>\n<p>CentOS:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure></p>\n<p>Windows下需要先安装Python，官方说明需要安装对应版本的OpenSSL，未测试，之后再进行<code>pip install shadowsocks</code><br><a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows\" target=\"_blank\" rel=\"noopener\">详情</a></p>\n<h2 id=\"开启Shadowsocks服务\"><a href=\"#开启Shadowsocks服务\" class=\"headerlink\" title=\"开启Shadowsocks服务\"></a>开启Shadowsocks服务</h2><p>示例<br><code>ssserver -p 443 -k password -m aes-256-cfb</code></p>\n<p>后台运行<code>ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start</code></p>\n<p>停止 <code>sudo ssserver -d stop</code></p>\n<p>日志 <code>sudo less /var/log/shadowsocks.log</code></p>\n<h2 id=\"多端口运行\"><a href=\"#多端口运行\" class=\"headerlink\" title=\"多端口运行\"></a>多端口运行</h2><p>创建一个配置文件，如ss.json或者config.json</p>\n<p><code>vim ss.json</code></p>\n<p>以json方式配置Shadowsocks</p>\n<p>以下是一个例子</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"server\"</span>:<span class=\"string\">\"*.*.*.*\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"8888\"</span>:<span class=\"string\">\"temp\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"8989\"</span>:<span class=\"string\">\"temp\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>*.*.*.*</code>为VPS公网地址<br>然后保存文件<code>:wq</code></p>\n<p>执行<code>ssserver -c ss.json -d start</code></p>\n<p>Shadowsocks服务即在后台运行</p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>单纯的执行Shadowsocks的服务命令还不够，还需要修改防火墙规则，面板可以直接在对应的放行端口添加，也可手动添加防火墙规则</p>\n<p>例如Centos 7（或使用firewall-cmd做防火墙规则的）</p>\n<p><code>firewall-cmd --zone=public --add-port=端口号/tcp --permanent</code><br><code>firewall-cmd --zone=public --add-port=端口号/udp --permanent</code></p>\n<p>或</p>\n<p><code>firewall-cmd --zone=public --add-port=端口起始-端口终/tcp --permanent</code><br><code>firewall-cmd --zone=public --add-port=端口起始-端口终/udp --permanent</code></p>\n<p>其中<code>--permanent</code>为了规则持续生效，若不使用UDP转发，可以去掉第二行。</p>\n<p>最后<code>firewall-cmd --reload</code>重启防火墙即可</p>\n<h1 id=\"Windows客户端的连接\"><a href=\"#Windows客户端的连接\" class=\"headerlink\" title=\"Windows客户端的连接\"></a>Windows客户端的连接</h1><p><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"noopener\">下载Windows客户端</a></p>\n<p>直接打开即可，右下角任务栏右键小飞机，服务器地址填VPS公网IP或解析到该服务器的域名，服务器端口填上述ss.json或config.json中开放的端口，密码及加密方式对应填入，本地代理端口默认即可，修改为别的端口也行。</p>\n<h1 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h1><p>Shadowsocks可以在后台常驻，并且第一次生效后就可以关闭启动了（并不是退出程序，仅仅是关闭系统代理）。</p>\n<p>其他程序需要代理时，仅需通过 Socks5 协议，在<code>127.0.0.1</code> 1080端口（默认本地代理端口），用户名密码置空或选择不验证即可实现代理。</p>\n<h1 id=\"多用户\"><a href=\"#多用户\" class=\"headerlink\" title=\"多用户\"></a>多用户</h1><p>Enable manager API by specifying —manager-address, which is either a Unix socket or an IP address:</p>\n<pre><code># Use a Unix socket\nssserver --manager-address /var/run/shadowsocks-manager.sock -c tests/server-multi-passwd.json\n# Use an IP address\nssserver --manager-address 127.0.0.1:6001 -c tests/server-multi-passwd.json\n</code></pre><p>To add a port:</p>\n<pre><code>add: {&quot;server_port&quot;: 8001, &quot;password&quot;:&quot;7cd308cc059&quot;}\n</code></pre><p>To remove a port:</p>\n<pre><code>remove: {&quot;server_port&quot;: 8001}\n</code></pre><p>echo:</p>\n<pre><code>echo -n ping &gt; /dev/udp/127.0.0.1/6001\n</code></pre><p>demo:</p>\n<pre><code>ssserver -p 8888 -k password -m aes-256-cfb --manager-address 127.0.0.1:6001\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Shadowsocks是什么\"><a href=\"#Shadowsocks是什么\" class=\"headerlink\" title=\"Shadowsocks是什么\"></a>Shadowsocks是什么</h1><p>Shadowsocks是GitHub上的一个开源项目（原作者Clowwindy因为某些原因移除了），提供双端Socks5代理服务。<br>有人拷贝了一份Shadowsocks的源码，<a href=\"https://github.com/ziggear/shadowsocks\" target=\"_blank\" rel=\"noopener\">地址</a> </p>\n<h1 id=\"Shadowsocks安装\"><a href=\"#Shadowsocks安装\" class=\"headerlink\" title=\"Shadowsocks安装\"></a>Shadowsocks安装</h1><p>首先需要有一个可以进行登录的VPS，自行购买。</p>\n<h2 id=\"内核升级并开启TcpBBR拥塞控制\"><a href=\"#内核升级并开启TcpBBR拥塞控制\" class=\"headerlink\" title=\"内核升级并开启TcpBBR拥塞控制\"></a>内核升级并开启TcpBBR拥塞控制</h2><p>仅仅安装Shadowsocks是不够的，可以升级内核并开启TcpBBR拥塞控制，提升速度。</p>\n<p>内核的升级用一键脚本完成即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</span><br></pre></td></tr></table></figure></p>\n<p>参考来自<a href=\"https://teddysun.com/489.html\" target=\"_blank\" rel=\"noopener\">秋水逸冰</a></p>\n<p>升级完成并重启系统后，输入<code>uname -r</code> 可以查看内核版本，再用<code>lsmod | grep bbr</code>查看bbr模块是否开启成功，一般会输出<code>tcp_bbr *****</code>即可，也可能没有，不同VPS不同结果。</p>\n<h2 id=\"Shadowsocks安装-1\"><a href=\"#Shadowsocks安装-1\" class=\"headerlink\" title=\"Shadowsocks安装\"></a>Shadowsocks安装</h2><p>官方提供Python版的安装</p>\n<p>Debian / Ubuntu:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install python-pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure></p>\n<p>CentOS:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp;&amp; easy_install pip</span><br><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure></p>\n<p>Windows下需要先安装Python，官方说明需要安装对应版本的OpenSSL，未测试，之后再进行<code>pip install shadowsocks</code><br><a href=\"https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows\" target=\"_blank\" rel=\"noopener\">详情</a></p>\n<h2 id=\"开启Shadowsocks服务\"><a href=\"#开启Shadowsocks服务\" class=\"headerlink\" title=\"开启Shadowsocks服务\"></a>开启Shadowsocks服务</h2><p>示例<br><code>ssserver -p 443 -k password -m aes-256-cfb</code></p>\n<p>后台运行<code>ssserver -p 443 -k password -m aes-256-cfb --user nobody -d start</code></p>\n<p>停止 <code>sudo ssserver -d stop</code></p>\n<p>日志 <code>sudo less /var/log/shadowsocks.log</code></p>\n<h2 id=\"多端口运行\"><a href=\"#多端口运行\" class=\"headerlink\" title=\"多端口运行\"></a>多端口运行</h2><p>创建一个配置文件，如ss.json或者config.json</p>\n<p><code>vim ss.json</code></p>\n<p>以json方式配置Shadowsocks</p>\n<p>以下是一个例子</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"attr\">\"server\"</span>:<span class=\"string\">\"*.*.*.*\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_address\"</span>:<span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"local_port\"</span>:<span class=\"number\">1080</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"port_password\"</span>:&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">\"8888\"</span>:<span class=\"string\">\"temp\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"8989\"</span>:<span class=\"string\">\"temp\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">\t<span class=\"attr\">\"timeout\"</span>:<span class=\"number\">300</span>,</span><br><span class=\"line\">\t<span class=\"attr\">\"method\"</span>:<span class=\"string\">\"aes-256-cfb\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>*.*.*.*</code>为VPS公网地址<br>然后保存文件<code>:wq</code></p>\n<p>执行<code>ssserver -c ss.json -d start</code></p>\n<p>Shadowsocks服务即在后台运行</p>\n<h1 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h1><p>单纯的执行Shadowsocks的服务命令还不够，还需要修改防火墙规则，面板可以直接在对应的放行端口添加，也可手动添加防火墙规则</p>\n<p>例如Centos 7（或使用firewall-cmd做防火墙规则的）</p>\n<p><code>firewall-cmd --zone=public --add-port=端口号/tcp --permanent</code><br><code>firewall-cmd --zone=public --add-port=端口号/udp --permanent</code></p>\n<p>或</p>\n<p><code>firewall-cmd --zone=public --add-port=端口起始-端口终/tcp --permanent</code><br><code>firewall-cmd --zone=public --add-port=端口起始-端口终/udp --permanent</code></p>\n<p>其中<code>--permanent</code>为了规则持续生效，若不使用UDP转发，可以去掉第二行。</p>\n<p>最后<code>firewall-cmd --reload</code>重启防火墙即可</p>\n<h1 id=\"Windows客户端的连接\"><a href=\"#Windows客户端的连接\" class=\"headerlink\" title=\"Windows客户端的连接\"></a>Windows客户端的连接</h1><p><a href=\"https://github.com/shadowsocks/shadowsocks-windows/releases\" target=\"_blank\" rel=\"noopener\">下载Windows客户端</a></p>\n<p>直接打开即可，右下角任务栏右键小飞机，服务器地址填VPS公网IP或解析到该服务器的域名，服务器端口填上述ss.json或config.json中开放的端口，密码及加密方式对应填入，本地代理端口默认即可，修改为别的端口也行。</p>\n<h1 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h1><p>Shadowsocks可以在后台常驻，并且第一次生效后就可以关闭启动了（并不是退出程序，仅仅是关闭系统代理）。</p>\n<p>其他程序需要代理时，仅需通过 Socks5 协议，在<code>127.0.0.1</code> 1080端口（默认本地代理端口），用户名密码置空或选择不验证即可实现代理。</p>\n<h1 id=\"多用户\"><a href=\"#多用户\" class=\"headerlink\" title=\"多用户\"></a>多用户</h1><p>Enable manager API by specifying —manager-address, which is either a Unix socket or an IP address:</p>\n<pre><code># Use a Unix socket\nssserver --manager-address /var/run/shadowsocks-manager.sock -c tests/server-multi-passwd.json\n# Use an IP address\nssserver --manager-address 127.0.0.1:6001 -c tests/server-multi-passwd.json\n</code></pre><p>To add a port:</p>\n<pre><code>add: {&quot;server_port&quot;: 8001, &quot;password&quot;:&quot;7cd308cc059&quot;}\n</code></pre><p>To remove a port:</p>\n<pre><code>remove: {&quot;server_port&quot;: 8001}\n</code></pre><p>echo:</p>\n<pre><code>echo -n ping &gt; /dev/udp/127.0.0.1/6001\n</code></pre><p>demo:</p>\n<pre><code>ssserver -p 8888 -k password -m aes-256-cfb --manager-address 127.0.0.1:6001\n</code></pre>"},{"title":"VPS安装宝塔面板","date":"2018-10-26T20:30:25.000Z","_content":"# 宝塔面板\n面板可以可视化的一件部署一些组件，如LAMP，LNMP架构等，还可以对服务器进行性能监视。宝塔面板免费且全中文，对用户友好。\n# 安装\n- Centos 下\n`yum install -y wget && wget -O install.sh http://download.bt.cn/install/install.sh && sh install.sh`\n- Ubuntu/Deepin下\n`wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh && sudo bash install.sh`\n- Debian\n`wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh && bash install.sh`\n- Fedora\n`wget -O install.sh http://download.bt.cn/install/install.sh && bash install.sh`\n# 安装完成\n安装完成后，标准输出的最后几行输出了默认用户名和密码，先修改默认密码\n`cd /www/server/panel && python tools.pyc panel ******` 星号为需要修改的密码\n如果已经尝试了登录并登录次数过多限制，暂时禁止登录 请输入以下命令 清除登录限制\n`rm -f /www/server/panel/data/*.login`","source":"_posts/Linux/2018-10-27-VPS安装宝塔面板.md","raw":"---\ntitle: VPS安装宝塔面板\ndate: 2018-10-27 04:30:25\ncategories:\n- Linux\ntags:\n- Linux\n- VPS\n- 宝塔面板\n---\n# 宝塔面板\n面板可以可视化的一件部署一些组件，如LAMP，LNMP架构等，还可以对服务器进行性能监视。宝塔面板免费且全中文，对用户友好。\n# 安装\n- Centos 下\n`yum install -y wget && wget -O install.sh http://download.bt.cn/install/install.sh && sh install.sh`\n- Ubuntu/Deepin下\n`wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh && sudo bash install.sh`\n- Debian\n`wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh && bash install.sh`\n- Fedora\n`wget -O install.sh http://download.bt.cn/install/install.sh && bash install.sh`\n# 安装完成\n安装完成后，标准输出的最后几行输出了默认用户名和密码，先修改默认密码\n`cd /www/server/panel && python tools.pyc panel ******` 星号为需要修改的密码\n如果已经尝试了登录并登录次数过多限制，暂时禁止登录 请输入以下命令 清除登录限制\n`rm -f /www/server/panel/data/*.login`","slug":"Linux-2018-10-27-VPS安装宝塔面板","published":1,"updated":"2021-02-13T16:06:58.334Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaq1002pcswgjaewohoc","content":"<h1 id=\"宝塔面板\"><a href=\"#宝塔面板\" class=\"headerlink\" title=\"宝塔面板\"></a>宝塔面板</h1><p>面板可以可视化的一件部署一些组件，如LAMP，LNMP架构等，还可以对服务器进行性能监视。宝塔面板免费且全中文，对用户友好。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ul>\n<li>Centos 下<br><code>yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</code></li>\n<li>Ubuntu/Deepin下<br><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh</code></li>\n<li>Debian<br><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; bash install.sh</code></li>\n<li>Fedora<br><code>wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; bash install.sh</code><h1 id=\"安装完成\"><a href=\"#安装完成\" class=\"headerlink\" title=\"安装完成\"></a>安装完成</h1>安装完成后，标准输出的最后几行输出了默认用户名和密码，先修改默认密码<br><code>cd /www/server/panel &amp;&amp; python tools.pyc panel ******</code> 星号为需要修改的密码<br>如果已经尝试了登录并登录次数过多限制，暂时禁止登录 请输入以下命令 清除登录限制<br><code>rm -f /www/server/panel/data/*.login</code></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"宝塔面板\"><a href=\"#宝塔面板\" class=\"headerlink\" title=\"宝塔面板\"></a>宝塔面板</h1><p>面板可以可视化的一件部署一些组件，如LAMP，LNMP架构等，还可以对服务器进行性能监视。宝塔面板免费且全中文，对用户友好。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><ul>\n<li>Centos 下<br><code>yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; sh install.sh</code></li>\n<li>Ubuntu/Deepin下<br><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; sudo bash install.sh</code></li>\n<li>Debian<br><code>wget -O install.sh http://download.bt.cn/install/install-ubuntu.sh &amp;&amp; bash install.sh</code></li>\n<li>Fedora<br><code>wget -O install.sh http://download.bt.cn/install/install.sh &amp;&amp; bash install.sh</code><h1 id=\"安装完成\"><a href=\"#安装完成\" class=\"headerlink\" title=\"安装完成\"></a>安装完成</h1>安装完成后，标准输出的最后几行输出了默认用户名和密码，先修改默认密码<br><code>cd /www/server/panel &amp;&amp; python tools.pyc panel ******</code> 星号为需要修改的密码<br>如果已经尝试了登录并登录次数过多限制，暂时禁止登录 请输入以下命令 清除登录限制<br><code>rm -f /www/server/panel/data/*.login</code></li>\n</ul>\n"},{"title":"VPS","date":"2018-10-28T18:32:00.000Z","_content":"# VPS 是什么\n\n- VPS（Virtual Private Server 虚拟专用服务器）技术，将一台服务器分割成多个虚拟专享服务器的优质服务。 实现VPS的技术分为容器 技术，和虚拟化技术 。\n- 可以将VPS看做一台你拥有Root权限的机子，但你只能远程登录\n\n# VPS服务商\n\nVPS服务商是负责租借VPS的商家，不同商家不同的价格和规格。\n\n- 国内腾讯云和阿里云线路都还可以，也提供香港结点（可以魔法上网）\n- Vultr \nVultr是一家2014年刚成立的VPS服务商，基于KVM，采用SSD硬盘，拥有大量自建机房。有日本、美国洛杉矶、Dallas、Chicago、New York、Seattle、Atlanta、英国、德国等，价格便宜，配置又高。还支持小时付费，更重要的是支持支付宝充值。\n- Bandwagon（搬瓦工）\n与Vultr相似，支持支付宝并且机器的性价比都很高，但是有香港节点，到大陆丢包率低，可以用来做游戏的加速（UDP丢包低）\n- host1plus，支持支付宝。\n- LinNode\n- hostus\n- DigitalOcean\n- 上面3个尽管有日本节点或者有香港节点，但是都需要PayPal，操作会繁琐一些。\n\n# VPS后台操作（登录）\n可以在购买后查看自己服务器的Root密码，用SSH工具登录填写主机地址和密码，账号为root，主机地址为服务商给的服务器IP.\nSSH工具：\n\n- putty\n- XShell\n- 一些移动端的ssh工具\n","source":"_posts/Linux/2018-10-29-VPS.md","raw":"---\ntitle: VPS\ndate: 2018-10-29 02:32:00\ncategories:\n- VPS\ntags:\n- VPS\n- Introduction\n---\n# VPS 是什么\n\n- VPS（Virtual Private Server 虚拟专用服务器）技术，将一台服务器分割成多个虚拟专享服务器的优质服务。 实现VPS的技术分为容器 技术，和虚拟化技术 。\n- 可以将VPS看做一台你拥有Root权限的机子，但你只能远程登录\n\n# VPS服务商\n\nVPS服务商是负责租借VPS的商家，不同商家不同的价格和规格。\n\n- 国内腾讯云和阿里云线路都还可以，也提供香港结点（可以魔法上网）\n- Vultr \nVultr是一家2014年刚成立的VPS服务商，基于KVM，采用SSD硬盘，拥有大量自建机房。有日本、美国洛杉矶、Dallas、Chicago、New York、Seattle、Atlanta、英国、德国等，价格便宜，配置又高。还支持小时付费，更重要的是支持支付宝充值。\n- Bandwagon（搬瓦工）\n与Vultr相似，支持支付宝并且机器的性价比都很高，但是有香港节点，到大陆丢包率低，可以用来做游戏的加速（UDP丢包低）\n- host1plus，支持支付宝。\n- LinNode\n- hostus\n- DigitalOcean\n- 上面3个尽管有日本节点或者有香港节点，但是都需要PayPal，操作会繁琐一些。\n\n# VPS后台操作（登录）\n可以在购买后查看自己服务器的Root密码，用SSH工具登录填写主机地址和密码，账号为root，主机地址为服务商给的服务器IP.\nSSH工具：\n\n- putty\n- XShell\n- 一些移动端的ssh工具\n","slug":"Linux-2018-10-29-VPS","published":1,"updated":"2021-02-13T16:06:58.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaq3002scswg1x5sbs6m","content":"<h1 id=\"VPS-是什么\"><a href=\"#VPS-是什么\" class=\"headerlink\" title=\"VPS 是什么\"></a>VPS 是什么</h1><ul>\n<li>VPS（Virtual Private Server 虚拟专用服务器）技术，将一台服务器分割成多个虚拟专享服务器的优质服务。 实现VPS的技术分为容器 技术，和虚拟化技术 。</li>\n<li>可以将VPS看做一台你拥有Root权限的机子，但你只能远程登录</li>\n</ul>\n<h1 id=\"VPS服务商\"><a href=\"#VPS服务商\" class=\"headerlink\" title=\"VPS服务商\"></a>VPS服务商</h1><p>VPS服务商是负责租借VPS的商家，不同商家不同的价格和规格。</p>\n<ul>\n<li>国内腾讯云和阿里云线路都还可以，也提供香港结点（可以魔法上网）</li>\n<li>Vultr<br>Vultr是一家2014年刚成立的VPS服务商，基于KVM，采用SSD硬盘，拥有大量自建机房。有日本、美国洛杉矶、Dallas、Chicago、New York、Seattle、Atlanta、英国、德国等，价格便宜，配置又高。还支持小时付费，更重要的是支持支付宝充值。</li>\n<li>Bandwagon（搬瓦工）<br>与Vultr相似，支持支付宝并且机器的性价比都很高，但是有香港节点，到大陆丢包率低，可以用来做游戏的加速（UDP丢包低）</li>\n<li>host1plus，支持支付宝。</li>\n<li>LinNode</li>\n<li>hostus</li>\n<li>DigitalOcean</li>\n<li>上面3个尽管有日本节点或者有香港节点，但是都需要PayPal，操作会繁琐一些。</li>\n</ul>\n<h1 id=\"VPS后台操作（登录）\"><a href=\"#VPS后台操作（登录）\" class=\"headerlink\" title=\"VPS后台操作（登录）\"></a>VPS后台操作（登录）</h1><p>可以在购买后查看自己服务器的Root密码，用SSH工具登录填写主机地址和密码，账号为root，主机地址为服务商给的服务器IP.<br>SSH工具：</p>\n<ul>\n<li>putty</li>\n<li>XShell</li>\n<li>一些移动端的ssh工具</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"VPS-是什么\"><a href=\"#VPS-是什么\" class=\"headerlink\" title=\"VPS 是什么\"></a>VPS 是什么</h1><ul>\n<li>VPS（Virtual Private Server 虚拟专用服务器）技术，将一台服务器分割成多个虚拟专享服务器的优质服务。 实现VPS的技术分为容器 技术，和虚拟化技术 。</li>\n<li>可以将VPS看做一台你拥有Root权限的机子，但你只能远程登录</li>\n</ul>\n<h1 id=\"VPS服务商\"><a href=\"#VPS服务商\" class=\"headerlink\" title=\"VPS服务商\"></a>VPS服务商</h1><p>VPS服务商是负责租借VPS的商家，不同商家不同的价格和规格。</p>\n<ul>\n<li>国内腾讯云和阿里云线路都还可以，也提供香港结点（可以魔法上网）</li>\n<li>Vultr<br>Vultr是一家2014年刚成立的VPS服务商，基于KVM，采用SSD硬盘，拥有大量自建机房。有日本、美国洛杉矶、Dallas、Chicago、New York、Seattle、Atlanta、英国、德国等，价格便宜，配置又高。还支持小时付费，更重要的是支持支付宝充值。</li>\n<li>Bandwagon（搬瓦工）<br>与Vultr相似，支持支付宝并且机器的性价比都很高，但是有香港节点，到大陆丢包率低，可以用来做游戏的加速（UDP丢包低）</li>\n<li>host1plus，支持支付宝。</li>\n<li>LinNode</li>\n<li>hostus</li>\n<li>DigitalOcean</li>\n<li>上面3个尽管有日本节点或者有香港节点，但是都需要PayPal，操作会繁琐一些。</li>\n</ul>\n<h1 id=\"VPS后台操作（登录）\"><a href=\"#VPS后台操作（登录）\" class=\"headerlink\" title=\"VPS后台操作（登录）\"></a>VPS后台操作（登录）</h1><p>可以在购买后查看自己服务器的Root密码，用SSH工具登录填写主机地址和密码，账号为root，主机地址为服务商给的服务器IP.<br>SSH工具：</p>\n<ul>\n<li>putty</li>\n<li>XShell</li>\n<li>一些移动端的ssh工具</li>\n</ul>\n"},{"title":"NextCloud个人网盘安装","date":"2018-10-28T18:30:46.000Z","_content":"# 面板安装\n\n面板安装比较简单\n1. 去Nextcloud官网下载[服务器安装包](https://nextcloud.com/install/)\n2. 面板安装完LAMP或LNMP之后，添加一个站点，并添加一个数据库，用户名密码自行设置。\n3. 打开刚创建的站点的根目录下，删除所有文件。\n4. 点开面板的文件模块（浏览文件），将下载的服务器安装包`.tar.gz`文件放置到某个目录下，并且`tar -zxcf 文件名.tar.gz`解压缩，得到一个nextcloud文件夹。（或者.zip 用`unzip`命令解压缩，道理同上）\n5. 进入nextcloud文件夹，将所有文件复制到刚创建的站点根目录下。\n6. 打开对应的域名，填写相应的数据即完成安装。\n7. 如果需要打开多端同步，那么域名则需要能在公网解析到，并且打开了Https协议，也即需要一个SSL证书。SSL证书可以使用Let's Encrypt免费注册一个，三个月到期，到期需要续签。（宝塔面板可以自动续签）\n\n## 注意\n\n- 我这里用的是阿里云的域名，用的是校园网，并且网页端可以正常打开Nextcloud（虽然速度非常的慢）。如果简单的打开Nextcloud的桌面端或手机端，很容易提示`找不到主机名`或`404 NOT FOUND`等等错误。\n- 主要原因猜想在于校园网DNS污染严重，并且阿里云的域名解析线路选择不正确，导致不能正确的解析服务器的IP，（cmd 测试`ping 域名`时发生找不到主机的错误 ）需要正确配置解析路线并且绕开校园网（即代理）。应该是存在SSL证书的解析问题。\n- 最后多端同步时\n * Windows端因为已经安装并配置好了shadowsocks，所以在桌面端的网络设置里，打开代理，选择Socks5协议，地址填`127.0.0.1`，端口`1080`，不验证即可。\n * Web端Chrome里用的是SwitchyOmega，将站点选择用代理连接即可\n * 手机端则开启安卓版的Shadowsocks即可。\n- 还有一种方案就是等，等到dns的解析全面生效，但并不能稳定性和性能。\n\n# 非面板安装\n\n非面板安装过程较为繁琐，用[一键包](https://lnmp.org/)安装LAMP或LNMP架构，再添加站点，并且选择自动SSL证书申请，填写数据库等相应信息，后续过程与面板安装的1-6相似。\n ","source":"_posts/Linux/2018-10-29-NextCloud个人网盘安装.md","raw":"---\ntitle: NextCloud个人网盘安装\ndate: 2018-10-29 02:30:46\ncategories:\n- Linux\ntags:\n- Linux\n- Software\n- Web\n- Blog\n- Nextcloud\n---\n# 面板安装\n\n面板安装比较简单\n1. 去Nextcloud官网下载[服务器安装包](https://nextcloud.com/install/)\n2. 面板安装完LAMP或LNMP之后，添加一个站点，并添加一个数据库，用户名密码自行设置。\n3. 打开刚创建的站点的根目录下，删除所有文件。\n4. 点开面板的文件模块（浏览文件），将下载的服务器安装包`.tar.gz`文件放置到某个目录下，并且`tar -zxcf 文件名.tar.gz`解压缩，得到一个nextcloud文件夹。（或者.zip 用`unzip`命令解压缩，道理同上）\n5. 进入nextcloud文件夹，将所有文件复制到刚创建的站点根目录下。\n6. 打开对应的域名，填写相应的数据即完成安装。\n7. 如果需要打开多端同步，那么域名则需要能在公网解析到，并且打开了Https协议，也即需要一个SSL证书。SSL证书可以使用Let's Encrypt免费注册一个，三个月到期，到期需要续签。（宝塔面板可以自动续签）\n\n## 注意\n\n- 我这里用的是阿里云的域名，用的是校园网，并且网页端可以正常打开Nextcloud（虽然速度非常的慢）。如果简单的打开Nextcloud的桌面端或手机端，很容易提示`找不到主机名`或`404 NOT FOUND`等等错误。\n- 主要原因猜想在于校园网DNS污染严重，并且阿里云的域名解析线路选择不正确，导致不能正确的解析服务器的IP，（cmd 测试`ping 域名`时发生找不到主机的错误 ）需要正确配置解析路线并且绕开校园网（即代理）。应该是存在SSL证书的解析问题。\n- 最后多端同步时\n * Windows端因为已经安装并配置好了shadowsocks，所以在桌面端的网络设置里，打开代理，选择Socks5协议，地址填`127.0.0.1`，端口`1080`，不验证即可。\n * Web端Chrome里用的是SwitchyOmega，将站点选择用代理连接即可\n * 手机端则开启安卓版的Shadowsocks即可。\n- 还有一种方案就是等，等到dns的解析全面生效，但并不能稳定性和性能。\n\n# 非面板安装\n\n非面板安装过程较为繁琐，用[一键包](https://lnmp.org/)安装LAMP或LNMP架构，再添加站点，并且选择自动SSL证书申请，填写数据库等相应信息，后续过程与面板安装的1-6相似。\n ","slug":"Linux-2018-10-29-NextCloud个人网盘安装","published":1,"updated":"2021-02-13T16:06:58.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaq3002tcswg3d9za4gb","content":"<h1 id=\"面板安装\"><a href=\"#面板安装\" class=\"headerlink\" title=\"面板安装\"></a>面板安装</h1><p>面板安装比较简单</p>\n<ol>\n<li>去Nextcloud官网下载<a href=\"https://nextcloud.com/install/\" target=\"_blank\" rel=\"noopener\">服务器安装包</a></li>\n<li>面板安装完LAMP或LNMP之后，添加一个站点，并添加一个数据库，用户名密码自行设置。</li>\n<li>打开刚创建的站点的根目录下，删除所有文件。</li>\n<li>点开面板的文件模块（浏览文件），将下载的服务器安装包<code>.tar.gz</code>文件放置到某个目录下，并且<code>tar -zxcf 文件名.tar.gz</code>解压缩，得到一个nextcloud文件夹。（或者.zip 用<code>unzip</code>命令解压缩，道理同上）</li>\n<li>进入nextcloud文件夹，将所有文件复制到刚创建的站点根目录下。</li>\n<li>打开对应的域名，填写相应的数据即完成安装。</li>\n<li>如果需要打开多端同步，那么域名则需要能在公网解析到，并且打开了Https协议，也即需要一个SSL证书。SSL证书可以使用Let’s Encrypt免费注册一个，三个月到期，到期需要续签。（宝塔面板可以自动续签）</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>我这里用的是阿里云的域名，用的是校园网，并且网页端可以正常打开Nextcloud（虽然速度非常的慢）。如果简单的打开Nextcloud的桌面端或手机端，很容易提示<code>找不到主机名</code>或<code>404 NOT FOUND</code>等等错误。</li>\n<li>主要原因猜想在于校园网DNS污染严重，并且阿里云的域名解析线路选择不正确，导致不能正确的解析服务器的IP，（cmd 测试<code>ping 域名</code>时发生找不到主机的错误 ）需要正确配置解析路线并且绕开校园网（即代理）。应该是存在SSL证书的解析问题。</li>\n<li>最后多端同步时<ul>\n<li>Windows端因为已经安装并配置好了shadowsocks，所以在桌面端的网络设置里，打开代理，选择Socks5协议，地址填<code>127.0.0.1</code>，端口<code>1080</code>，不验证即可。</li>\n<li>Web端Chrome里用的是SwitchyOmega，将站点选择用代理连接即可</li>\n<li>手机端则开启安卓版的Shadowsocks即可。</li>\n</ul>\n</li>\n<li>还有一种方案就是等，等到dns的解析全面生效，但并不能稳定性和性能。</li>\n</ul>\n<h1 id=\"非面板安装\"><a href=\"#非面板安装\" class=\"headerlink\" title=\"非面板安装\"></a>非面板安装</h1><p>非面板安装过程较为繁琐，用<a href=\"https://lnmp.org/\" target=\"_blank\" rel=\"noopener\">一键包</a>安装LAMP或LNMP架构，再添加站点，并且选择自动SSL证书申请，填写数据库等相应信息，后续过程与面板安装的1-6相似。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"面板安装\"><a href=\"#面板安装\" class=\"headerlink\" title=\"面板安装\"></a>面板安装</h1><p>面板安装比较简单</p>\n<ol>\n<li>去Nextcloud官网下载<a href=\"https://nextcloud.com/install/\" target=\"_blank\" rel=\"noopener\">服务器安装包</a></li>\n<li>面板安装完LAMP或LNMP之后，添加一个站点，并添加一个数据库，用户名密码自行设置。</li>\n<li>打开刚创建的站点的根目录下，删除所有文件。</li>\n<li>点开面板的文件模块（浏览文件），将下载的服务器安装包<code>.tar.gz</code>文件放置到某个目录下，并且<code>tar -zxcf 文件名.tar.gz</code>解压缩，得到一个nextcloud文件夹。（或者.zip 用<code>unzip</code>命令解压缩，道理同上）</li>\n<li>进入nextcloud文件夹，将所有文件复制到刚创建的站点根目录下。</li>\n<li>打开对应的域名，填写相应的数据即完成安装。</li>\n<li>如果需要打开多端同步，那么域名则需要能在公网解析到，并且打开了Https协议，也即需要一个SSL证书。SSL证书可以使用Let’s Encrypt免费注册一个，三个月到期，到期需要续签。（宝塔面板可以自动续签）</li>\n</ol>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><ul>\n<li>我这里用的是阿里云的域名，用的是校园网，并且网页端可以正常打开Nextcloud（虽然速度非常的慢）。如果简单的打开Nextcloud的桌面端或手机端，很容易提示<code>找不到主机名</code>或<code>404 NOT FOUND</code>等等错误。</li>\n<li>主要原因猜想在于校园网DNS污染严重，并且阿里云的域名解析线路选择不正确，导致不能正确的解析服务器的IP，（cmd 测试<code>ping 域名</code>时发生找不到主机的错误 ）需要正确配置解析路线并且绕开校园网（即代理）。应该是存在SSL证书的解析问题。</li>\n<li>最后多端同步时<ul>\n<li>Windows端因为已经安装并配置好了shadowsocks，所以在桌面端的网络设置里，打开代理，选择Socks5协议，地址填<code>127.0.0.1</code>，端口<code>1080</code>，不验证即可。</li>\n<li>Web端Chrome里用的是SwitchyOmega，将站点选择用代理连接即可</li>\n<li>手机端则开启安卓版的Shadowsocks即可。</li>\n</ul>\n</li>\n<li>还有一种方案就是等，等到dns的解析全面生效，但并不能稳定性和性能。</li>\n</ul>\n<h1 id=\"非面板安装\"><a href=\"#非面板安装\" class=\"headerlink\" title=\"非面板安装\"></a>非面板安装</h1><p>非面板安装过程较为繁琐，用<a href=\"https://lnmp.org/\" target=\"_blank\" rel=\"noopener\">一键包</a>安装LAMP或LNMP架构，再添加站点，并且选择自动SSL证书申请，填写数据库等相应信息，后续过程与面板安装的1-6相似。</p>\n"},{"title":"VPS安全防护","date":"2018-10-28T18:33:31.000Z","_content":"# 问题\n刚买的VPS，没过多久，如果用`cat /var/log/secure`查看登录日志，会发现会有很多个不明IP在对VPS进行端口扫描和暴力破解，如果密码很简单，很容易被破解，即使密码很复杂或者是随机生成的，在N次的暴力破解(我起码收到了6w次）下也很容易被攻破。\n\n# 方案\n1. 更换22端口（默认的ssh端口）\n2. 限制密码出错次数\n3. 禁止root登陆\n4. 改用密钥和公钥配对登陆SSH\n5. DenyHosts 屏蔽暴力IP\n\n# 对应\n1. 修改SSH登录端口\n    1. `vim /etc/ssh/sshd_config`\n    2. 取消`#Port=22`前的注释->`Port=22`\n    3. 并后续添加一行`Port=x`，x填入修改的端口号，建议10000-65535间选择\n    4. 重启SSH服务`service sshd restart`\n    5. 切换端口重新登录SSH，登录成功后将2中的`Port=22`去掉再次重启SSH服务\n\n2-5还未做对应测试","source":"_posts/Linux/2018-10-29-VPS安全防护.md","raw":"---\ntitle: VPS安全防护\ndate: 2018-10-29 02:33:31\ncategories:\n- VPS\ntags:\n- VPS\n- Security\n---\n# 问题\n刚买的VPS，没过多久，如果用`cat /var/log/secure`查看登录日志，会发现会有很多个不明IP在对VPS进行端口扫描和暴力破解，如果密码很简单，很容易被破解，即使密码很复杂或者是随机生成的，在N次的暴力破解(我起码收到了6w次）下也很容易被攻破。\n\n# 方案\n1. 更换22端口（默认的ssh端口）\n2. 限制密码出错次数\n3. 禁止root登陆\n4. 改用密钥和公钥配对登陆SSH\n5. DenyHosts 屏蔽暴力IP\n\n# 对应\n1. 修改SSH登录端口\n    1. `vim /etc/ssh/sshd_config`\n    2. 取消`#Port=22`前的注释->`Port=22`\n    3. 并后续添加一行`Port=x`，x填入修改的端口号，建议10000-65535间选择\n    4. 重启SSH服务`service sshd restart`\n    5. 切换端口重新登录SSH，登录成功后将2中的`Port=22`去掉再次重启SSH服务\n\n2-5还未做对应测试","slug":"Linux-2018-10-29-VPS安全防护","published":1,"updated":"2021-02-13T16:06:58.335Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaq5002xcswg2dgg9lk1","content":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>刚买的VPS，没过多久，如果用<code>cat /var/log/secure</code>查看登录日志，会发现会有很多个不明IP在对VPS进行端口扫描和暴力破解，如果密码很简单，很容易被破解，即使密码很复杂或者是随机生成的，在N次的暴力破解(我起码收到了6w次）下也很容易被攻破。</p>\n<h1 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h1><ol>\n<li>更换22端口（默认的ssh端口）</li>\n<li>限制密码出错次数</li>\n<li>禁止root登陆</li>\n<li>改用密钥和公钥配对登陆SSH</li>\n<li>DenyHosts 屏蔽暴力IP</li>\n</ol>\n<h1 id=\"对应\"><a href=\"#对应\" class=\"headerlink\" title=\"对应\"></a>对应</h1><ol>\n<li>修改SSH登录端口<ol>\n<li><code>vim /etc/ssh/sshd_config</code></li>\n<li>取消<code>#Port=22</code>前的注释-&gt;<code>Port=22</code></li>\n<li>并后续添加一行<code>Port=x</code>，x填入修改的端口号，建议10000-65535间选择</li>\n<li>重启SSH服务<code>service sshd restart</code></li>\n<li>切换端口重新登录SSH，登录成功后将2中的<code>Port=22</code>去掉再次重启SSH服务</li>\n</ol>\n</li>\n</ol>\n<p>2-5还未做对应测试</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>刚买的VPS，没过多久，如果用<code>cat /var/log/secure</code>查看登录日志，会发现会有很多个不明IP在对VPS进行端口扫描和暴力破解，如果密码很简单，很容易被破解，即使密码很复杂或者是随机生成的，在N次的暴力破解(我起码收到了6w次）下也很容易被攻破。</p>\n<h1 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h1><ol>\n<li>更换22端口（默认的ssh端口）</li>\n<li>限制密码出错次数</li>\n<li>禁止root登陆</li>\n<li>改用密钥和公钥配对登陆SSH</li>\n<li>DenyHosts 屏蔽暴力IP</li>\n</ol>\n<h1 id=\"对应\"><a href=\"#对应\" class=\"headerlink\" title=\"对应\"></a>对应</h1><ol>\n<li>修改SSH登录端口<ol>\n<li><code>vim /etc/ssh/sshd_config</code></li>\n<li>取消<code>#Port=22</code>前的注释-&gt;<code>Port=22</code></li>\n<li>并后续添加一行<code>Port=x</code>，x填入修改的端口号，建议10000-65535间选择</li>\n<li>重启SSH服务<code>service sshd restart</code></li>\n<li>切换端口重新登录SSH，登录成功后将2中的<code>Port=22</code>去掉再次重启SSH服务</li>\n</ol>\n</li>\n</ol>\n<p>2-5还未做对应测试</p>\n"},{"title":"VideoInMarkdown-Demo","date":"2018-10-30T12:10:38.000Z","_content":"<video id=\"video\" controls=\"\" preload=\"none\" poster=\"http://media.w3.org/2010/05/sintel/poster.png\">\n    <source id=\"mp4\" src=\"http://media.w3.org/2010/05/sintel/trailer.mp4\" type=\"video/mp4\">\n    <source id=\"webm\" src=\"http://media.w3.org/2010/05/sintel/trailer.webm\" type=\"video/webm\">\n    <source id=\"ogv\" src=\"http://media.w3.org/2010/05/sintel/trailer.ogv\" type=\"video/ogg\">\n    <p>Your user agent does not support the HTML5 Video element.</p>\n</video>","source":"_posts/Markdown/2018-10-30-VideoInMarkdown-Demo.md","raw":"---\ntitle: VideoInMarkdown-Demo\ndate: 2018-10-30 20:10:38\ncategories:\n- Note\ntags:\n- Demo\n- Hexo\n- Markdown\n---\n<video id=\"video\" controls=\"\" preload=\"none\" poster=\"http://media.w3.org/2010/05/sintel/poster.png\">\n    <source id=\"mp4\" src=\"http://media.w3.org/2010/05/sintel/trailer.mp4\" type=\"video/mp4\">\n    <source id=\"webm\" src=\"http://media.w3.org/2010/05/sintel/trailer.webm\" type=\"video/webm\">\n    <source id=\"ogv\" src=\"http://media.w3.org/2010/05/sintel/trailer.ogv\" type=\"video/ogg\">\n    <p>Your user agent does not support the HTML5 Video element.</p>\n</video>","slug":"Markdown-2018-10-30-VideoInMarkdown-Demo","published":1,"updated":"2021-02-13T16:06:58.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaq60030cswgegtu76ot","content":"<video id=\"video\" controls preload=\"none\" poster=\"http://media.w3.org/2010/05/sintel/poster.png\">\n    <source id=\"mp4\" src=\"http://media.w3.org/2010/05/sintel/trailer.mp4\" type=\"video/mp4\">\n    <source id=\"webm\" src=\"http://media.w3.org/2010/05/sintel/trailer.webm\" type=\"video/webm\">\n    <source id=\"ogv\" src=\"http://media.w3.org/2010/05/sintel/trailer.ogv\" type=\"video/ogg\">\n    <p>Your user agent does not support the HTML5 Video element.</p>\n</video>","site":{"data":{}},"excerpt":"","more":"<video id=\"video\" controls preload=\"none\" poster=\"http://media.w3.org/2010/05/sintel/poster.png\">\n    <source id=\"mp4\" src=\"http://media.w3.org/2010/05/sintel/trailer.mp4\" type=\"video/mp4\">\n    <source id=\"webm\" src=\"http://media.w3.org/2010/05/sintel/trailer.webm\" type=\"video/webm\">\n    <source id=\"ogv\" src=\"http://media.w3.org/2010/05/sintel/trailer.ogv\" type=\"video/ogg\">\n    <p>Your user agent does not support the HTML5 Video element.</p>\n</video>"},{"title":"WordPress安装","date":"2018-10-28T18:29:49.000Z","_content":"# Wordpress 是什么\n\n一款最受欢迎的博客搭建软件，由Php编写，当然搭建的网站并不止博客，还有许多其他商务展示页面。\n\n# 安装\n\n安装过程跟Nextcloud相同，不复述。\n","source":"_posts/Linux/2018-10-29-WordPress安装.md","raw":"---\ntitle: WordPress安装\ndate: 2018-10-29 02:29:49\ncategories:\n- Linux\ntags:\n- Linux\n- Software\n- Web\n- Blog\n- Wordpress\n---\n# Wordpress 是什么\n\n一款最受欢迎的博客搭建软件，由Php编写，当然搭建的网站并不止博客，还有许多其他商务展示页面。\n\n# 安装\n\n安装过程跟Nextcloud相同，不复述。\n","slug":"Linux-2018-10-29-WordPress安装","published":1,"updated":"2021-02-13T16:06:58.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaq70035cswgn0dn57yu","content":"<h1 id=\"Wordpress-是什么\"><a href=\"#Wordpress-是什么\" class=\"headerlink\" title=\"Wordpress 是什么\"></a>Wordpress 是什么</h1><p>一款最受欢迎的博客搭建软件，由Php编写，当然搭建的网站并不止博客，还有许多其他商务展示页面。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装过程跟Nextcloud相同，不复述。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Wordpress-是什么\"><a href=\"#Wordpress-是什么\" class=\"headerlink\" title=\"Wordpress 是什么\"></a>Wordpress 是什么</h1><p>一款最受欢迎的博客搭建软件，由Php编写，当然搭建的网站并不止博客，还有许多其他商务展示页面。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装过程跟Nextcloud相同，不复述。</p>\n"},{"title":"获取随机图片的网站","date":"2018-10-28T17:49:55.000Z","_content":"# 目的\n\n随机获取一定大小的高清图片\n\n# Unsplash\n\n母站：https://unsplash.com/\n\n# 获取图片API\n\n正常的http请求即可，非RESTful\n\n源页：https://source.unsplash.com/\n\n## API\n\n`https://source.unsplash.com/random`\n\n## 带参API\n\n( 可能经过裁剪 )\n\n`https://source.unsplash.com/random/1920x1080`\n\n## 示例\n\n刷新本页可以看到不同的图片\n\n![随机图片](https://source.unsplash.com/random/1920x1080)\n\n## 注意\n\n由于是境外的源，国内的访问速度可能不太理想。\n\n没有找到国内比较好的替代站。","source":"_posts/Note/2018-10-29-获取随机图片的网站.md","raw":"---\ntitle: 获取随机图片的网站\ndate: 2018-10-29 01:49:55\ncategories:\n- Note\ntags:\n- Picture\n- API\n- Website\n---\n# 目的\n\n随机获取一定大小的高清图片\n\n# Unsplash\n\n母站：https://unsplash.com/\n\n# 获取图片API\n\n正常的http请求即可，非RESTful\n\n源页：https://source.unsplash.com/\n\n## API\n\n`https://source.unsplash.com/random`\n\n## 带参API\n\n( 可能经过裁剪 )\n\n`https://source.unsplash.com/random/1920x1080`\n\n## 示例\n\n刷新本页可以看到不同的图片\n\n![随机图片](https://source.unsplash.com/random/1920x1080)\n\n## 注意\n\n由于是境外的源，国内的访问速度可能不太理想。\n\n没有找到国内比较好的替代站。","slug":"Note-2018-10-29-获取随机图片的网站","published":1,"updated":"2021-02-13T16:06:58.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaq80038cswgizmbe5fq","content":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>随机获取一定大小的高清图片</p>\n<h1 id=\"Unsplash\"><a href=\"#Unsplash\" class=\"headerlink\" title=\"Unsplash\"></a>Unsplash</h1><p>母站：<a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noopener\">https://unsplash.com/</a></p>\n<h1 id=\"获取图片API\"><a href=\"#获取图片API\" class=\"headerlink\" title=\"获取图片API\"></a>获取图片API</h1><p>正常的http请求即可，非RESTful</p>\n<p>源页：<a href=\"https://source.unsplash.com/\" target=\"_blank\" rel=\"noopener\">https://source.unsplash.com/</a></p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p><code>https://source.unsplash.com/random</code></p>\n<h2 id=\"带参API\"><a href=\"#带参API\" class=\"headerlink\" title=\"带参API\"></a>带参API</h2><p>( 可能经过裁剪 )</p>\n<p><code>https://source.unsplash.com/random/1920x1080</code></p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>刷新本页可以看到不同的图片</p>\n<p><img src=\"https://source.unsplash.com/random/1920x1080\" alt=\"随机图片\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>由于是境外的源，国内的访问速度可能不太理想。</p>\n<p>没有找到国内比较好的替代站。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h1><p>随机获取一定大小的高清图片</p>\n<h1 id=\"Unsplash\"><a href=\"#Unsplash\" class=\"headerlink\" title=\"Unsplash\"></a>Unsplash</h1><p>母站：<a href=\"https://unsplash.com/\" target=\"_blank\" rel=\"noopener\">https://unsplash.com/</a></p>\n<h1 id=\"获取图片API\"><a href=\"#获取图片API\" class=\"headerlink\" title=\"获取图片API\"></a>获取图片API</h1><p>正常的http请求即可，非RESTful</p>\n<p>源页：<a href=\"https://source.unsplash.com/\" target=\"_blank\" rel=\"noopener\">https://source.unsplash.com/</a></p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><p><code>https://source.unsplash.com/random</code></p>\n<h2 id=\"带参API\"><a href=\"#带参API\" class=\"headerlink\" title=\"带参API\"></a>带参API</h2><p>( 可能经过裁剪 )</p>\n<p><code>https://source.unsplash.com/random/1920x1080</code></p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>刷新本页可以看到不同的图片</p>\n<p><img src=\"https://source.unsplash.com/random/1920x1080\" alt=\"随机图片\"></p>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>由于是境外的源，国内的访问速度可能不太理想。</p>\n<p>没有找到国内比较好的替代站。</p>\n"},{"title":"Computer-Network","date":"2018-11-01T06:28:51.000Z","_content":"# 子网掩码\n\n32位的连续1，用于划分子网。\n\n例：1111 1111 1111 1111 1111 1111 1111 1111 = 255 255 255 255 = 255.255.255.255\n\n# CIDR\n\n192.168.1.0/24，表示32位中前24位为网络前缀（个人理解为主路由的IP地址），即还有8位用于表示`SubnetID`与`HostID`\n\n例：\n192.168.1.0/24 使用掩码255.255.255.240 划分子网，其可用子网数为（），每个子网内可用主机地址数为（）\n* $Length(255.255.255.240)= 8+8+8+4 = 28$，子网数为 $2^{28-24}=2^4=16$个，除去子网全0和全1的地址，子网数为$16-2=14$个。\n* 32位中剩余4位，同划分子网，也有$16$个HostID，再去掉全0和全1\n答案： $14\\quad14$\n\n# Socket\n\n# TCP\n\n# UDP\n\n# HTTP\n\n* HTTP 协议是TCP/IP家族的一员，工作于应用层。\n* 构建于TCP/IP上，默认端口为80\n* HTTP的连接是无状态的\n\n## HTTP包\n\nHTTP的包形如：\n\n    <Method> <RequestURL> <Version>\n\n    <Headers>\n\n    <entity-body>\n\nMethod包含四种方法:\n- GET -- 查\n- POST -- 增\n- DELETE -- 删\n- PUT -- 改\n\n## GET\n\nGET方法应只用于信息的获取，不增加/修改数据或影响数据的状态，是安全且幂等的。\n> 幂等：对同一URL地址发起的多个请求应该得到相同的结果\n\nGET请求报文示例：\n\n    GET /books/?sex=man&name=Professional HTTP/1.1\n    Host: www.example.com\n    User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)\n    Gecko/20050225 Firefox/1.0.1\n    Connection: Keep-Alive\n\nPOST请求报文示例：\n\n    POST / HTTP/1.1\n    Host: www.example.com\n    User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)\n    Gecko/20050225 Firefox/1.0.1\n    Content-Type: application/x-www-form-urlencoded\n    Content-Length: 40\n    Connection: Keep-Alive\n\n    sex=man&name=Professional  \n\n## POST","source":"_posts/Note/2018-11-01-Computer-Network.md","raw":"---\ntitle: Computer-Network\ndate: 2018-11-01 14:28:51\ncategories:\n- Network\ntags:\n- Note\n- Network\n---\n# 子网掩码\n\n32位的连续1，用于划分子网。\n\n例：1111 1111 1111 1111 1111 1111 1111 1111 = 255 255 255 255 = 255.255.255.255\n\n# CIDR\n\n192.168.1.0/24，表示32位中前24位为网络前缀（个人理解为主路由的IP地址），即还有8位用于表示`SubnetID`与`HostID`\n\n例：\n192.168.1.0/24 使用掩码255.255.255.240 划分子网，其可用子网数为（），每个子网内可用主机地址数为（）\n* $Length(255.255.255.240)= 8+8+8+4 = 28$，子网数为 $2^{28-24}=2^4=16$个，除去子网全0和全1的地址，子网数为$16-2=14$个。\n* 32位中剩余4位，同划分子网，也有$16$个HostID，再去掉全0和全1\n答案： $14\\quad14$\n\n# Socket\n\n# TCP\n\n# UDP\n\n# HTTP\n\n* HTTP 协议是TCP/IP家族的一员，工作于应用层。\n* 构建于TCP/IP上，默认端口为80\n* HTTP的连接是无状态的\n\n## HTTP包\n\nHTTP的包形如：\n\n    <Method> <RequestURL> <Version>\n\n    <Headers>\n\n    <entity-body>\n\nMethod包含四种方法:\n- GET -- 查\n- POST -- 增\n- DELETE -- 删\n- PUT -- 改\n\n## GET\n\nGET方法应只用于信息的获取，不增加/修改数据或影响数据的状态，是安全且幂等的。\n> 幂等：对同一URL地址发起的多个请求应该得到相同的结果\n\nGET请求报文示例：\n\n    GET /books/?sex=man&name=Professional HTTP/1.1\n    Host: www.example.com\n    User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)\n    Gecko/20050225 Firefox/1.0.1\n    Connection: Keep-Alive\n\nPOST请求报文示例：\n\n    POST / HTTP/1.1\n    Host: www.example.com\n    User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)\n    Gecko/20050225 Firefox/1.0.1\n    Content-Type: application/x-www-form-urlencoded\n    Content-Length: 40\n    Connection: Keep-Alive\n\n    sex=man&name=Professional  \n\n## POST","slug":"Note-2018-11-01-Computer-Network","published":1,"updated":"2021-02-13T16:06:58.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaqa003ccswgkwavtbab","content":"<h1 id=\"子网掩码\"><a href=\"#子网掩码\" class=\"headerlink\" title=\"子网掩码\"></a>子网掩码</h1><p>32位的连续1，用于划分子网。</p>\n<p>例：1111 1111 1111 1111 1111 1111 1111 1111 = 255 255 255 255 = 255.255.255.255</p>\n<h1 id=\"CIDR\"><a href=\"#CIDR\" class=\"headerlink\" title=\"CIDR\"></a>CIDR</h1><p>192.168.1.0/24，表示32位中前24位为网络前缀（个人理解为主路由的IP地址），即还有8位用于表示<code>SubnetID</code>与<code>HostID</code></p>\n<p>例：<br>192.168.1.0/24 使用掩码255.255.255.240 划分子网，其可用子网数为（），每个子网内可用主机地址数为（）</p>\n<ul>\n<li>$Length(255.255.255.240)= 8+8+8+4 = 28$，子网数为 $2^{28-24}=2^4=16$个，除去子网全0和全1的地址，子网数为$16-2=14$个。</li>\n<li>32位中剩余4位，同划分子网，也有$16$个HostID，再去掉全0和全1<br>答案： $14\\quad14$</li>\n</ul>\n<h1 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h1><h1 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h1><h1 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h1><h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><ul>\n<li>HTTP 协议是TCP/IP家族的一员，工作于应用层。</li>\n<li>构建于TCP/IP上，默认端口为80</li>\n<li>HTTP的连接是无状态的</li>\n</ul>\n<h2 id=\"HTTP包\"><a href=\"#HTTP包\" class=\"headerlink\" title=\"HTTP包\"></a>HTTP包</h2><p>HTTP的包形如：</p>\n<pre><code>&lt;Method&gt; &lt;RequestURL&gt; &lt;Version&gt;\n\n&lt;Headers&gt;\n\n&lt;entity-body&gt;\n</code></pre><p>Method包含四种方法:</p>\n<ul>\n<li>GET — 查</li>\n<li>POST — 增</li>\n<li>DELETE — 删</li>\n<li>PUT — 改</li>\n</ul>\n<h2 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h2><p>GET方法应只用于信息的获取，不增加/修改数据或影响数据的状态，是安全且幂等的。</p>\n<blockquote>\n<p>幂等：对同一URL地址发起的多个请求应该得到相同的结果</p>\n</blockquote>\n<p>GET请求报文示例：</p>\n<pre><code>GET /books/?sex=man&amp;name=Professional HTTP/1.1\nHost: www.example.com\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)\nGecko/20050225 Firefox/1.0.1\nConnection: Keep-Alive\n</code></pre><p>POST请求报文示例：</p>\n<pre><code>POST / HTTP/1.1\nHost: www.example.com\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)\nGecko/20050225 Firefox/1.0.1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 40\nConnection: Keep-Alive\n\nsex=man&amp;name=Professional  \n</code></pre><h2 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"子网掩码\"><a href=\"#子网掩码\" class=\"headerlink\" title=\"子网掩码\"></a>子网掩码</h1><p>32位的连续1，用于划分子网。</p>\n<p>例：1111 1111 1111 1111 1111 1111 1111 1111 = 255 255 255 255 = 255.255.255.255</p>\n<h1 id=\"CIDR\"><a href=\"#CIDR\" class=\"headerlink\" title=\"CIDR\"></a>CIDR</h1><p>192.168.1.0/24，表示32位中前24位为网络前缀（个人理解为主路由的IP地址），即还有8位用于表示<code>SubnetID</code>与<code>HostID</code></p>\n<p>例：<br>192.168.1.0/24 使用掩码255.255.255.240 划分子网，其可用子网数为（），每个子网内可用主机地址数为（）</p>\n<ul>\n<li>$Length(255.255.255.240)= 8+8+8+4 = 28$，子网数为 $2^{28-24}=2^4=16$个，除去子网全0和全1的地址，子网数为$16-2=14$个。</li>\n<li>32位中剩余4位，同划分子网，也有$16$个HostID，再去掉全0和全1<br>答案： $14\\quad14$</li>\n</ul>\n<h1 id=\"Socket\"><a href=\"#Socket\" class=\"headerlink\" title=\"Socket\"></a>Socket</h1><h1 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h1><h1 id=\"UDP\"><a href=\"#UDP\" class=\"headerlink\" title=\"UDP\"></a>UDP</h1><h1 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h1><ul>\n<li>HTTP 协议是TCP/IP家族的一员，工作于应用层。</li>\n<li>构建于TCP/IP上，默认端口为80</li>\n<li>HTTP的连接是无状态的</li>\n</ul>\n<h2 id=\"HTTP包\"><a href=\"#HTTP包\" class=\"headerlink\" title=\"HTTP包\"></a>HTTP包</h2><p>HTTP的包形如：</p>\n<pre><code>&lt;Method&gt; &lt;RequestURL&gt; &lt;Version&gt;\n\n&lt;Headers&gt;\n\n&lt;entity-body&gt;\n</code></pre><p>Method包含四种方法:</p>\n<ul>\n<li>GET — 查</li>\n<li>POST — 增</li>\n<li>DELETE — 删</li>\n<li>PUT — 改</li>\n</ul>\n<h2 id=\"GET\"><a href=\"#GET\" class=\"headerlink\" title=\"GET\"></a>GET</h2><p>GET方法应只用于信息的获取，不增加/修改数据或影响数据的状态，是安全且幂等的。</p>\n<blockquote>\n<p>幂等：对同一URL地址发起的多个请求应该得到相同的结果</p>\n</blockquote>\n<p>GET请求报文示例：</p>\n<pre><code>GET /books/?sex=man&amp;name=Professional HTTP/1.1\nHost: www.example.com\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)\nGecko/20050225 Firefox/1.0.1\nConnection: Keep-Alive\n</code></pre><p>POST请求报文示例：</p>\n<pre><code>POST / HTTP/1.1\nHost: www.example.com\nUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)\nGecko/20050225 Firefox/1.0.1\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 40\nConnection: Keep-Alive\n\nsex=man&amp;name=Professional  \n</code></pre><h2 id=\"POST\"><a href=\"#POST\" class=\"headerlink\" title=\"POST\"></a>POST</h2>"},{"mathjax":true,"title":"Markdown+Latex书写公式","date":"2018-10-30T19:33:20.000Z","_content":"\n\n\n# 在文本中插入公式\n\n## 如何在正文中插入公式?\n\nmarkdown中使用关键字对`\\$ 正文 \\$ `或者`\\$\\$ 正文 \\$\\$` 在文字插入公式.\n\n## 1.在文字的同行中插入公式\n\n在文字同行中插入公式使用关键字对$ 正文 $ (同行插入即不分行) \n可能你会问，那怎么输入‘$’ 符号，使用转移字符就可以，即’\\$’。\n\n    代码:  我是在文字同行中插入公式: $   f(x)=w^Tx+b $   \n\n我是在文字同行中插入公式: $   f(x)=w^Tx+b $   \n\n    代码:  我是在文字中插入\\$: $$ 我是  f(\\$)=\\$^Tx+b $$   \n\n我是在文字中插入$ : $$  f(\\$)=\\$^Tx+b  $$   \n\n(以上不起另一行，但用\\$不起效果，用\\$\\$解决)\n\n## 2. 插入公式另起一行\n\n    代码:  我是在新的一行中插入公式: $$   f(x)=w^Tx+b $$\n\n我是在新的一行中插入公式: $$  f(x)=w^Tx+b  $$\n\n---\n\n# 编辑上标和下标\n\n## 1. 编辑单个上标或者下标\n\n编辑公式使用上标的关键字是`$ ^ $` ，下标是关键字是`$ _ $` .\n\n    代码:  我是在公式中插入上/下标: $   f(x)=w^T_ix_i^2+b_i $\n\n在公式中插入上/下标:$$   f(x)=w^T_ix_i^2+b_i $$\n\n## 2. 编辑双上标或者下标(下/上标为公式)\n\n如果要在公式使用双下/上标或者上/下标插入公式，使用关键字是`$ ^{上标内容} $` ，下标是关键字是`$ _{下标内容} $` 也就是把上/下标的内容包裹到`$ { } $` 内，这个也适用于其他关键字操作.\n\n    代码:  我是在新的一行中插入公式: $$   f(x)=w^{T^t}_{ij}x _{x \\in X_i}+b_{ij} $$\n\n在新的一行中插入公式: $$f(x)=w^{T^t}_{ij}x _{x \\in X_i}+b_{ij}$$\n\n---\n\n# 编辑特殊符号\n\n## 1. 常见的希腊符号\n\n    代码:  我是在公式中插入希腊符号: $$ f(\\alpha)=\\beta w^T_i x_i^{\\theta}+\\mu_i $$\n\n$$   f(\\alpha)=\\beta w^T_i x_i^{\\theta}+\\mu_i $$\n\n| 大写希腊符号 | 小写希腊符号 | 大写转义符号 | 小写转移符号 | 大写效果 | 小写效果 |\n|:---:|:---:|:---:|:---:|:---:|:---:|\n| Α | α\t|        | \\alpha   |           | $ \\alpha $    |\n| Β | β |        | \\beta    |           | $ \\beta $     |\n| Γ | γ | \\Gamma | \\gamma   | $\\Gamma $ | $ \\gamma $    |\n| Δ | δ | \\Delta | \\delta   | $\\Delta $ | $ \\delta $    |\n|   | ε |        | \\epsilon |           | $ \\epsilon $  |\n|   | ζ |        | \\zeta    |           | $ \\zeta $     |\n|   | η |        | \\eta     |           | $ \\eta $      |\n| Θ | θ | \\Theta | \\theta   | $\\Theta $ | $ \\theta $    |\n|   | ι |        | \\iota    |           | $ \\iota $     |\n|   | κ |        | \\kappa   |           | $ \\kappa $    |\n| ∧ | λ | \\Lambda| \\lambda  | $\\Lambda $| $ \\lambda $   |\n|   | μ |        | \\mu      |           | $ \\mu $       |\n|   | ν |        | \\nu      |           | $ \\nu $       |\n| Ξ | ξ | \\Xi    | \\xi      | $\\Xi $    | $ \\xi $       |\n|   | ρ |        | \\omicron |           | $ \\omicron $  |\n| ∏ | π | \\Pi    | \\pi      | $\\Pi $    | $ \\pi $       |\n|   | ο |        | \\rho     |           | $ \\rho $      |\n| ∑ | σ | \\Sigma | \\sigma   | $\\Sigma $ | $ \\sigma $    |\n|   | τ |        | \\tau     |           | $ \\tau $      |\n|   | υ |        | \\upsilon |           | $ \\upsilon $  |\n| Φ | φ | \\Phi   | \\phi     | $\\Phi $   | $ \\phi $      |\n|   | χ |        | \\chi     |           | $ \\chi $      |\n| Ψ | ξ | \\Psi   | \\psi     | $\\Psi $   | $ \\psi $      |\n| Ω | ξ | \\Omega | \\omega   | $\\Omega $ | $ \\omega $    |\n\n## 2. 常见的数学符号\n\n编辑数学符号同样也是通过转义字符来实现的，即$ \\ $ ，转移字符配合不同指令即可$ \\alpha $ .\n\n    代码:  带数学符号的公式: $$   L(f) = \\sum_{i=1}^D(\\tilde{y_i}-y_i)^2=\\sum_{i=1}^D(wx_i+b-y_i)^2 $$\n\n公式: $$   L(f) = \\sum_{i=1}^D(\\tilde{y_i}-y_i)^2=\\sum_{i=1}^D(wx_i+b-y_i)^2 $$\n\n---\n\n# 常用的数学符号\n\n| 转义符号 | 效果 |\n|:---:|:---:|\n| \\log_{x}y = \\arccos z                 | $ \\log_{x}y = \\arccos z $                 |\n| \\frac{a} {b}                          | $ \\frac{a} {b} $                          |\n| _{a}^{b}\\textrm{C}                    | $ _{a}^{b}\\textrm{C} $                    |\n| \\frac{\\partial {z_x}}{\\partial x}     | $ \\frac{\\partial {z_x}}{\\partial x} $     |\n| \\frac{\\partial^2 {x}}{\\partial x^2}   | $ \\frac{\\partial^2 {x}}{\\partial x^2} $   |\n| \\frac{\\mathrm{d} y}{\\mathrm{d} x}     | $ \\frac{\\mathrm{d} y}{\\mathrm{d} x} $     |\n| \\int x                                | $ \\int x $                                |\n| \\int_{a}^{b}x                         | $ \\int_{a}^{b}x $                         |\n| \\oint a                               | $ \\oint a $                               |\n| \\oint_{a}^{b}C                        | $ \\oint_{a}^{b}C $                        |\n| \\iint_{a}^{v}C                        | $ \\iint_{a}^{v}C $                        |\n| \\bigcap A                             | $ \\bigcap A $                             |\n| \\bigcap_{a}^{b}C                      | $ \\bigcap_{a}^{b}C $                      |\n| \\bigcup c                             | $ \\bigcup c $                             |\n| \\lim_{c}X                             | $ \\lim_{c}X $                             |\n| \\sum a                                | $ \\sum a $                                |\n| \\sum_{a}^{b}C                         | $ \\sum_{a}^{b}C $                         |\n| \\sqrt{X}                              | $ \\sqrt{X} $                              |\n| \\sqrt[a]{X}                           | $ \\sqrt[a]{X} $                           |\n| \\prod X                               | $ \\prod X $                               |\n| \\prod_{a}^{b} X                       | $ \\prod_{a}^{b} X $                       |\n| \\coprod X                             | $ \\coprod X $                             |\n| \\coprod_{a}^{b} X                     | $ \\coprod_{a}^{b} X $                     |\n| \\left [ a \\right ]                    | $ \\left [ a \\right ]  $                   |\n| \\left ( a\\right )                     | $ \\left ( a\\right )  $                    |\n| \\left { a \\right }                    | $$ \\left\\{ a \\right\\} $$                  |\n| \\left&#124; a \\right&#124;            | $ \\left&#124; a \\right&#124; $            |\n| \\left \\langle a \\right \\rangle        | $ \\left \\langle a \\right \\rangle $        |\n| \\left \\lfloor a \\right \\rfloor        | $ \\left \\lfloor a \\right \\rfloor $        |\n| \\left \\lceil a \\right \\rceil          | $ \\left \\lceil a \\right \\rceil $          |\n| \\in A                                 | $ \\in A $                                 |\n| \\supseteqq A                          | $ \\supseteqq A $                          |\n| \\approx                               | $ \\approx $                               |\n| \\sum\\limits_{i=1}^{\\infty}            | $ \\sum\\limits_{i=1}^{\\infty} $            |\n\n# 可视化编辑器\n\n[可视化编辑器](https://latex.codecogs.com/eqneditor/editor.php)\n\n<iframe src=\"https://latex.codecogs.com/eqneditor/editor.php\" height=\"500\" width=\"100%\">\n","source":"_posts/Markdown/2018-10-31-Markdown-Latex书写公式.md","raw":"---\nmathjax: true\ntitle: Markdown+Latex书写公式\ndate: 2018-10-31 03:33:20\ncategories:\n- Markdown\ntags:\n- Note\n- Markdown\n---\n\n\n\n# 在文本中插入公式\n\n## 如何在正文中插入公式?\n\nmarkdown中使用关键字对`\\$ 正文 \\$ `或者`\\$\\$ 正文 \\$\\$` 在文字插入公式.\n\n## 1.在文字的同行中插入公式\n\n在文字同行中插入公式使用关键字对$ 正文 $ (同行插入即不分行) \n可能你会问，那怎么输入‘$’ 符号，使用转移字符就可以，即’\\$’。\n\n    代码:  我是在文字同行中插入公式: $   f(x)=w^Tx+b $   \n\n我是在文字同行中插入公式: $   f(x)=w^Tx+b $   \n\n    代码:  我是在文字中插入\\$: $$ 我是  f(\\$)=\\$^Tx+b $$   \n\n我是在文字中插入$ : $$  f(\\$)=\\$^Tx+b  $$   \n\n(以上不起另一行，但用\\$不起效果，用\\$\\$解决)\n\n## 2. 插入公式另起一行\n\n    代码:  我是在新的一行中插入公式: $$   f(x)=w^Tx+b $$\n\n我是在新的一行中插入公式: $$  f(x)=w^Tx+b  $$\n\n---\n\n# 编辑上标和下标\n\n## 1. 编辑单个上标或者下标\n\n编辑公式使用上标的关键字是`$ ^ $` ，下标是关键字是`$ _ $` .\n\n    代码:  我是在公式中插入上/下标: $   f(x)=w^T_ix_i^2+b_i $\n\n在公式中插入上/下标:$$   f(x)=w^T_ix_i^2+b_i $$\n\n## 2. 编辑双上标或者下标(下/上标为公式)\n\n如果要在公式使用双下/上标或者上/下标插入公式，使用关键字是`$ ^{上标内容} $` ，下标是关键字是`$ _{下标内容} $` 也就是把上/下标的内容包裹到`$ { } $` 内，这个也适用于其他关键字操作.\n\n    代码:  我是在新的一行中插入公式: $$   f(x)=w^{T^t}_{ij}x _{x \\in X_i}+b_{ij} $$\n\n在新的一行中插入公式: $$f(x)=w^{T^t}_{ij}x _{x \\in X_i}+b_{ij}$$\n\n---\n\n# 编辑特殊符号\n\n## 1. 常见的希腊符号\n\n    代码:  我是在公式中插入希腊符号: $$ f(\\alpha)=\\beta w^T_i x_i^{\\theta}+\\mu_i $$\n\n$$   f(\\alpha)=\\beta w^T_i x_i^{\\theta}+\\mu_i $$\n\n| 大写希腊符号 | 小写希腊符号 | 大写转义符号 | 小写转移符号 | 大写效果 | 小写效果 |\n|:---:|:---:|:---:|:---:|:---:|:---:|\n| Α | α\t|        | \\alpha   |           | $ \\alpha $    |\n| Β | β |        | \\beta    |           | $ \\beta $     |\n| Γ | γ | \\Gamma | \\gamma   | $\\Gamma $ | $ \\gamma $    |\n| Δ | δ | \\Delta | \\delta   | $\\Delta $ | $ \\delta $    |\n|   | ε |        | \\epsilon |           | $ \\epsilon $  |\n|   | ζ |        | \\zeta    |           | $ \\zeta $     |\n|   | η |        | \\eta     |           | $ \\eta $      |\n| Θ | θ | \\Theta | \\theta   | $\\Theta $ | $ \\theta $    |\n|   | ι |        | \\iota    |           | $ \\iota $     |\n|   | κ |        | \\kappa   |           | $ \\kappa $    |\n| ∧ | λ | \\Lambda| \\lambda  | $\\Lambda $| $ \\lambda $   |\n|   | μ |        | \\mu      |           | $ \\mu $       |\n|   | ν |        | \\nu      |           | $ \\nu $       |\n| Ξ | ξ | \\Xi    | \\xi      | $\\Xi $    | $ \\xi $       |\n|   | ρ |        | \\omicron |           | $ \\omicron $  |\n| ∏ | π | \\Pi    | \\pi      | $\\Pi $    | $ \\pi $       |\n|   | ο |        | \\rho     |           | $ \\rho $      |\n| ∑ | σ | \\Sigma | \\sigma   | $\\Sigma $ | $ \\sigma $    |\n|   | τ |        | \\tau     |           | $ \\tau $      |\n|   | υ |        | \\upsilon |           | $ \\upsilon $  |\n| Φ | φ | \\Phi   | \\phi     | $\\Phi $   | $ \\phi $      |\n|   | χ |        | \\chi     |           | $ \\chi $      |\n| Ψ | ξ | \\Psi   | \\psi     | $\\Psi $   | $ \\psi $      |\n| Ω | ξ | \\Omega | \\omega   | $\\Omega $ | $ \\omega $    |\n\n## 2. 常见的数学符号\n\n编辑数学符号同样也是通过转义字符来实现的，即$ \\ $ ，转移字符配合不同指令即可$ \\alpha $ .\n\n    代码:  带数学符号的公式: $$   L(f) = \\sum_{i=1}^D(\\tilde{y_i}-y_i)^2=\\sum_{i=1}^D(wx_i+b-y_i)^2 $$\n\n公式: $$   L(f) = \\sum_{i=1}^D(\\tilde{y_i}-y_i)^2=\\sum_{i=1}^D(wx_i+b-y_i)^2 $$\n\n---\n\n# 常用的数学符号\n\n| 转义符号 | 效果 |\n|:---:|:---:|\n| \\log_{x}y = \\arccos z                 | $ \\log_{x}y = \\arccos z $                 |\n| \\frac{a} {b}                          | $ \\frac{a} {b} $                          |\n| _{a}^{b}\\textrm{C}                    | $ _{a}^{b}\\textrm{C} $                    |\n| \\frac{\\partial {z_x}}{\\partial x}     | $ \\frac{\\partial {z_x}}{\\partial x} $     |\n| \\frac{\\partial^2 {x}}{\\partial x^2}   | $ \\frac{\\partial^2 {x}}{\\partial x^2} $   |\n| \\frac{\\mathrm{d} y}{\\mathrm{d} x}     | $ \\frac{\\mathrm{d} y}{\\mathrm{d} x} $     |\n| \\int x                                | $ \\int x $                                |\n| \\int_{a}^{b}x                         | $ \\int_{a}^{b}x $                         |\n| \\oint a                               | $ \\oint a $                               |\n| \\oint_{a}^{b}C                        | $ \\oint_{a}^{b}C $                        |\n| \\iint_{a}^{v}C                        | $ \\iint_{a}^{v}C $                        |\n| \\bigcap A                             | $ \\bigcap A $                             |\n| \\bigcap_{a}^{b}C                      | $ \\bigcap_{a}^{b}C $                      |\n| \\bigcup c                             | $ \\bigcup c $                             |\n| \\lim_{c}X                             | $ \\lim_{c}X $                             |\n| \\sum a                                | $ \\sum a $                                |\n| \\sum_{a}^{b}C                         | $ \\sum_{a}^{b}C $                         |\n| \\sqrt{X}                              | $ \\sqrt{X} $                              |\n| \\sqrt[a]{X}                           | $ \\sqrt[a]{X} $                           |\n| \\prod X                               | $ \\prod X $                               |\n| \\prod_{a}^{b} X                       | $ \\prod_{a}^{b} X $                       |\n| \\coprod X                             | $ \\coprod X $                             |\n| \\coprod_{a}^{b} X                     | $ \\coprod_{a}^{b} X $                     |\n| \\left [ a \\right ]                    | $ \\left [ a \\right ]  $                   |\n| \\left ( a\\right )                     | $ \\left ( a\\right )  $                    |\n| \\left { a \\right }                    | $$ \\left\\{ a \\right\\} $$                  |\n| \\left&#124; a \\right&#124;            | $ \\left&#124; a \\right&#124; $            |\n| \\left \\langle a \\right \\rangle        | $ \\left \\langle a \\right \\rangle $        |\n| \\left \\lfloor a \\right \\rfloor        | $ \\left \\lfloor a \\right \\rfloor $        |\n| \\left \\lceil a \\right \\rceil          | $ \\left \\lceil a \\right \\rceil $          |\n| \\in A                                 | $ \\in A $                                 |\n| \\supseteqq A                          | $ \\supseteqq A $                          |\n| \\approx                               | $ \\approx $                               |\n| \\sum\\limits_{i=1}^{\\infty}            | $ \\sum\\limits_{i=1}^{\\infty} $            |\n\n# 可视化编辑器\n\n[可视化编辑器](https://latex.codecogs.com/eqneditor/editor.php)\n\n<iframe src=\"https://latex.codecogs.com/eqneditor/editor.php\" height=\"500\" width=\"100%\">\n","slug":"Markdown-2018-10-31-Markdown-Latex书写公式","published":1,"updated":"2021-02-13T16:06:58.337Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaqb003fcswgytfd0yqw","content":"<h1 id=\"在文本中插入公式\"><a href=\"#在文本中插入公式\" class=\"headerlink\" title=\"在文本中插入公式\"></a>在文本中插入公式</h1><h2 id=\"如何在正文中插入公式\"><a href=\"#如何在正文中插入公式\" class=\"headerlink\" title=\"如何在正文中插入公式?\"></a>如何在正文中插入公式?</h2><p>markdown中使用关键字对<code>\\$ 正文 \\$</code>或者<code>\\$\\$ 正文 \\$\\$</code> 在文字插入公式.</p>\n<h2 id=\"1-在文字的同行中插入公式\"><a href=\"#1-在文字的同行中插入公式\" class=\"headerlink\" title=\"1.在文字的同行中插入公式\"></a>1.在文字的同行中插入公式</h2><p>在文字同行中插入公式使用关键字对$ 正文 $ (同行插入即不分行)<br>可能你会问，那怎么输入‘$’ 符号，使用转移字符就可以，即’$’。</p>\n<pre><code>代码:  我是在文字同行中插入公式: $   f(x)=w^Tx+b $   \n</code></pre><p>我是在文字同行中插入公式: $   f(x)=w^Tx+b $   </p>\n<pre><code>代码:  我是在文字中插入\\$: $$ 我是  f(\\$)=\\$^Tx+b $$   \n</code></pre><p>我是在文字中插入$ : <script type=\"math/tex\">f(\\$)=\\$^Tx+b</script>   </p>\n<p>(以上不起另一行，但用$不起效果，用$$解决)</p>\n<h2 id=\"2-插入公式另起一行\"><a href=\"#2-插入公式另起一行\" class=\"headerlink\" title=\"2. 插入公式另起一行\"></a>2. 插入公式另起一行</h2><pre><code>代码:  我是在新的一行中插入公式: $$   f(x)=w^Tx+b $$\n</code></pre><p>我是在新的一行中插入公式: <script type=\"math/tex\">f(x)=w^Tx+b</script></p>\n<hr>\n<h1 id=\"编辑上标和下标\"><a href=\"#编辑上标和下标\" class=\"headerlink\" title=\"编辑上标和下标\"></a>编辑上标和下标</h1><h2 id=\"1-编辑单个上标或者下标\"><a href=\"#1-编辑单个上标或者下标\" class=\"headerlink\" title=\"1. 编辑单个上标或者下标\"></a>1. 编辑单个上标或者下标</h2><p>编辑公式使用上标的关键字是<script type=\"math/tex\">^</script> ，下标是关键字是<script type=\"math/tex\">_</script> .</p>\n<pre><code>代码:  我是在公式中插入上/下标: $   f(x)=w^T_ix_i^2+b_i $\n</code></pre><p>在公式中插入上/下标:<script type=\"math/tex\">f(x)=w^T_ix_i^2+b_i</script></p>\n<h2 id=\"2-编辑双上标或者下标-下-上标为公式\"><a href=\"#2-编辑双上标或者下标-下-上标为公式\" class=\"headerlink\" title=\"2. 编辑双上标或者下标(下/上标为公式)\"></a>2. 编辑双上标或者下标(下/上标为公式)</h2><p>如果要在公式使用双下/上标或者上/下标插入公式，使用关键字是<script type=\"math/tex\">^{上标内容}</script> ，下标是关键字是<script type=\"math/tex\">_{下标内容}</script> 也就是把上/下标的内容包裹到<script type=\"math/tex\">{ }</script> 内，这个也适用于其他关键字操作.</p>\n<pre><code>代码:  我是在新的一行中插入公式: $$   f(x)=w^{T^t}_{ij}x _{x \\in X_i}+b_{ij} $$\n</code></pre><p>在新的一行中插入公式: <script type=\"math/tex\">f(x)=w^{T^t}_{ij}x _{x \\in X_i}+b_{ij}</script></p>\n<hr>\n<h1 id=\"编辑特殊符号\"><a href=\"#编辑特殊符号\" class=\"headerlink\" title=\"编辑特殊符号\"></a>编辑特殊符号</h1><h2 id=\"1-常见的希腊符号\"><a href=\"#1-常见的希腊符号\" class=\"headerlink\" title=\"1. 常见的希腊符号\"></a>1. 常见的希腊符号</h2><pre><code>代码:  我是在公式中插入希腊符号: $$ f(\\alpha)=\\beta w^T_i x_i^{\\theta}+\\mu_i $$\n</code></pre><script type=\"math/tex; mode=display\">f(\\alpha)=\\beta w^T_i x_i^{\\theta}+\\mu_i</script><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">大写希腊符号</th>\n<th style=\"text-align:center\">小写希腊符号</th>\n<th style=\"text-align:center\">大写转义符号</th>\n<th style=\"text-align:center\">小写转移符号</th>\n<th style=\"text-align:center\">大写效果</th>\n<th style=\"text-align:center\">小写效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Α</td>\n<td style=\"text-align:center\">α</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\alpha</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\alpha $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Β</td>\n<td style=\"text-align:center\">β</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\beta</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\beta $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Γ</td>\n<td style=\"text-align:center\">γ</td>\n<td style=\"text-align:center\">\\Gamma</td>\n<td style=\"text-align:center\">\\gamma</td>\n<td style=\"text-align:center\">$\\Gamma $</td>\n<td style=\"text-align:center\">$ \\gamma $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Δ</td>\n<td style=\"text-align:center\">δ</td>\n<td style=\"text-align:center\">\\Delta</td>\n<td style=\"text-align:center\">\\delta</td>\n<td style=\"text-align:center\">$\\Delta $</td>\n<td style=\"text-align:center\">$ \\delta $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ε</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\epsilon</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\epsilon $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ζ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\zeta</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\zeta $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">η</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\eta</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\eta $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Θ</td>\n<td style=\"text-align:center\">θ</td>\n<td style=\"text-align:center\">\\Theta</td>\n<td style=\"text-align:center\">\\theta</td>\n<td style=\"text-align:center\">$\\Theta $</td>\n<td style=\"text-align:center\">$ \\theta $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ι</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\iota</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\iota $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">κ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\kappa</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\kappa $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∧</td>\n<td style=\"text-align:center\">λ</td>\n<td style=\"text-align:center\">\\Lambda</td>\n<td style=\"text-align:center\">\\lambda</td>\n<td style=\"text-align:center\">$\\Lambda $</td>\n<td style=\"text-align:center\">$ \\lambda $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">μ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\mu</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\mu $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ν</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\nu</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\nu $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ξ</td>\n<td style=\"text-align:center\">ξ</td>\n<td style=\"text-align:center\">\\Xi</td>\n<td style=\"text-align:center\">\\xi</td>\n<td style=\"text-align:center\">$\\Xi $</td>\n<td style=\"text-align:center\">$ \\xi $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ρ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\omicron</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\omicron $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∏</td>\n<td style=\"text-align:center\">π</td>\n<td style=\"text-align:center\">\\Pi</td>\n<td style=\"text-align:center\">\\pi</td>\n<td style=\"text-align:center\">$\\Pi $</td>\n<td style=\"text-align:center\">$ \\pi $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ο</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\rho</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\rho $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∑</td>\n<td style=\"text-align:center\">σ</td>\n<td style=\"text-align:center\">\\Sigma</td>\n<td style=\"text-align:center\">\\sigma</td>\n<td style=\"text-align:center\">$\\Sigma $</td>\n<td style=\"text-align:center\">$ \\sigma $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">τ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\tau</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\tau $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">υ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\upsilon</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\upsilon $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Φ</td>\n<td style=\"text-align:center\">φ</td>\n<td style=\"text-align:center\">\\Phi</td>\n<td style=\"text-align:center\">\\phi</td>\n<td style=\"text-align:center\">$\\Phi $</td>\n<td style=\"text-align:center\">$ \\phi $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">χ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\chi</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\chi $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ψ</td>\n<td style=\"text-align:center\">ξ</td>\n<td style=\"text-align:center\">\\Psi</td>\n<td style=\"text-align:center\">\\psi</td>\n<td style=\"text-align:center\">$\\Psi $</td>\n<td style=\"text-align:center\">$ \\psi $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ω</td>\n<td style=\"text-align:center\">ξ</td>\n<td style=\"text-align:center\">\\Omega</td>\n<td style=\"text-align:center\">\\omega</td>\n<td style=\"text-align:center\">$\\Omega $</td>\n<td style=\"text-align:center\">$ \\omega $</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2-常见的数学符号\"><a href=\"#2-常见的数学符号\" class=\"headerlink\" title=\"2. 常见的数学符号\"></a>2. 常见的数学符号</h2><p>编辑数学符号同样也是通过转义字符来实现的，即$ \\ $ ，转移字符配合不同指令即可$ \\alpha $ .</p>\n<pre><code>代码:  带数学符号的公式: $$   L(f) = \\sum_{i=1}^D(\\tilde{y_i}-y_i)^2=\\sum_{i=1}^D(wx_i+b-y_i)^2 $$\n</code></pre><p>公式: <script type=\"math/tex\">L(f) = \\sum_{i=1}^D(\\tilde{y_i}-y_i)^2=\\sum_{i=1}^D(wx_i+b-y_i)^2</script></p>\n<hr>\n<h1 id=\"常用的数学符号\"><a href=\"#常用的数学符号\" class=\"headerlink\" title=\"常用的数学符号\"></a>常用的数学符号</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">转义符号</th>\n<th style=\"text-align:center\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\log_{x}y = \\arccos z</td>\n<td style=\"text-align:center\">$ \\log_{x}y = \\arccos z $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\frac{a} {b}</td>\n<td style=\"text-align:center\">$ \\frac{a} {b} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">_{a}^{b}\\textrm{C}</td>\n<td style=\"text-align:center\">$ _{a}^{b}\\textrm{C} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\frac{\\partial {z_x}}{\\partial x}</td>\n<td style=\"text-align:center\">$ \\frac{\\partial {z_x}}{\\partial x} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\frac{\\partial^2 {x}}{\\partial x^2}</td>\n<td style=\"text-align:center\">$ \\frac{\\partial^2 {x}}{\\partial x^2} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\frac{\\mathrm{d} y}{\\mathrm{d} x}</td>\n<td style=\"text-align:center\">$ \\frac{\\mathrm{d} y}{\\mathrm{d} x} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\int x</td>\n<td style=\"text-align:center\">$ \\int x $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\int_{a}^{b}x</td>\n<td style=\"text-align:center\">$ \\int_{a}^{b}x $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\oint a</td>\n<td style=\"text-align:center\">$ \\oint a $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\oint_{a}^{b}C</td>\n<td style=\"text-align:center\">$ \\oint_{a}^{b}C $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\iint_{a}^{v}C</td>\n<td style=\"text-align:center\">$ \\iint_{a}^{v}C $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\bigcap A</td>\n<td style=\"text-align:center\">$ \\bigcap A $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\bigcap_{a}^{b}C</td>\n<td style=\"text-align:center\">$ \\bigcap_{a}^{b}C $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\bigcup c</td>\n<td style=\"text-align:center\">$ \\bigcup c $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\lim_{c}X</td>\n<td style=\"text-align:center\">$ \\lim_{c}X $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\sum a</td>\n<td style=\"text-align:center\">$ \\sum a $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\sum_{a}^{b}C</td>\n<td style=\"text-align:center\">$ \\sum_{a}^{b}C $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\sqrt{X}</td>\n<td style=\"text-align:center\">$ \\sqrt{X} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\sqrt[a]{X}</td>\n<td style=\"text-align:center\">$ \\sqrt[a]{X} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\prod X</td>\n<td style=\"text-align:center\">$ \\prod X $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\prod_{a}^{b} X</td>\n<td style=\"text-align:center\">$ \\prod_{a}^{b} X $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\coprod X</td>\n<td style=\"text-align:center\">$ \\coprod X $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\coprod_{a}^{b} X</td>\n<td style=\"text-align:center\">$ \\coprod_{a}^{b} X $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left [ a \\right ]</td>\n<td style=\"text-align:center\">$ \\left [ a \\right ]  $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left ( a\\right )</td>\n<td style=\"text-align:center\">$ \\left ( a\\right )  $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left { a \\right }</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">\\left\\{ a \\right\\}</script></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left&#124; a \\right&#124;</td>\n<td style=\"text-align:center\">$ \\left&#124; a \\right&#124; $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left \\langle a \\right \\rangle</td>\n<td style=\"text-align:center\">$ \\left \\langle a \\right \\rangle $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left \\lfloor a \\right \\rfloor</td>\n<td style=\"text-align:center\">$ \\left \\lfloor a \\right \\rfloor $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left \\lceil a \\right \\rceil</td>\n<td style=\"text-align:center\">$ \\left \\lceil a \\right \\rceil $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\in A</td>\n<td style=\"text-align:center\">$ \\in A $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\supseteqq A</td>\n<td style=\"text-align:center\">$ \\supseteqq A $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\approx</td>\n<td style=\"text-align:center\">$ \\approx $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\sum\\limits_{i=1}^{\\infty}</td>\n<td style=\"text-align:center\">$ \\sum\\limits_{i=1}^{\\infty} $</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"可视化编辑器\"><a href=\"#可视化编辑器\" class=\"headerlink\" title=\"可视化编辑器\"></a>可视化编辑器</h1><p><a href=\"https://latex.codecogs.com/eqneditor/editor.php\" target=\"_blank\" rel=\"noopener\">可视化编辑器</a></p>\n<iframe src=\"https://latex.codecogs.com/eqneditor/editor.php\" height=\"500\" width=\"100%\">\n</iframe>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"在文本中插入公式\"><a href=\"#在文本中插入公式\" class=\"headerlink\" title=\"在文本中插入公式\"></a>在文本中插入公式</h1><h2 id=\"如何在正文中插入公式\"><a href=\"#如何在正文中插入公式\" class=\"headerlink\" title=\"如何在正文中插入公式?\"></a>如何在正文中插入公式?</h2><p>markdown中使用关键字对<code>\\$ 正文 \\$</code>或者<code>\\$\\$ 正文 \\$\\$</code> 在文字插入公式.</p>\n<h2 id=\"1-在文字的同行中插入公式\"><a href=\"#1-在文字的同行中插入公式\" class=\"headerlink\" title=\"1.在文字的同行中插入公式\"></a>1.在文字的同行中插入公式</h2><p>在文字同行中插入公式使用关键字对$ 正文 $ (同行插入即不分行)<br>可能你会问，那怎么输入‘$’ 符号，使用转移字符就可以，即’$’。</p>\n<pre><code>代码:  我是在文字同行中插入公式: $   f(x)=w^Tx+b $   \n</code></pre><p>我是在文字同行中插入公式: $   f(x)=w^Tx+b $   </p>\n<pre><code>代码:  我是在文字中插入\\$: $$ 我是  f(\\$)=\\$^Tx+b $$   \n</code></pre><p>我是在文字中插入$ : <script type=\"math/tex\">f(\\$)=\\$^Tx+b</script>   </p>\n<p>(以上不起另一行，但用$不起效果，用$$解决)</p>\n<h2 id=\"2-插入公式另起一行\"><a href=\"#2-插入公式另起一行\" class=\"headerlink\" title=\"2. 插入公式另起一行\"></a>2. 插入公式另起一行</h2><pre><code>代码:  我是在新的一行中插入公式: $$   f(x)=w^Tx+b $$\n</code></pre><p>我是在新的一行中插入公式: <script type=\"math/tex\">f(x)=w^Tx+b</script></p>\n<hr>\n<h1 id=\"编辑上标和下标\"><a href=\"#编辑上标和下标\" class=\"headerlink\" title=\"编辑上标和下标\"></a>编辑上标和下标</h1><h2 id=\"1-编辑单个上标或者下标\"><a href=\"#1-编辑单个上标或者下标\" class=\"headerlink\" title=\"1. 编辑单个上标或者下标\"></a>1. 编辑单个上标或者下标</h2><p>编辑公式使用上标的关键字是<script type=\"math/tex\">^</script> ，下标是关键字是<script type=\"math/tex\">_</script> .</p>\n<pre><code>代码:  我是在公式中插入上/下标: $   f(x)=w^T_ix_i^2+b_i $\n</code></pre><p>在公式中插入上/下标:<script type=\"math/tex\">f(x)=w^T_ix_i^2+b_i</script></p>\n<h2 id=\"2-编辑双上标或者下标-下-上标为公式\"><a href=\"#2-编辑双上标或者下标-下-上标为公式\" class=\"headerlink\" title=\"2. 编辑双上标或者下标(下/上标为公式)\"></a>2. 编辑双上标或者下标(下/上标为公式)</h2><p>如果要在公式使用双下/上标或者上/下标插入公式，使用关键字是<script type=\"math/tex\">^{上标内容}</script> ，下标是关键字是<script type=\"math/tex\">_{下标内容}</script> 也就是把上/下标的内容包裹到<script type=\"math/tex\">{ }</script> 内，这个也适用于其他关键字操作.</p>\n<pre><code>代码:  我是在新的一行中插入公式: $$   f(x)=w^{T^t}_{ij}x _{x \\in X_i}+b_{ij} $$\n</code></pre><p>在新的一行中插入公式: <script type=\"math/tex\">f(x)=w^{T^t}_{ij}x _{x \\in X_i}+b_{ij}</script></p>\n<hr>\n<h1 id=\"编辑特殊符号\"><a href=\"#编辑特殊符号\" class=\"headerlink\" title=\"编辑特殊符号\"></a>编辑特殊符号</h1><h2 id=\"1-常见的希腊符号\"><a href=\"#1-常见的希腊符号\" class=\"headerlink\" title=\"1. 常见的希腊符号\"></a>1. 常见的希腊符号</h2><pre><code>代码:  我是在公式中插入希腊符号: $$ f(\\alpha)=\\beta w^T_i x_i^{\\theta}+\\mu_i $$\n</code></pre><script type=\"math/tex; mode=display\">f(\\alpha)=\\beta w^T_i x_i^{\\theta}+\\mu_i</script><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">大写希腊符号</th>\n<th style=\"text-align:center\">小写希腊符号</th>\n<th style=\"text-align:center\">大写转义符号</th>\n<th style=\"text-align:center\">小写转移符号</th>\n<th style=\"text-align:center\">大写效果</th>\n<th style=\"text-align:center\">小写效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Α</td>\n<td style=\"text-align:center\">α</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\alpha</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\alpha $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Β</td>\n<td style=\"text-align:center\">β</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\beta</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\beta $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Γ</td>\n<td style=\"text-align:center\">γ</td>\n<td style=\"text-align:center\">\\Gamma</td>\n<td style=\"text-align:center\">\\gamma</td>\n<td style=\"text-align:center\">$\\Gamma $</td>\n<td style=\"text-align:center\">$ \\gamma $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Δ</td>\n<td style=\"text-align:center\">δ</td>\n<td style=\"text-align:center\">\\Delta</td>\n<td style=\"text-align:center\">\\delta</td>\n<td style=\"text-align:center\">$\\Delta $</td>\n<td style=\"text-align:center\">$ \\delta $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ε</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\epsilon</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\epsilon $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ζ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\zeta</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\zeta $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">η</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\eta</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\eta $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Θ</td>\n<td style=\"text-align:center\">θ</td>\n<td style=\"text-align:center\">\\Theta</td>\n<td style=\"text-align:center\">\\theta</td>\n<td style=\"text-align:center\">$\\Theta $</td>\n<td style=\"text-align:center\">$ \\theta $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ι</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\iota</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\iota $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">κ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\kappa</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\kappa $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∧</td>\n<td style=\"text-align:center\">λ</td>\n<td style=\"text-align:center\">\\Lambda</td>\n<td style=\"text-align:center\">\\lambda</td>\n<td style=\"text-align:center\">$\\Lambda $</td>\n<td style=\"text-align:center\">$ \\lambda $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">μ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\mu</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\mu $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ν</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\nu</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\nu $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ξ</td>\n<td style=\"text-align:center\">ξ</td>\n<td style=\"text-align:center\">\\Xi</td>\n<td style=\"text-align:center\">\\xi</td>\n<td style=\"text-align:center\">$\\Xi $</td>\n<td style=\"text-align:center\">$ \\xi $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ρ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\omicron</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\omicron $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∏</td>\n<td style=\"text-align:center\">π</td>\n<td style=\"text-align:center\">\\Pi</td>\n<td style=\"text-align:center\">\\pi</td>\n<td style=\"text-align:center\">$\\Pi $</td>\n<td style=\"text-align:center\">$ \\pi $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">ο</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\rho</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\rho $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">∑</td>\n<td style=\"text-align:center\">σ</td>\n<td style=\"text-align:center\">\\Sigma</td>\n<td style=\"text-align:center\">\\sigma</td>\n<td style=\"text-align:center\">$\\Sigma $</td>\n<td style=\"text-align:center\">$ \\sigma $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">τ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\tau</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\tau $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">υ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\upsilon</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\upsilon $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Φ</td>\n<td style=\"text-align:center\">φ</td>\n<td style=\"text-align:center\">\\Phi</td>\n<td style=\"text-align:center\">\\phi</td>\n<td style=\"text-align:center\">$\\Phi $</td>\n<td style=\"text-align:center\">$ \\phi $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">χ</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">\\chi</td>\n<td style=\"text-align:center\"></td>\n<td style=\"text-align:center\">$ \\chi $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ψ</td>\n<td style=\"text-align:center\">ξ</td>\n<td style=\"text-align:center\">\\Psi</td>\n<td style=\"text-align:center\">\\psi</td>\n<td style=\"text-align:center\">$\\Psi $</td>\n<td style=\"text-align:center\">$ \\psi $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Ω</td>\n<td style=\"text-align:center\">ξ</td>\n<td style=\"text-align:center\">\\Omega</td>\n<td style=\"text-align:center\">\\omega</td>\n<td style=\"text-align:center\">$\\Omega $</td>\n<td style=\"text-align:center\">$ \\omega $</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"2-常见的数学符号\"><a href=\"#2-常见的数学符号\" class=\"headerlink\" title=\"2. 常见的数学符号\"></a>2. 常见的数学符号</h2><p>编辑数学符号同样也是通过转义字符来实现的，即$ \\ $ ，转移字符配合不同指令即可$ \\alpha $ .</p>\n<pre><code>代码:  带数学符号的公式: $$   L(f) = \\sum_{i=1}^D(\\tilde{y_i}-y_i)^2=\\sum_{i=1}^D(wx_i+b-y_i)^2 $$\n</code></pre><p>公式: <script type=\"math/tex\">L(f) = \\sum_{i=1}^D(\\tilde{y_i}-y_i)^2=\\sum_{i=1}^D(wx_i+b-y_i)^2</script></p>\n<hr>\n<h1 id=\"常用的数学符号\"><a href=\"#常用的数学符号\" class=\"headerlink\" title=\"常用的数学符号\"></a>常用的数学符号</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">转义符号</th>\n<th style=\"text-align:center\">效果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">\\log_{x}y = \\arccos z</td>\n<td style=\"text-align:center\">$ \\log_{x}y = \\arccos z $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\frac{a} {b}</td>\n<td style=\"text-align:center\">$ \\frac{a} {b} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">_{a}^{b}\\textrm{C}</td>\n<td style=\"text-align:center\">$ _{a}^{b}\\textrm{C} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\frac{\\partial {z_x}}{\\partial x}</td>\n<td style=\"text-align:center\">$ \\frac{\\partial {z_x}}{\\partial x} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\frac{\\partial^2 {x}}{\\partial x^2}</td>\n<td style=\"text-align:center\">$ \\frac{\\partial^2 {x}}{\\partial x^2} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\frac{\\mathrm{d} y}{\\mathrm{d} x}</td>\n<td style=\"text-align:center\">$ \\frac{\\mathrm{d} y}{\\mathrm{d} x} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\int x</td>\n<td style=\"text-align:center\">$ \\int x $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\int_{a}^{b}x</td>\n<td style=\"text-align:center\">$ \\int_{a}^{b}x $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\oint a</td>\n<td style=\"text-align:center\">$ \\oint a $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\oint_{a}^{b}C</td>\n<td style=\"text-align:center\">$ \\oint_{a}^{b}C $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\iint_{a}^{v}C</td>\n<td style=\"text-align:center\">$ \\iint_{a}^{v}C $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\bigcap A</td>\n<td style=\"text-align:center\">$ \\bigcap A $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\bigcap_{a}^{b}C</td>\n<td style=\"text-align:center\">$ \\bigcap_{a}^{b}C $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\bigcup c</td>\n<td style=\"text-align:center\">$ \\bigcup c $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\lim_{c}X</td>\n<td style=\"text-align:center\">$ \\lim_{c}X $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\sum a</td>\n<td style=\"text-align:center\">$ \\sum a $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\sum_{a}^{b}C</td>\n<td style=\"text-align:center\">$ \\sum_{a}^{b}C $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\sqrt{X}</td>\n<td style=\"text-align:center\">$ \\sqrt{X} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\sqrt[a]{X}</td>\n<td style=\"text-align:center\">$ \\sqrt[a]{X} $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\prod X</td>\n<td style=\"text-align:center\">$ \\prod X $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\prod_{a}^{b} X</td>\n<td style=\"text-align:center\">$ \\prod_{a}^{b} X $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\coprod X</td>\n<td style=\"text-align:center\">$ \\coprod X $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\coprod_{a}^{b} X</td>\n<td style=\"text-align:center\">$ \\coprod_{a}^{b} X $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left [ a \\right ]</td>\n<td style=\"text-align:center\">$ \\left [ a \\right ]  $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left ( a\\right )</td>\n<td style=\"text-align:center\">$ \\left ( a\\right )  $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left { a \\right }</td>\n<td style=\"text-align:center\"><script type=\"math/tex\">\\left\\{ a \\right\\}</script></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left&#124; a \\right&#124;</td>\n<td style=\"text-align:center\">$ \\left&#124; a \\right&#124; $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left \\langle a \\right \\rangle</td>\n<td style=\"text-align:center\">$ \\left \\langle a \\right \\rangle $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left \\lfloor a \\right \\rfloor</td>\n<td style=\"text-align:center\">$ \\left \\lfloor a \\right \\rfloor $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\left \\lceil a \\right \\rceil</td>\n<td style=\"text-align:center\">$ \\left \\lceil a \\right \\rceil $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\in A</td>\n<td style=\"text-align:center\">$ \\in A $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\supseteqq A</td>\n<td style=\"text-align:center\">$ \\supseteqq A $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\approx</td>\n<td style=\"text-align:center\">$ \\approx $</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">\\sum\\limits_{i=1}^{\\infty}</td>\n<td style=\"text-align:center\">$ \\sum\\limits_{i=1}^{\\infty} $</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h1 id=\"可视化编辑器\"><a href=\"#可视化编辑器\" class=\"headerlink\" title=\"可视化编辑器\"></a>可视化编辑器</h1><p><a href=\"https://latex.codecogs.com/eqneditor/editor.php\" target=\"_blank\" rel=\"noopener\">可视化编辑器</a></p>\n<iframe src=\"https://latex.codecogs.com/eqneditor/editor.php\" height=\"500\" width=\"100%\">\n</iframe>"},{"title":"关系运算","date":"2018-10-27T05:42:39.000Z","_content":"## 包含\n\n关系运算包括选择、投影、连接以及除法。\n集合运算是二目运算，包括并、差、交、广义笛卡尔积四种运算。","source":"_posts/Math/2018-10-27-关系运算.md","raw":"---\ntitle: 关系运算\ndate: 2018-10-27 13:42:39\ncategories:\n- Math\ntags:\n- Probability Theory\n- 关系运算\n---\n## 包含\n\n关系运算包括选择、投影、连接以及除法。\n集合运算是二目运算，包括并、差、交、广义笛卡尔积四种运算。","slug":"Math-2018-10-27-关系运算","published":1,"updated":"2021-02-13T16:06:58.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaqc003kcswgsnanjso8","content":"<h2 id=\"包含\"><a href=\"#包含\" class=\"headerlink\" title=\"包含\"></a>包含</h2><p>关系运算包括选择、投影、连接以及除法。<br>集合运算是二目运算，包括并、差、交、广义笛卡尔积四种运算。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"包含\"><a href=\"#包含\" class=\"headerlink\" title=\"包含\"></a>包含</h2><p>关系运算包括选择、投影、连接以及除法。<br>集合运算是二目运算，包括并、差、交、广义笛卡尔积四种运算。</p>\n"},{"title":"Markdown语法","date":"2018-10-30T12:11:46.000Z","_content":"## 主要内容\n> [Markdown是什么](#1-Markdown是什么？)\n> [*谁*创造了它？](#2-谁创造了它？)\n> [*为什么*要使用它？](#3-为什么要使用它？)\n> [*怎么*使用？](#4-怎么使用？)\n> [*谁*在用？](#5-谁在用？)\n> [尝试一下](#6-尝试一下)\n\n## 正文\n### 1. Markdown*是什么*？\n**Markdown**是一种轻量级**标记语言**，它以纯文本形式(*易读、易写、易更改*)编写文档，并最终以HTML格式发布。    \n**Markdown**也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    \n\n### 2. *谁*创造了它？\n它由[**Aaron Swartz**](http://www.aaronsw.com/)和**John Gruber**共同设计，**Aaron Swartz**就是那位于去年（*2013年1月11日*）自杀,有着**开挂**一般人生经历的程序员。维基百科对他的[介绍](http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8)是：**软件工程师、作家、政治组织者、互联网活动家、维基百科人**。    \n\n他有着足以让你跪拜的人生经历：    \n+ **14岁**参与RSS 1.0规格标准的制订。     \n+ **2004**年入读**斯坦福**，之后退学。   \n+ **2005**年创建[Infogami](http://infogami.org/)，之后与[Reddit](http://www.reddit.com/)合并成为其合伙人。   \n+ **2010**年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   \n+ **2011**年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     \n+ **2013**年1月自杀身亡。    \n\n![Aaron Swartz](https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg)\n\n天才都有早逝的归途。\n\n### 3. *为什么*要使用它？\n+ 它是易读（看起来舒服）、易写（语法简单）、易更改**纯文本**。处处体现着**极简主义**的影子。\n+ 兼容HTML，可以转换为HTML格式发布。\n+ 跨平台使用。\n+ 越来越多的网站支持Markdown。\n+ 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）\n+ 摆脱Word（我不是认真的）。\n\n### 4. *怎么*使用？\n如果不算**扩展**，Markdown的语法绝对**简单**到让你爱不释手。\n\nMarkdown语法主要分为如下几大部分：\n**标题**，**段落**，**区块引用**，**代码区块**，**强调**，**列表**，**分割线**，**链接**，**图片**，**反斜杠 `\\`**，**符号'`'**。\n\n#### 4.1 标题\n两种形式：  \n1）使用`=`和`-`标记一级和二级标题。\n> 一级标题   \n> `=========`   \n> 二级标题    \n> `---------`\n\n效果：\n> 一级标题   \n> =========   \n> 二级标题\n> ---------  \n\n2）使用`#`，可表示1-6级标题。\n> \\# 一级标题   \n> \\## 二级标题   \n> \\### 三级标题   \n> \\#### 四级标题   \n> \\##### 五级标题   \n> \\###### 六级标题    \n\n效果：\n> # 一级标题   \n> ## 二级标题   \n> ### 三级标题   \n> #### 四级标题   \n> ##### 五级标题   \n> ###### 六级标题\n\n#### 4.2 段落\n段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用**两个以上**空格加上回车（引用中换行省略回车）。\n\n#### 4.3 区块引用\n在段落的每行或者只在第一行使用符号`>`,还可使用多个嵌套引用，如：\n> \\> 区块引用  \n> \\>> 嵌套引用  \n\n效果：\n> 区块引用  \n>> 嵌套引用\n\n#### 4.4 代码区块\n代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如    \n普通段落：\n\nvoid main()    \n{    \n    printf(\"Hello, Markdown.\");    \n}    \n\n代码区块：\n\n    void main()\n    {\n        printf(\"Hello, Markdown.\");\n    }\n\n**注意**:需要和普通段落之间存在空行。\n\n#### 4.5 强调\n在强调内容两侧分别加上`*`或者`_`，如：\n> \\*斜体\\*，\\_斜体\\_    \n> \\*\\*粗体\\*\\*，\\_\\_粗体\\_\\_\n\n效果：\n> *斜体*，_斜体_    \n> **粗体**，__粗体__\n\n#### 4.6 列表\n使用`·`、`+`、或`-`标记无序列表，如：\n> \\-（+\\*） 第一项\n> \\-（+\\*） 第二项\n> \\- （+\\*）第三项\n\n**注意**：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。\n\n效果：\n> + 第一项\n> + 第二项\n> + 第三项\n\n有序列表的标记方式是将上述的符号换成数字,并辅以`.`，如：\n> 1 . 第一项   \n> 2 . 第二项    \n> 3 . 第三项    \n\n效果：\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项\n\n#### 4.7 分割线\n分割线最常使用就是三个或以上`*`，还可以使用`-`和`_`。\n\n#### 4.8 链接\n链接可以由两种形式生成：**行内式**和**参考式**。    \n**行内式**：\n> \\[younghz的Markdown库\\]\\(https:://github.com/younghz/Markdown \"Markdown\"\\)。\n\n效果：\n> [younghz的Markdown库](https:://github.com/younghz/Markdown \"Markdown\")。\n\n**参考式**：\n> \\[younghz的Markdown库1\\]\\[1\\]    \n> \\[younghz的Markdown库2\\]\\[2\\]    \n> \\[1\\]:https:://github.com/younghz/Markdown \"Markdown\"    \n> \\[2\\]:https:://github.com/younghz/Markdown \"Markdown\"    \n\n效果：\n> [younghz的Markdown库1][1]    \n> [younghz的Markdown库2][2]\n\n[1]: https:://github.com/younghz/Markdown \"Markdown\"\n[2]: https:://github.com/younghz/Markdown \"Markdown\"\n\n**注意**：上述的`[1]:https:://github.com/younghz/Markdown \"Markdown\"`不出现在区块中。\n\n#### 4.9 图片\n添加图片的形式和链接相似，只需在链接的基础上前方加一个`！`。\n#### 4.10 反斜杠`\\`\n相当于**反转义**作用。使符号成为普通符号。\n#### 4.11 符号'`'\n起到标记作用。如：\n>\\`ctrl+a\\`\n\n效果：\n>`ctrl+a`    \n\n#### 5. *谁*在用？\nMarkdown的使用者：\n+ GitHub\n+ 简书\n+ Stack Overflow\n+ Apollo\n+ Moodle\n+ Reddit\n+ 等等\n\n#### 6. 尝试一下\n+ **Chrome**下的插件诸如`stackedit`与`markdown-here`等非常方便，也不用担心平台受限。\n+ **在线**的dillinger.io评价也不错   \n+ **Windowns**下的MarkdownPad也用过，不过免费版的体验不是很好。    \n+ **Mac**下的Mou是国人贡献的，口碑很好。\n+ **Linux**下的ReText不错。    \n\n**当然，最终境界永远都是笔下是语法，心中格式化 :)。**\n\n****\n**注意**：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。\n虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]\n(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。\n****\n以上基本是所有traditonal markdown的语法。\n\n### 其它：\n列表的使用(非traditonal markdown)：\n\n用`|`表示表格纵向边界，表头和表内容用`-`隔开，并可用`:`进行对齐设置，两边都有`:`则表示居中，若不加`:`则默认左对齐。\n\n|代码库                              |链接                                |\n|:---------------------------------:|-----------------------------------|\n|MarkDown                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown \"Markdown\")|\n|MarkDownCopy                          |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown \"Markdown\")|\n\n\n关于其它扩展语法可参见具体工具的使用说明。\n\n","source":"_posts/Markdown/2018-10-30-Markdown语法.md","raw":"---\ntitle: Markdown语法\ndate: 2018-10-30 20:11:46\ncategories:\n- Markdown\ntags:\n- Note\n- Markdown\n---\n## 主要内容\n> [Markdown是什么](#1-Markdown是什么？)\n> [*谁*创造了它？](#2-谁创造了它？)\n> [*为什么*要使用它？](#3-为什么要使用它？)\n> [*怎么*使用？](#4-怎么使用？)\n> [*谁*在用？](#5-谁在用？)\n> [尝试一下](#6-尝试一下)\n\n## 正文\n### 1. Markdown*是什么*？\n**Markdown**是一种轻量级**标记语言**，它以纯文本形式(*易读、易写、易更改*)编写文档，并最终以HTML格式发布。    \n**Markdown**也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    \n\n### 2. *谁*创造了它？\n它由[**Aaron Swartz**](http://www.aaronsw.com/)和**John Gruber**共同设计，**Aaron Swartz**就是那位于去年（*2013年1月11日*）自杀,有着**开挂**一般人生经历的程序员。维基百科对他的[介绍](http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8)是：**软件工程师、作家、政治组织者、互联网活动家、维基百科人**。    \n\n他有着足以让你跪拜的人生经历：    \n+ **14岁**参与RSS 1.0规格标准的制订。     \n+ **2004**年入读**斯坦福**，之后退学。   \n+ **2005**年创建[Infogami](http://infogami.org/)，之后与[Reddit](http://www.reddit.com/)合并成为其合伙人。   \n+ **2010**年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   \n+ **2011**年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     \n+ **2013**年1月自杀身亡。    \n\n![Aaron Swartz](https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg)\n\n天才都有早逝的归途。\n\n### 3. *为什么*要使用它？\n+ 它是易读（看起来舒服）、易写（语法简单）、易更改**纯文本**。处处体现着**极简主义**的影子。\n+ 兼容HTML，可以转换为HTML格式发布。\n+ 跨平台使用。\n+ 越来越多的网站支持Markdown。\n+ 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）\n+ 摆脱Word（我不是认真的）。\n\n### 4. *怎么*使用？\n如果不算**扩展**，Markdown的语法绝对**简单**到让你爱不释手。\n\nMarkdown语法主要分为如下几大部分：\n**标题**，**段落**，**区块引用**，**代码区块**，**强调**，**列表**，**分割线**，**链接**，**图片**，**反斜杠 `\\`**，**符号'`'**。\n\n#### 4.1 标题\n两种形式：  \n1）使用`=`和`-`标记一级和二级标题。\n> 一级标题   \n> `=========`   \n> 二级标题    \n> `---------`\n\n效果：\n> 一级标题   \n> =========   \n> 二级标题\n> ---------  \n\n2）使用`#`，可表示1-6级标题。\n> \\# 一级标题   \n> \\## 二级标题   \n> \\### 三级标题   \n> \\#### 四级标题   \n> \\##### 五级标题   \n> \\###### 六级标题    \n\n效果：\n> # 一级标题   \n> ## 二级标题   \n> ### 三级标题   \n> #### 四级标题   \n> ##### 五级标题   \n> ###### 六级标题\n\n#### 4.2 段落\n段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用**两个以上**空格加上回车（引用中换行省略回车）。\n\n#### 4.3 区块引用\n在段落的每行或者只在第一行使用符号`>`,还可使用多个嵌套引用，如：\n> \\> 区块引用  \n> \\>> 嵌套引用  \n\n效果：\n> 区块引用  \n>> 嵌套引用\n\n#### 4.4 代码区块\n代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如    \n普通段落：\n\nvoid main()    \n{    \n    printf(\"Hello, Markdown.\");    \n}    \n\n代码区块：\n\n    void main()\n    {\n        printf(\"Hello, Markdown.\");\n    }\n\n**注意**:需要和普通段落之间存在空行。\n\n#### 4.5 强调\n在强调内容两侧分别加上`*`或者`_`，如：\n> \\*斜体\\*，\\_斜体\\_    \n> \\*\\*粗体\\*\\*，\\_\\_粗体\\_\\_\n\n效果：\n> *斜体*，_斜体_    \n> **粗体**，__粗体__\n\n#### 4.6 列表\n使用`·`、`+`、或`-`标记无序列表，如：\n> \\-（+\\*） 第一项\n> \\-（+\\*） 第二项\n> \\- （+\\*）第三项\n\n**注意**：标记后面最少有一个_空格_或_制表符_。若不在引用区块中，必须和前方段落之间存在空行。\n\n效果：\n> + 第一项\n> + 第二项\n> + 第三项\n\n有序列表的标记方式是将上述的符号换成数字,并辅以`.`，如：\n> 1 . 第一项   \n> 2 . 第二项    \n> 3 . 第三项    \n\n效果：\n> 1. 第一项\n> 2. 第二项\n> 3. 第三项\n\n#### 4.7 分割线\n分割线最常使用就是三个或以上`*`，还可以使用`-`和`_`。\n\n#### 4.8 链接\n链接可以由两种形式生成：**行内式**和**参考式**。    \n**行内式**：\n> \\[younghz的Markdown库\\]\\(https:://github.com/younghz/Markdown \"Markdown\"\\)。\n\n效果：\n> [younghz的Markdown库](https:://github.com/younghz/Markdown \"Markdown\")。\n\n**参考式**：\n> \\[younghz的Markdown库1\\]\\[1\\]    \n> \\[younghz的Markdown库2\\]\\[2\\]    \n> \\[1\\]:https:://github.com/younghz/Markdown \"Markdown\"    \n> \\[2\\]:https:://github.com/younghz/Markdown \"Markdown\"    \n\n效果：\n> [younghz的Markdown库1][1]    \n> [younghz的Markdown库2][2]\n\n[1]: https:://github.com/younghz/Markdown \"Markdown\"\n[2]: https:://github.com/younghz/Markdown \"Markdown\"\n\n**注意**：上述的`[1]:https:://github.com/younghz/Markdown \"Markdown\"`不出现在区块中。\n\n#### 4.9 图片\n添加图片的形式和链接相似，只需在链接的基础上前方加一个`！`。\n#### 4.10 反斜杠`\\`\n相当于**反转义**作用。使符号成为普通符号。\n#### 4.11 符号'`'\n起到标记作用。如：\n>\\`ctrl+a\\`\n\n效果：\n>`ctrl+a`    \n\n#### 5. *谁*在用？\nMarkdown的使用者：\n+ GitHub\n+ 简书\n+ Stack Overflow\n+ Apollo\n+ Moodle\n+ Reddit\n+ 等等\n\n#### 6. 尝试一下\n+ **Chrome**下的插件诸如`stackedit`与`markdown-here`等非常方便，也不用担心平台受限。\n+ **在线**的dillinger.io评价也不错   \n+ **Windowns**下的MarkdownPad也用过，不过免费版的体验不是很好。    \n+ **Mac**下的Mou是国人贡献的，口碑很好。\n+ **Linux**下的ReText不错。    \n\n**当然，最终境界永远都是笔下是语法，心中格式化 :)。**\n\n****\n**注意**：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。\n虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]\n(http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。\n****\n以上基本是所有traditonal markdown的语法。\n\n### 其它：\n列表的使用(非traditonal markdown)：\n\n用`|`表示表格纵向边界，表头和表内容用`-`隔开，并可用`:`进行对齐设置，两边都有`:`则表示居中，若不加`:`则默认左对齐。\n\n|代码库                              |链接                                |\n|:---------------------------------:|-----------------------------------|\n|MarkDown                              |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown \"Markdown\")|\n|MarkDownCopy                          |[https://github.com/younghz/Markdown](https://github.com/younghz/Markdown \"Markdown\")|\n\n\n关于其它扩展语法可参见具体工具的使用说明。\n\n","slug":"Markdown-2018-10-30-Markdown语法","published":1,"updated":"2021-02-13T16:06:58.336Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaqd003mcswgo3ikaaz1","content":"<h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><blockquote>\n<p><a href=\"#1-Markdown是什么？\">Markdown是什么</a><br><a href=\"#2-谁创造了它？\"><em>谁</em>创造了它？</a><br><a href=\"#3-为什么要使用它？\"><em>为什么</em>要使用它？</a><br><a href=\"#4-怎么使用？\"><em>怎么</em>使用？</a><br><a href=\"#5-谁在用？\"><em>谁</em>在用？</a><br><a href=\"#6-尝试一下\">尝试一下</a></p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"1-Markdown是什么？\"><a href=\"#1-Markdown是什么？\" class=\"headerlink\" title=\"1. Markdown是什么？\"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p>\n<h3 id=\"2-谁创造了它？\"><a href=\"#2-谁创造了它？\" class=\"headerlink\" title=\"2. 谁创造了它？\"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href=\"http://www.aaronsw.com/\" target=\"_blank\" rel=\"noopener\"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href=\"http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8\" target=\"_blank\" rel=\"noopener\">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p>\n<p>他有着足以让你跪拜的人生经历：    </p>\n<ul>\n<li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li>\n<li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li>\n<li><strong>2005</strong>年创建<a href=\"http://infogami.org/\" target=\"_blank\" rel=\"noopener\">Infogami</a>，之后与<a href=\"http://www.reddit.com/\" target=\"_blank\" rel=\"noopener\">Reddit</a>合并成为其合伙人。   </li>\n<li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li>\n<li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li>\n<li><strong>2013</strong>年1月自杀身亡。    </li>\n</ul>\n<p><img src=\"https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg\" alt=\"Aaron Swartz\"></p>\n<p>天才都有早逝的归途。</p>\n<h3 id=\"3-为什么要使用它？\"><a href=\"#3-为什么要使用它？\" class=\"headerlink\" title=\"3. 为什么要使用它？\"></a>3. <em>为什么</em>要使用它？</h3><ul>\n<li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>\n<li>兼容HTML，可以转换为HTML格式发布。</li>\n<li>跨平台使用。</li>\n<li>越来越多的网站支持Markdown。</li>\n<li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li>\n<li>摆脱Word（我不是认真的）。</li>\n</ul>\n<h3 id=\"4-怎么使用？\"><a href=\"#4-怎么使用？\" class=\"headerlink\" title=\"4. 怎么使用？\"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p>\n<p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\\</code></strong>，<strong>符号’`’</strong>。</p>\n<h4 id=\"4-1-标题\"><a href=\"#4-1-标题\" class=\"headerlink\" title=\"4.1 标题\"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p>\n<blockquote>\n<p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题   \"></a>一级标题   </h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2></blockquote>\n<p>2）使用<code>#</code>，可表示1-6级标题。</p>\n<blockquote>\n<p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<h1 id=\"一级标题-1\"><a href=\"#一级标题-1\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题-1\"><a href=\"#二级标题-1\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6></blockquote>\n<h4 id=\"4-2-段落\"><a href=\"#4-2-段落\" class=\"headerlink\" title=\"4.2 段落\"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>\n<h4 id=\"4-3-区块引用\"><a href=\"#4-3-区块引用\" class=\"headerlink\" title=\"4.3 区块引用\"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p>\n<blockquote>\n<p>> 区块引用<br>>&gt; 嵌套引用  </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>区块引用  </p>\n<blockquote>\n<p>嵌套引用</p>\n</blockquote>\n</blockquote>\n<h4 id=\"4-4-代码区块\"><a href=\"#4-4-代码区块\" class=\"headerlink\" title=\"4.4 代码区块\"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p>\n<p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p>\n<p>代码区块：</p>\n<pre><code>void main()\n{\n    printf(&quot;Hello, Markdown.&quot;);\n}\n</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p>\n<h4 id=\"4-5-强调\"><a href=\"#4-5-强调\" class=\"headerlink\" title=\"4.5 强调\"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p>\n<blockquote>\n<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p>\n</blockquote>\n<h4 id=\"4-6-列表\"><a href=\"#4-6-列表\" class=\"headerlink\" title=\"4.6 列表\"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p>\n<blockquote>\n<p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p>\n</blockquote>\n<p><strong>注意</strong>：标记后面最少有一个<em>空格</em>或<em>制表符</em>。若不在引用区块中，必须和前方段落之间存在空行。</p>\n<p>效果：</p>\n<blockquote>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p>\n<blockquote>\n<p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n</blockquote>\n<h4 id=\"4-7-分割线\"><a href=\"#4-7-分割线\" class=\"headerlink\" title=\"4.7 分割线\"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p>\n<h4 id=\"4-8-链接\"><a href=\"#4-8-链接\" class=\"headerlink\" title=\"4.8 链接\"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p>\n<blockquote>\n<p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库</a>。</p>\n</blockquote>\n<p><strong>参考式</strong>：</p>\n<blockquote>\n<p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库1</a><br><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库2</a></p>\n</blockquote>\n<p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p>\n<h4 id=\"4-9-图片\"><a href=\"#4-9-图片\" class=\"headerlink\" title=\"4.9 图片\"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p>\n<h4 id=\"4-10-反斜杠\"><a href=\"#4-10-反斜杠\" class=\"headerlink\" title=\"4.10 反斜杠\\\"></a>4.10 反斜杠<code>\\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>\n<h4 id=\"4-11-符号’-’\"><a href=\"#4-11-符号’-’\" class=\"headerlink\" title=\"4.11 符号’`’\"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p>\n<blockquote>\n<p>`ctrl+a`</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><code>ctrl+a</code>    </p>\n</blockquote>\n<h4 id=\"5-谁在用？\"><a href=\"#5-谁在用？\" class=\"headerlink\" title=\"5. 谁在用？\"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p>\n<ul>\n<li>GitHub</li>\n<li>简书</li>\n<li>Stack Overflow</li>\n<li>Apollo</li>\n<li>Moodle</li>\n<li>Reddit</li>\n<li>等等</li>\n</ul>\n<h4 id=\"6-尝试一下\"><a href=\"#6-尝试一下\" class=\"headerlink\" title=\"6. 尝试一下\"></a>6. 尝试一下</h4><ul>\n<li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li>\n<li><strong>在线</strong>的dillinger.io评价也不错   </li>\n<li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li>\n<li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>\n<li><strong>Linux</strong>下的ReText不错。    </li>\n</ul>\n<p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p>\n<hr>\n<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href=\"http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。\" target=\"_blank\" rel=\"noopener\">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。</a></p>\n<hr>\n<p>以上基本是所有traditonal markdown的语法。</p>\n<h3 id=\"其它：\"><a href=\"#其它：\" class=\"headerlink\" title=\"其它：\"></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p>\n<p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">代码库</th>\n<th>链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">MarkDown</td>\n<td><a href=\"https://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">https://github.com/younghz/Markdown</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MarkDownCopy</td>\n<td><a href=\"https://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">https://github.com/younghz/Markdown</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>关于其它扩展语法可参见具体工具的使用说明。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"主要内容\"><a href=\"#主要内容\" class=\"headerlink\" title=\"主要内容\"></a>主要内容</h2><blockquote>\n<p><a href=\"#1-Markdown是什么？\">Markdown是什么</a><br><a href=\"#2-谁创造了它？\"><em>谁</em>创造了它？</a><br><a href=\"#3-为什么要使用它？\"><em>为什么</em>要使用它？</a><br><a href=\"#4-怎么使用？\"><em>怎么</em>使用？</a><br><a href=\"#5-谁在用？\"><em>谁</em>在用？</a><br><a href=\"#6-尝试一下\">尝试一下</a></p>\n</blockquote>\n<h2 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h2><h3 id=\"1-Markdown是什么？\"><a href=\"#1-Markdown是什么？\" class=\"headerlink\" title=\"1. Markdown是什么？\"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p>\n<h3 id=\"2-谁创造了它？\"><a href=\"#2-谁创造了它？\" class=\"headerlink\" title=\"2. 谁创造了它？\"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href=\"http://www.aaronsw.com/\" target=\"_blank\" rel=\"noopener\"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href=\"http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8\" target=\"_blank\" rel=\"noopener\">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p>\n<p>他有着足以让你跪拜的人生经历：    </p>\n<ul>\n<li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li>\n<li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li>\n<li><strong>2005</strong>年创建<a href=\"http://infogami.org/\" target=\"_blank\" rel=\"noopener\">Infogami</a>，之后与<a href=\"http://www.reddit.com/\" target=\"_blank\" rel=\"noopener\">Reddit</a>合并成为其合伙人。   </li>\n<li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li>\n<li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li>\n<li><strong>2013</strong>年1月自杀身亡。    </li>\n</ul>\n<p><img src=\"https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg\" alt=\"Aaron Swartz\"></p>\n<p>天才都有早逝的归途。</p>\n<h3 id=\"3-为什么要使用它？\"><a href=\"#3-为什么要使用它？\" class=\"headerlink\" title=\"3. 为什么要使用它？\"></a>3. <em>为什么</em>要使用它？</h3><ul>\n<li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li>\n<li>兼容HTML，可以转换为HTML格式发布。</li>\n<li>跨平台使用。</li>\n<li>越来越多的网站支持Markdown。</li>\n<li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li>\n<li>摆脱Word（我不是认真的）。</li>\n</ul>\n<h3 id=\"4-怎么使用？\"><a href=\"#4-怎么使用？\" class=\"headerlink\" title=\"4. 怎么使用？\"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p>\n<p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\\</code></strong>，<strong>符号’`’</strong>。</p>\n<h4 id=\"4-1-标题\"><a href=\"#4-1-标题\" class=\"headerlink\" title=\"4.1 标题\"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p>\n<blockquote>\n<p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<h1 id=\"一级标题\"><a href=\"#一级标题\" class=\"headerlink\" title=\"一级标题   \"></a>一级标题   </h1><h2 id=\"二级标题\"><a href=\"#二级标题\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2></blockquote>\n<p>2）使用<code>#</code>，可表示1-6级标题。</p>\n<blockquote>\n<p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<h1 id=\"一级标题-1\"><a href=\"#一级标题-1\" class=\"headerlink\" title=\"一级标题\"></a>一级标题</h1><h2 id=\"二级标题-1\"><a href=\"#二级标题-1\" class=\"headerlink\" title=\"二级标题\"></a>二级标题</h2><h3 id=\"三级标题\"><a href=\"#三级标题\" class=\"headerlink\" title=\"三级标题\"></a>三级标题</h3><h4 id=\"四级标题\"><a href=\"#四级标题\" class=\"headerlink\" title=\"四级标题\"></a>四级标题</h4><h5 id=\"五级标题\"><a href=\"#五级标题\" class=\"headerlink\" title=\"五级标题\"></a>五级标题</h5><h6 id=\"六级标题\"><a href=\"#六级标题\" class=\"headerlink\" title=\"六级标题\"></a>六级标题</h6></blockquote>\n<h4 id=\"4-2-段落\"><a href=\"#4-2-段落\" class=\"headerlink\" title=\"4.2 段落\"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p>\n<h4 id=\"4-3-区块引用\"><a href=\"#4-3-区块引用\" class=\"headerlink\" title=\"4.3 区块引用\"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p>\n<blockquote>\n<p>> 区块引用<br>>&gt; 嵌套引用  </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p>区块引用  </p>\n<blockquote>\n<p>嵌套引用</p>\n</blockquote>\n</blockquote>\n<h4 id=\"4-4-代码区块\"><a href=\"#4-4-代码区块\" class=\"headerlink\" title=\"4.4 代码区块\"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p>\n<p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p>\n<p>代码区块：</p>\n<pre><code>void main()\n{\n    printf(&quot;Hello, Markdown.&quot;);\n}\n</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p>\n<h4 id=\"4-5-强调\"><a href=\"#4-5-强调\" class=\"headerlink\" title=\"4.5 强调\"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p>\n<blockquote>\n<p>*斜体*，_斜体_<br>**粗体**，__粗体__</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p>\n</blockquote>\n<h4 id=\"4-6-列表\"><a href=\"#4-6-列表\" class=\"headerlink\" title=\"4.6 列表\"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p>\n<blockquote>\n<p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p>\n</blockquote>\n<p><strong>注意</strong>：标记后面最少有一个<em>空格</em>或<em>制表符</em>。若不在引用区块中，必须和前方段落之间存在空行。</p>\n<p>效果：</p>\n<blockquote>\n<ul>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ul>\n</blockquote>\n<p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p>\n<blockquote>\n<p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<ol>\n<li>第一项</li>\n<li>第二项</li>\n<li>第三项</li>\n</ol>\n</blockquote>\n<h4 id=\"4-7-分割线\"><a href=\"#4-7-分割线\" class=\"headerlink\" title=\"4.7 分割线\"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p>\n<h4 id=\"4-8-链接\"><a href=\"#4-8-链接\" class=\"headerlink\" title=\"4.8 链接\"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p>\n<blockquote>\n<p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库</a>。</p>\n</blockquote>\n<p><strong>参考式</strong>：</p>\n<blockquote>\n<p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库1</a><br><a href=\"https:://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">younghz的Markdown库2</a></p>\n</blockquote>\n<p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p>\n<h4 id=\"4-9-图片\"><a href=\"#4-9-图片\" class=\"headerlink\" title=\"4.9 图片\"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p>\n<h4 id=\"4-10-反斜杠\"><a href=\"#4-10-反斜杠\" class=\"headerlink\" title=\"4.10 反斜杠\\\"></a>4.10 反斜杠<code>\\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p>\n<h4 id=\"4-11-符号’-’\"><a href=\"#4-11-符号’-’\" class=\"headerlink\" title=\"4.11 符号’`’\"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p>\n<blockquote>\n<p>`ctrl+a`</p>\n</blockquote>\n<p>效果：</p>\n<blockquote>\n<p><code>ctrl+a</code>    </p>\n</blockquote>\n<h4 id=\"5-谁在用？\"><a href=\"#5-谁在用？\" class=\"headerlink\" title=\"5. 谁在用？\"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p>\n<ul>\n<li>GitHub</li>\n<li>简书</li>\n<li>Stack Overflow</li>\n<li>Apollo</li>\n<li>Moodle</li>\n<li>Reddit</li>\n<li>等等</li>\n</ul>\n<h4 id=\"6-尝试一下\"><a href=\"#6-尝试一下\" class=\"headerlink\" title=\"6. 尝试一下\"></a>6. 尝试一下</h4><ul>\n<li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li>\n<li><strong>在线</strong>的dillinger.io评价也不错   </li>\n<li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li>\n<li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li>\n<li><strong>Linux</strong>下的ReText不错。    </li>\n</ul>\n<p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p>\n<hr>\n<p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href=\"http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。\" target=\"_blank\" rel=\"noopener\">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。</a></p>\n<hr>\n<p>以上基本是所有traditonal markdown的语法。</p>\n<h3 id=\"其它：\"><a href=\"#其它：\" class=\"headerlink\" title=\"其它：\"></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p>\n<p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">代码库</th>\n<th>链接</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">MarkDown</td>\n<td><a href=\"https://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">https://github.com/younghz/Markdown</a></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">MarkDownCopy</td>\n<td><a href=\"https://github.com/younghz/Markdown\" title=\"Markdown\" target=\"_blank\" rel=\"noopener\">https://github.com/younghz/Markdown</a></td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>关于其它扩展语法可参见具体工具的使用说明。</p>\n"},{"title":"泊松过程","date":"2018-10-26T11:45:18.000Z","_content":"\n\n## Wiki的定义\nPoisson过程（Poisson process，大陆译泊松过程、普阿松过程等，台译卜瓦松過程、布瓦松過程、布阿松過程、波以松過程、卜氏過程等），是以法国数学家泊松（1781 - 1840）的名字命名的。泊松过程是随机过程的一种，是以事件的发生时间来定义的。我们说一个 随机过程 N(t) 是一个时间齐次的一维泊松过程，如果它满足以下条件：\n* 在两个互斥（不重叠）的区间内所发生的事件的数目是互相独立的随机变量。\n* 在区间$\\left[t,t+\\tau\\right]$内发生的事件的数目的概率分布为：$P\\left[(N(t+\\tau)-N(t)=k\\right]= \\frac{e^{-\\lambda\\tau}\\times{(\\lambda\\tau)^k}}{k!} \\qquad k=1,2,\\cdots$\n\n其中λ是一个正数，是固定的参数，通常称为抵达率（arrival rate）或强度（intensity）。所以，如果给定在时间区间 $\\left[t,t+\\tau\\right]$ 之中事件发生的数目则随机变量 $N(t+\\tau)-N(t)$ 呈现泊松分布，其参数为 $\\lambda\\tau$\n\n更一般地来说，一个泊松过程是在每个有界的时间区间或在某个空间（例如：一个欧几里得平面或三维的欧几里得空间）中的每一个有界的区域，赋予一个随机的事件数，使得:\n\n* 在一个时间区间或空间区域内的事件数，和另一个互斥（不重叠）的时间区间或空间区域内的事件数，这两个随机变量是独立的。\n* 在每一个时间区间或空间区域内的事件数是一个随机变量，遵循泊松分布。（技术上而言，更精确地来说，每一个具有有限测度的集合，都被赋予一个泊松分布的随机变量。）\n\n泊松过程是莱维过程（Lévy process）中最有名的过程之一。时间齐次的泊松过程也是时间齐次的连续时间Markov过程的例子。一个时间齐次、一维的泊松过程是一个纯出生过程，是一个出生-死亡过程的最简单例子。\n\n## 性质\n\n考虑一个泊松过程，我们将第一个事件到达的时间记为T1。此外，对于n>1，以Tn记在第n-1个事件与第n个事件之间用去的时间。序列{Tn,n=1,2,...}称为到达间隔时间列。\n\n* Tn(n=1,2,...)是独立同分布的指数随机变量，具有均值1/λ。\n\n## 注意\n到达率也译作强度\n\n## 例题\n\n强度为 λ 的泊松过程的点间间距是相互独立的随机变量，且服从均值为（ ）同一指数分布\n\n答案：1/ λ \n\n## 解析\n\n如上定义\n","source":"_posts/Math/2018-10-26-泊松过程.md","raw":"---\ntitle: 泊松过程\ntags:\n  - Poisson process\n  - Probability Theory\ncategories:\n  - Math\ndate: 2018-10-26 19:45:18\n---\n\n\n## Wiki的定义\nPoisson过程（Poisson process，大陆译泊松过程、普阿松过程等，台译卜瓦松過程、布瓦松過程、布阿松過程、波以松過程、卜氏過程等），是以法国数学家泊松（1781 - 1840）的名字命名的。泊松过程是随机过程的一种，是以事件的发生时间来定义的。我们说一个 随机过程 N(t) 是一个时间齐次的一维泊松过程，如果它满足以下条件：\n* 在两个互斥（不重叠）的区间内所发生的事件的数目是互相独立的随机变量。\n* 在区间$\\left[t,t+\\tau\\right]$内发生的事件的数目的概率分布为：$P\\left[(N(t+\\tau)-N(t)=k\\right]= \\frac{e^{-\\lambda\\tau}\\times{(\\lambda\\tau)^k}}{k!} \\qquad k=1,2,\\cdots$\n\n其中λ是一个正数，是固定的参数，通常称为抵达率（arrival rate）或强度（intensity）。所以，如果给定在时间区间 $\\left[t,t+\\tau\\right]$ 之中事件发生的数目则随机变量 $N(t+\\tau)-N(t)$ 呈现泊松分布，其参数为 $\\lambda\\tau$\n\n更一般地来说，一个泊松过程是在每个有界的时间区间或在某个空间（例如：一个欧几里得平面或三维的欧几里得空间）中的每一个有界的区域，赋予一个随机的事件数，使得:\n\n* 在一个时间区间或空间区域内的事件数，和另一个互斥（不重叠）的时间区间或空间区域内的事件数，这两个随机变量是独立的。\n* 在每一个时间区间或空间区域内的事件数是一个随机变量，遵循泊松分布。（技术上而言，更精确地来说，每一个具有有限测度的集合，都被赋予一个泊松分布的随机变量。）\n\n泊松过程是莱维过程（Lévy process）中最有名的过程之一。时间齐次的泊松过程也是时间齐次的连续时间Markov过程的例子。一个时间齐次、一维的泊松过程是一个纯出生过程，是一个出生-死亡过程的最简单例子。\n\n## 性质\n\n考虑一个泊松过程，我们将第一个事件到达的时间记为T1。此外，对于n>1，以Tn记在第n-1个事件与第n个事件之间用去的时间。序列{Tn,n=1,2,...}称为到达间隔时间列。\n\n* Tn(n=1,2,...)是独立同分布的指数随机变量，具有均值1/λ。\n\n## 注意\n到达率也译作强度\n\n## 例题\n\n强度为 λ 的泊松过程的点间间距是相互独立的随机变量，且服从均值为（ ）同一指数分布\n\n答案：1/ λ \n\n## 解析\n\n如上定义\n","slug":"Math-2018-10-26-泊松过程","published":1,"updated":"2021-02-13T16:06:58.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaqe003ocswgj3pjb420","content":"<h2 id=\"Wiki的定义\"><a href=\"#Wiki的定义\" class=\"headerlink\" title=\"Wiki的定义\"></a>Wiki的定义</h2><p>Poisson过程（Poisson process，大陆译泊松过程、普阿松过程等，台译卜瓦松過程、布瓦松過程、布阿松過程、波以松過程、卜氏過程等），是以法国数学家泊松（1781 - 1840）的名字命名的。泊松过程是随机过程的一种，是以事件的发生时间来定义的。我们说一个 随机过程 N(t) 是一个时间齐次的一维泊松过程，如果它满足以下条件：</p>\n<ul>\n<li>在两个互斥（不重叠）的区间内所发生的事件的数目是互相独立的随机变量。</li>\n<li>在区间$\\left[t,t+\\tau\\right]$内发生的事件的数目的概率分布为：$P\\left[(N(t+\\tau)-N(t)=k\\right]= \\frac{e^{-\\lambda\\tau}\\times{(\\lambda\\tau)^k}}{k!} \\qquad k=1,2,\\cdots$</li>\n</ul>\n<p>其中λ是一个正数，是固定的参数，通常称为抵达率（arrival rate）或强度（intensity）。所以，如果给定在时间区间 $\\left[t,t+\\tau\\right]$ 之中事件发生的数目则随机变量 $N(t+\\tau)-N(t)$ 呈现泊松分布，其参数为 $\\lambda\\tau$</p>\n<p>更一般地来说，一个泊松过程是在每个有界的时间区间或在某个空间（例如：一个欧几里得平面或三维的欧几里得空间）中的每一个有界的区域，赋予一个随机的事件数，使得:</p>\n<ul>\n<li>在一个时间区间或空间区域内的事件数，和另一个互斥（不重叠）的时间区间或空间区域内的事件数，这两个随机变量是独立的。</li>\n<li>在每一个时间区间或空间区域内的事件数是一个随机变量，遵循泊松分布。（技术上而言，更精确地来说，每一个具有有限测度的集合，都被赋予一个泊松分布的随机变量。）</li>\n</ul>\n<p>泊松过程是莱维过程（Lévy process）中最有名的过程之一。时间齐次的泊松过程也是时间齐次的连续时间Markov过程的例子。一个时间齐次、一维的泊松过程是一个纯出生过程，是一个出生-死亡过程的最简单例子。</p>\n<h2 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h2><p>考虑一个泊松过程，我们将第一个事件到达的时间记为T1。此外，对于n&gt;1，以Tn记在第n-1个事件与第n个事件之间用去的时间。序列{Tn,n=1,2,…}称为到达间隔时间列。</p>\n<ul>\n<li>Tn(n=1,2,…)是独立同分布的指数随机变量，具有均值1/λ。</li>\n</ul>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>到达率也译作强度</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>强度为 λ 的泊松过程的点间间距是相互独立的随机变量，且服从均值为（ ）同一指数分布</p>\n<p>答案：1/ λ </p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>如上定义</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Wiki的定义\"><a href=\"#Wiki的定义\" class=\"headerlink\" title=\"Wiki的定义\"></a>Wiki的定义</h2><p>Poisson过程（Poisson process，大陆译泊松过程、普阿松过程等，台译卜瓦松過程、布瓦松過程、布阿松過程、波以松過程、卜氏過程等），是以法国数学家泊松（1781 - 1840）的名字命名的。泊松过程是随机过程的一种，是以事件的发生时间来定义的。我们说一个 随机过程 N(t) 是一个时间齐次的一维泊松过程，如果它满足以下条件：</p>\n<ul>\n<li>在两个互斥（不重叠）的区间内所发生的事件的数目是互相独立的随机变量。</li>\n<li>在区间$\\left[t,t+\\tau\\right]$内发生的事件的数目的概率分布为：$P\\left[(N(t+\\tau)-N(t)=k\\right]= \\frac{e^{-\\lambda\\tau}\\times{(\\lambda\\tau)^k}}{k!} \\qquad k=1,2,\\cdots$</li>\n</ul>\n<p>其中λ是一个正数，是固定的参数，通常称为抵达率（arrival rate）或强度（intensity）。所以，如果给定在时间区间 $\\left[t,t+\\tau\\right]$ 之中事件发生的数目则随机变量 $N(t+\\tau)-N(t)$ 呈现泊松分布，其参数为 $\\lambda\\tau$</p>\n<p>更一般地来说，一个泊松过程是在每个有界的时间区间或在某个空间（例如：一个欧几里得平面或三维的欧几里得空间）中的每一个有界的区域，赋予一个随机的事件数，使得:</p>\n<ul>\n<li>在一个时间区间或空间区域内的事件数，和另一个互斥（不重叠）的时间区间或空间区域内的事件数，这两个随机变量是独立的。</li>\n<li>在每一个时间区间或空间区域内的事件数是一个随机变量，遵循泊松分布。（技术上而言，更精确地来说，每一个具有有限测度的集合，都被赋予一个泊松分布的随机变量。）</li>\n</ul>\n<p>泊松过程是莱维过程（Lévy process）中最有名的过程之一。时间齐次的泊松过程也是时间齐次的连续时间Markov过程的例子。一个时间齐次、一维的泊松过程是一个纯出生过程，是一个出生-死亡过程的最简单例子。</p>\n<h2 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h2><p>考虑一个泊松过程，我们将第一个事件到达的时间记为T1。此外，对于n&gt;1，以Tn记在第n-1个事件与第n个事件之间用去的时间。序列{Tn,n=1,2,…}称为到达间隔时间列。</p>\n<ul>\n<li>Tn(n=1,2,…)是独立同分布的指数随机变量，具有均值1/λ。</li>\n</ul>\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><p>到达率也译作强度</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>强度为 λ 的泊松过程的点间间距是相互独立的随机变量，且服从均值为（ ）同一指数分布</p>\n<p>答案：1/ λ </p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>如上定义</p>\n"},{"title":"贝叶斯公式","date":"2018-10-27T05:43:09.000Z","_content":"## 来源\n\n贝叶斯定理（英语：Bayes' theorem）是概率论中的一个定理，它跟随机变量的条件概率以及边缘概率分布有关。在有些关于概率的解释中，贝叶斯定理（贝叶斯公式）能够告知我们如何利用新证据修改已有的看法。这个名称来自于托马斯·贝叶斯。\n\n通常，事件A在事件B（发生）的条件下的概率，与事件B在事件A（发生）的条件下的概率是不一样的。然而，这两者是有确定的关系的，贝叶斯定理就是这种关系的陈述。贝叶斯公式的一个用途在于通过已知的三个概率函数推出第四个。\n\n## 定义\n\n贝叶斯定理是关于随机事件A和B的条件概率的一则定理。\n$$ P(A|B) = \\frac {P(A) \\times P(B|A)} {P(B)} $$\n其中P(A|B)是指在事件B发生的情况下事件A发生的概率。\n\n在贝叶斯定理中，每个名词都有约定俗成的名称：\n\n* P(A|B)是已知B发生后A的条件概率，也由于得自B的取值而被称作A的后验概率。\n* P(A)是A的先验概率（或边缘概率）。之所以称为\"先验\"是因为它不考虑任何B方面的因素。\n* P(B|A)是已知A发生后B的条件概率，也由于得自A的取值而被称作B的后验概率。\n* P(B)是B的先验概率或边缘概率。\n\n### 定义拓展\n\n按这些术语，贝叶斯定理可表述为：\n\n后验概率 = (似然性*先验概率)/标准化常量\n也就是说，后验概率与先验概率和相似度的乘积成正比。\n\n另外，比例$\\frac{P(B|A)}{P(B)}$也有时被称作标准似然度（standardised likelihood），贝叶斯定理可表述为：\n\n后验概率 = 标准似然度*先验概率\n\n## 例题\n\n某种产品中，合格品率为85%，一个合格品被检查成次品的概率是10%，一个次品被检查成合格品的概率为5%。问题：求一个被检查成合格品的产品确实为合格品的概率为（）\nA. 0.75\nB. 0.99\nC. 0.915\nD. 0.85\n\n答案： B\n\n### 解析\n\n#### 假设\n\n    事件A：产品本身合格\n    事件B：检验合格\n\n#### 即求\n$ P(A|B) $\n#### 则\n\n$$\nP(A|B)  = \\frac {P(AB)} {P(B|A)} \n= \\frac {P(AB)} {( P(B|!A) \\times P(!A) + P(B|A) \\times P(A))} \n= \\frac {0.85 \\times 0.9} {(0.05 \\times 0.15 + 0.9 \\times 0.85)} \n= 0.99\n$$\n\n或\n\n$$\n\nP(A|B) = \\frac { P(AB) } { P(B) }\n= \\frac { P(AB) } { P(BA)+P(B!A) }\n= \\frac { 0.85 \\times 0.9 } { 0.85 \\times 0.9+0.15 \\times 0.05 }\n\\approx 0.99\n\n$$\n \n ","source":"_posts/Math/2018-10-27-贝叶斯公式.md","raw":"---\ntitle: 贝叶斯公式\ndate: 2018-10-27 13:43:09\ncategories:\n- Math\ntags:\n- 贝叶斯公式\n- Probability Theory\n---\n## 来源\n\n贝叶斯定理（英语：Bayes' theorem）是概率论中的一个定理，它跟随机变量的条件概率以及边缘概率分布有关。在有些关于概率的解释中，贝叶斯定理（贝叶斯公式）能够告知我们如何利用新证据修改已有的看法。这个名称来自于托马斯·贝叶斯。\n\n通常，事件A在事件B（发生）的条件下的概率，与事件B在事件A（发生）的条件下的概率是不一样的。然而，这两者是有确定的关系的，贝叶斯定理就是这种关系的陈述。贝叶斯公式的一个用途在于通过已知的三个概率函数推出第四个。\n\n## 定义\n\n贝叶斯定理是关于随机事件A和B的条件概率的一则定理。\n$$ P(A|B) = \\frac {P(A) \\times P(B|A)} {P(B)} $$\n其中P(A|B)是指在事件B发生的情况下事件A发生的概率。\n\n在贝叶斯定理中，每个名词都有约定俗成的名称：\n\n* P(A|B)是已知B发生后A的条件概率，也由于得自B的取值而被称作A的后验概率。\n* P(A)是A的先验概率（或边缘概率）。之所以称为\"先验\"是因为它不考虑任何B方面的因素。\n* P(B|A)是已知A发生后B的条件概率，也由于得自A的取值而被称作B的后验概率。\n* P(B)是B的先验概率或边缘概率。\n\n### 定义拓展\n\n按这些术语，贝叶斯定理可表述为：\n\n后验概率 = (似然性*先验概率)/标准化常量\n也就是说，后验概率与先验概率和相似度的乘积成正比。\n\n另外，比例$\\frac{P(B|A)}{P(B)}$也有时被称作标准似然度（standardised likelihood），贝叶斯定理可表述为：\n\n后验概率 = 标准似然度*先验概率\n\n## 例题\n\n某种产品中，合格品率为85%，一个合格品被检查成次品的概率是10%，一个次品被检查成合格品的概率为5%。问题：求一个被检查成合格品的产品确实为合格品的概率为（）\nA. 0.75\nB. 0.99\nC. 0.915\nD. 0.85\n\n答案： B\n\n### 解析\n\n#### 假设\n\n    事件A：产品本身合格\n    事件B：检验合格\n\n#### 即求\n$ P(A|B) $\n#### 则\n\n$$\nP(A|B)  = \\frac {P(AB)} {P(B|A)} \n= \\frac {P(AB)} {( P(B|!A) \\times P(!A) + P(B|A) \\times P(A))} \n= \\frac {0.85 \\times 0.9} {(0.05 \\times 0.15 + 0.9 \\times 0.85)} \n= 0.99\n$$\n\n或\n\n$$\n\nP(A|B) = \\frac { P(AB) } { P(B) }\n= \\frac { P(AB) } { P(BA)+P(B!A) }\n= \\frac { 0.85 \\times 0.9 } { 0.85 \\times 0.9+0.15 \\times 0.05 }\n\\approx 0.99\n\n$$\n \n ","slug":"Math-2018-10-27-贝叶斯公式","published":1,"updated":"2021-02-13T16:06:58.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaqf003scswgf6no3adm","content":"<h2 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h2><p>贝叶斯定理（英语：Bayes’ theorem）是概率论中的一个定理，它跟随机变量的条件概率以及边缘概率分布有关。在有些关于概率的解释中，贝叶斯定理（贝叶斯公式）能够告知我们如何利用新证据修改已有的看法。这个名称来自于托马斯·贝叶斯。</p>\n<p>通常，事件A在事件B（发生）的条件下的概率，与事件B在事件A（发生）的条件下的概率是不一样的。然而，这两者是有确定的关系的，贝叶斯定理就是这种关系的陈述。贝叶斯公式的一个用途在于通过已知的三个概率函数推出第四个。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>贝叶斯定理是关于随机事件A和B的条件概率的一则定理。</p>\n<script type=\"math/tex; mode=display\">P(A|B) = \\frac {P(A) \\times P(B|A)} {P(B)}</script><p>其中P(A|B)是指在事件B发生的情况下事件A发生的概率。</p>\n<p>在贝叶斯定理中，每个名词都有约定俗成的名称：</p>\n<ul>\n<li>P(A|B)是已知B发生后A的条件概率，也由于得自B的取值而被称作A的后验概率。</li>\n<li>P(A)是A的先验概率（或边缘概率）。之所以称为”先验”是因为它不考虑任何B方面的因素。</li>\n<li>P(B|A)是已知A发生后B的条件概率，也由于得自A的取值而被称作B的后验概率。</li>\n<li>P(B)是B的先验概率或边缘概率。</li>\n</ul>\n<h3 id=\"定义拓展\"><a href=\"#定义拓展\" class=\"headerlink\" title=\"定义拓展\"></a>定义拓展</h3><p>按这些术语，贝叶斯定理可表述为：</p>\n<p>后验概率 = (似然性*先验概率)/标准化常量<br>也就是说，后验概率与先验概率和相似度的乘积成正比。</p>\n<p>另外，比例$\\frac{P(B|A)}{P(B)}$也有时被称作标准似然度（standardised likelihood），贝叶斯定理可表述为：</p>\n<p>后验概率 = 标准似然度*先验概率</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>某种产品中，合格品率为85%，一个合格品被检查成次品的概率是10%，一个次品被检查成合格品的概率为5%。问题：求一个被检查成合格品的产品确实为合格品的概率为（）<br>A. 0.75<br>B. 0.99<br>C. 0.915<br>D. 0.85</p>\n<p>答案： B</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><h4 id=\"假设\"><a href=\"#假设\" class=\"headerlink\" title=\"假设\"></a>假设</h4><pre><code>事件A：产品本身合格\n事件B：检验合格\n</code></pre><h4 id=\"即求\"><a href=\"#即求\" class=\"headerlink\" title=\"即求\"></a>即求</h4><p>$ P(A|B) $</p>\n<h4 id=\"则\"><a href=\"#则\" class=\"headerlink\" title=\"则\"></a>则</h4><script type=\"math/tex; mode=display\">\nP(A|B)  = \\frac {P(AB)} {P(B|A)} \n= \\frac {P(AB)} {( P(B|!A) \\times P(!A) + P(B|A) \\times P(A))} \n= \\frac {0.85 \\times 0.9} {(0.05 \\times 0.15 + 0.9 \\times 0.85)} \n= 0.99</script><p>或</p>\n<script type=\"math/tex; mode=display\">\n\nP(A|B) = \\frac { P(AB) } { P(B) }\n= \\frac { P(AB) } { P(BA)+P(B!A) }\n= \\frac { 0.85 \\times 0.9 } { 0.85 \\times 0.9+0.15 \\times 0.05 }\n\\approx 0.99</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h2><p>贝叶斯定理（英语：Bayes’ theorem）是概率论中的一个定理，它跟随机变量的条件概率以及边缘概率分布有关。在有些关于概率的解释中，贝叶斯定理（贝叶斯公式）能够告知我们如何利用新证据修改已有的看法。这个名称来自于托马斯·贝叶斯。</p>\n<p>通常，事件A在事件B（发生）的条件下的概率，与事件B在事件A（发生）的条件下的概率是不一样的。然而，这两者是有确定的关系的，贝叶斯定理就是这种关系的陈述。贝叶斯公式的一个用途在于通过已知的三个概率函数推出第四个。</p>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>贝叶斯定理是关于随机事件A和B的条件概率的一则定理。</p>\n<script type=\"math/tex; mode=display\">P(A|B) = \\frac {P(A) \\times P(B|A)} {P(B)}</script><p>其中P(A|B)是指在事件B发生的情况下事件A发生的概率。</p>\n<p>在贝叶斯定理中，每个名词都有约定俗成的名称：</p>\n<ul>\n<li>P(A|B)是已知B发生后A的条件概率，也由于得自B的取值而被称作A的后验概率。</li>\n<li>P(A)是A的先验概率（或边缘概率）。之所以称为”先验”是因为它不考虑任何B方面的因素。</li>\n<li>P(B|A)是已知A发生后B的条件概率，也由于得自A的取值而被称作B的后验概率。</li>\n<li>P(B)是B的先验概率或边缘概率。</li>\n</ul>\n<h3 id=\"定义拓展\"><a href=\"#定义拓展\" class=\"headerlink\" title=\"定义拓展\"></a>定义拓展</h3><p>按这些术语，贝叶斯定理可表述为：</p>\n<p>后验概率 = (似然性*先验概率)/标准化常量<br>也就是说，后验概率与先验概率和相似度的乘积成正比。</p>\n<p>另外，比例$\\frac{P(B|A)}{P(B)}$也有时被称作标准似然度（standardised likelihood），贝叶斯定理可表述为：</p>\n<p>后验概率 = 标准似然度*先验概率</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>某种产品中，合格品率为85%，一个合格品被检查成次品的概率是10%，一个次品被检查成合格品的概率为5%。问题：求一个被检查成合格品的产品确实为合格品的概率为（）<br>A. 0.75<br>B. 0.99<br>C. 0.915<br>D. 0.85</p>\n<p>答案： B</p>\n<h3 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h3><h4 id=\"假设\"><a href=\"#假设\" class=\"headerlink\" title=\"假设\"></a>假设</h4><pre><code>事件A：产品本身合格\n事件B：检验合格\n</code></pre><h4 id=\"即求\"><a href=\"#即求\" class=\"headerlink\" title=\"即求\"></a>即求</h4><p>$ P(A|B) $</p>\n<h4 id=\"则\"><a href=\"#则\" class=\"headerlink\" title=\"则\"></a>则</h4><script type=\"math/tex; mode=display\">\nP(A|B)  = \\frac {P(AB)} {P(B|A)} \n= \\frac {P(AB)} {( P(B|!A) \\times P(!A) + P(B|A) \\times P(A))} \n= \\frac {0.85 \\times 0.9} {(0.05 \\times 0.15 + 0.9 \\times 0.85)} \n= 0.99</script><p>或</p>\n<script type=\"math/tex; mode=display\">\n\nP(A|B) = \\frac { P(AB) } { P(B) }\n= \\frac { P(AB) } { P(BA)+P(B!A) }\n= \\frac { 0.85 \\times 0.9 } { 0.85 \\times 0.9+0.15 \\times 0.05 }\n\\approx 0.99</script>"},{"title":"数学期望","date":"2018-10-27T05:41:20.000Z","_content":"\n## 公式\n\n$E(X)=\\sum\\limits_{k=1}^{\\infty} x_k p_k$\n\n## 个人理解\n\n数学上希望出现的均值\n\n## 例题\n\n某盒中有 5 件产品，其中 2 件次品。现随机地从中 2 件，则 2 件中次品数的均值是（）\n\n答案: $\\frac{4}{5}$\n\n## 解析\n\n次品出现次数：0 , 1 , 2\n$$\nP(i=0) = \\frac{3}{10}\\\\\nP(i=1) = \\frac{6}{10}\\\\\nP(i=2) = \\frac{1}{10}\\\\\nE = 0 \\times P(i=0) + 1 \\times P(i=1) + 2 \\times P(i=2)\n= \\frac{4}{5}\n$$\n\n即题目在求次品出现的数学期望\n\n## 对于二项分布\n\n$E = x_1 \\times p_1 + x_2 \\times p_2 + \\cdots + x_n \\times p_n$\n\n其中 $p_1 \\cdots p_n$ 在二项分布中均相等,$x_1 \\cdots x_n$ 也相等（仅有两事件且不变）\n\n### 则\n\n$E = np$","source":"_posts/Math/2018-10-27-数学期望.md","raw":"---\ntitle: 数学期望\ncategories:\n  - Math\ntags:\n  - Probability Theory\n  - 数学期望\ndate: 2018-10-27 13:41:20\n---\n\n## 公式\n\n$E(X)=\\sum\\limits_{k=1}^{\\infty} x_k p_k$\n\n## 个人理解\n\n数学上希望出现的均值\n\n## 例题\n\n某盒中有 5 件产品，其中 2 件次品。现随机地从中 2 件，则 2 件中次品数的均值是（）\n\n答案: $\\frac{4}{5}$\n\n## 解析\n\n次品出现次数：0 , 1 , 2\n$$\nP(i=0) = \\frac{3}{10}\\\\\nP(i=1) = \\frac{6}{10}\\\\\nP(i=2) = \\frac{1}{10}\\\\\nE = 0 \\times P(i=0) + 1 \\times P(i=1) + 2 \\times P(i=2)\n= \\frac{4}{5}\n$$\n\n即题目在求次品出现的数学期望\n\n## 对于二项分布\n\n$E = x_1 \\times p_1 + x_2 \\times p_2 + \\cdots + x_n \\times p_n$\n\n其中 $p_1 \\cdots p_n$ 在二项分布中均相等,$x_1 \\cdots x_n$ 也相等（仅有两事件且不变）\n\n### 则\n\n$E = np$","slug":"Math-2018-10-27-数学期望","published":1,"updated":"2021-02-13T16:06:58.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaqg003tcswgwqrj8j6g","content":"<h2 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h2><p>$E(X)=\\sum\\limits_{k=1}^{\\infty} x_k p_k$</p>\n<h2 id=\"个人理解\"><a href=\"#个人理解\" class=\"headerlink\" title=\"个人理解\"></a>个人理解</h2><p>数学上希望出现的均值</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>某盒中有 5 件产品，其中 2 件次品。现随机地从中 2 件，则 2 件中次品数的均值是（）</p>\n<p>答案: $\\frac{4}{5}$</p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>次品出现次数：0 , 1 , 2</p>\n<script type=\"math/tex; mode=display\">\nP(i=0) = \\frac{3}{10}\\\\\nP(i=1) = \\frac{6}{10}\\\\\nP(i=2) = \\frac{1}{10}\\\\\nE = 0 \\times P(i=0) + 1 \\times P(i=1) + 2 \\times P(i=2)\n= \\frac{4}{5}</script><p>即题目在求次品出现的数学期望</p>\n<h2 id=\"对于二项分布\"><a href=\"#对于二项分布\" class=\"headerlink\" title=\"对于二项分布\"></a>对于二项分布</h2><p>$E = x_1 \\times p_1 + x_2 \\times p_2 + \\cdots + x_n \\times p_n$</p>\n<p>其中 $p_1 \\cdots p_n$ 在二项分布中均相等,$x_1 \\cdots x_n$ 也相等（仅有两事件且不变）</p>\n<h3 id=\"则\"><a href=\"#则\" class=\"headerlink\" title=\"则\"></a>则</h3><p>$E = np$</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"公式\"><a href=\"#公式\" class=\"headerlink\" title=\"公式\"></a>公式</h2><p>$E(X)=\\sum\\limits_{k=1}^{\\infty} x_k p_k$</p>\n<h2 id=\"个人理解\"><a href=\"#个人理解\" class=\"headerlink\" title=\"个人理解\"></a>个人理解</h2><p>数学上希望出现的均值</p>\n<h2 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h2><p>某盒中有 5 件产品，其中 2 件次品。现随机地从中 2 件，则 2 件中次品数的均值是（）</p>\n<p>答案: $\\frac{4}{5}$</p>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>次品出现次数：0 , 1 , 2</p>\n<script type=\"math/tex; mode=display\">\nP(i=0) = \\frac{3}{10}\\\\\nP(i=1) = \\frac{6}{10}\\\\\nP(i=2) = \\frac{1}{10}\\\\\nE = 0 \\times P(i=0) + 1 \\times P(i=1) + 2 \\times P(i=2)\n= \\frac{4}{5}</script><p>即题目在求次品出现的数学期望</p>\n<h2 id=\"对于二项分布\"><a href=\"#对于二项分布\" class=\"headerlink\" title=\"对于二项分布\"></a>对于二项分布</h2><p>$E = x_1 \\times p_1 + x_2 \\times p_2 + \\cdots + x_n \\times p_n$</p>\n<p>其中 $p_1 \\cdots p_n$ 在二项分布中均相等,$x_1 \\cdots x_n$ 也相等（仅有两事件且不变）</p>\n<h3 id=\"则\"><a href=\"#则\" class=\"headerlink\" title=\"则\"></a>则</h3><p>$E = np$</p>\n"},{"title":"Quaternion四元数","date":"2018-10-27T05:44:46.000Z","_content":"## 旋转操作\n 在unity3d中, quaternion 的乘法操作 (operator  * ) 有两种操作:\n\n1. quaternion * quaternion , 例如 q = t * p; 这是将一个点先进行t 操作旋转,然后进行p操作旋转.\n2. Quaternion * Vector3, 例如 p : Vector3, t : Quaternion , q : Quaternion;    q = t * p; 这是将点p 进性t 操作旋转，即对一个向量进行旋转;\n\n\nQuaternion 的基本数学方程为 :   \n$$\nQ=\\cos\\frac{angle}{2}+i(x \\times \\sin \\frac{a}{2})+j(y \\times \\sin \\frac{a}{2})+k(z \\times \\sin \\frac{a}{2}) \\qquad(a 为旋转角度)\\\\\n\\\\\nQ : Quaternion;\\\\\nQ.w = \\cos \\frac{angle}{2}\\\\\nQ.x = axis.x \\times \\sin \\frac{angle}{2}\\\\\nQ.y = axis.y \\times \\sin \\frac{angle}{2}\\\\\nQ.z = axis.z \\times \\sin \\frac{angle}{2}\n$$\n\n我们只要有角度就可以给出四元数的四个部分值,例如我想要让点M=Vector3(o,p,q) 绕x轴顺时针旋转90度;那么对应的quaternion数值就应该为:\n$$\nQ : Quaternion;\\\\\nQ.x = 1 \\times \\sin\\frac{90^\\circ}{2} = \\sin(45^\\circ) = 0.7071\\\\\nQ.y = 0\\\\\nQ.z = 0\\\\\nQ.w = cos(90度/2) = cos (45度) = 0.7071\\\\\nQ = \\left( 0.7071, 0 , 0 , 0.7071 \\right)\\\\\nm = Q \\times m\\\\\n\\left(将点 m 绕 x轴 \\left(1,0,0\\right) 顺时针旋转了90度\\right)\n$$\n","source":"_posts/Unity/2018-10-27-Quaternion四元数.md","raw":"---\ntitle: Quaternion四元数\ndate: 2018-10-27 13:44:46\ncategories:\n- Unity\ntags:\n- Math\n- Unity\n- GameLogic\n---\n## 旋转操作\n 在unity3d中, quaternion 的乘法操作 (operator  * ) 有两种操作:\n\n1. quaternion * quaternion , 例如 q = t * p; 这是将一个点先进行t 操作旋转,然后进行p操作旋转.\n2. Quaternion * Vector3, 例如 p : Vector3, t : Quaternion , q : Quaternion;    q = t * p; 这是将点p 进性t 操作旋转，即对一个向量进行旋转;\n\n\nQuaternion 的基本数学方程为 :   \n$$\nQ=\\cos\\frac{angle}{2}+i(x \\times \\sin \\frac{a}{2})+j(y \\times \\sin \\frac{a}{2})+k(z \\times \\sin \\frac{a}{2}) \\qquad(a 为旋转角度)\\\\\n\\\\\nQ : Quaternion;\\\\\nQ.w = \\cos \\frac{angle}{2}\\\\\nQ.x = axis.x \\times \\sin \\frac{angle}{2}\\\\\nQ.y = axis.y \\times \\sin \\frac{angle}{2}\\\\\nQ.z = axis.z \\times \\sin \\frac{angle}{2}\n$$\n\n我们只要有角度就可以给出四元数的四个部分值,例如我想要让点M=Vector3(o,p,q) 绕x轴顺时针旋转90度;那么对应的quaternion数值就应该为:\n$$\nQ : Quaternion;\\\\\nQ.x = 1 \\times \\sin\\frac{90^\\circ}{2} = \\sin(45^\\circ) = 0.7071\\\\\nQ.y = 0\\\\\nQ.z = 0\\\\\nQ.w = cos(90度/2) = cos (45度) = 0.7071\\\\\nQ = \\left( 0.7071, 0 , 0 , 0.7071 \\right)\\\\\nm = Q \\times m\\\\\n\\left(将点 m 绕 x轴 \\left(1,0,0\\right) 顺时针旋转了90度\\right)\n$$\n","slug":"Unity-2018-10-27-Quaternion四元数","published":1,"updated":"2021-02-13T16:06:58.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaqi003xcswgt7tbub8k","content":"<h2 id=\"旋转操作\"><a href=\"#旋转操作\" class=\"headerlink\" title=\"旋转操作\"></a>旋转操作</h2><p> 在unity3d中, quaternion 的乘法操作 (operator  * ) 有两种操作:</p>\n<ol>\n<li>quaternion <em> quaternion , 例如 q = t </em> p; 这是将一个点先进行t 操作旋转,然后进行p操作旋转.</li>\n<li>Quaternion <em> Vector3, 例如 p : Vector3, t : Quaternion , q : Quaternion;    q = t </em> p; 这是将点p 进性t 操作旋转，即对一个向量进行旋转;</li>\n</ol>\n<p>Quaternion 的基本数学方程为 :   </p>\n<script type=\"math/tex; mode=display\">\nQ=\\cos\\frac{angle}{2}+i(x \\times \\sin \\frac{a}{2})+j(y \\times \\sin \\frac{a}{2})+k(z \\times \\sin \\frac{a}{2}) \\qquad(a 为旋转角度)\\\\\n\\\\\nQ : Quaternion;\\\\\nQ.w = \\cos \\frac{angle}{2}\\\\\nQ.x = axis.x \\times \\sin \\frac{angle}{2}\\\\\nQ.y = axis.y \\times \\sin \\frac{angle}{2}\\\\\nQ.z = axis.z \\times \\sin \\frac{angle}{2}</script><p>我们只要有角度就可以给出四元数的四个部分值,例如我想要让点M=Vector3(o,p,q) 绕x轴顺时针旋转90度;那么对应的quaternion数值就应该为:</p>\n<script type=\"math/tex; mode=display\">\nQ : Quaternion;\\\\\nQ.x = 1 \\times \\sin\\frac{90^\\circ}{2} = \\sin(45^\\circ) = 0.7071\\\\\nQ.y = 0\\\\\nQ.z = 0\\\\\nQ.w = cos(90度/2) = cos (45度) = 0.7071\\\\\nQ = \\left( 0.7071, 0 , 0 , 0.7071 \\right)\\\\\nm = Q \\times m\\\\\n\\left(将点 m 绕 x轴 \\left(1,0,0\\right) 顺时针旋转了90度\\right)</script>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"旋转操作\"><a href=\"#旋转操作\" class=\"headerlink\" title=\"旋转操作\"></a>旋转操作</h2><p> 在unity3d中, quaternion 的乘法操作 (operator  * ) 有两种操作:</p>\n<ol>\n<li>quaternion <em> quaternion , 例如 q = t </em> p; 这是将一个点先进行t 操作旋转,然后进行p操作旋转.</li>\n<li>Quaternion <em> Vector3, 例如 p : Vector3, t : Quaternion , q : Quaternion;    q = t </em> p; 这是将点p 进性t 操作旋转，即对一个向量进行旋转;</li>\n</ol>\n<p>Quaternion 的基本数学方程为 :   </p>\n<script type=\"math/tex; mode=display\">\nQ=\\cos\\frac{angle}{2}+i(x \\times \\sin \\frac{a}{2})+j(y \\times \\sin \\frac{a}{2})+k(z \\times \\sin \\frac{a}{2}) \\qquad(a 为旋转角度)\\\\\n\\\\\nQ : Quaternion;\\\\\nQ.w = \\cos \\frac{angle}{2}\\\\\nQ.x = axis.x \\times \\sin \\frac{angle}{2}\\\\\nQ.y = axis.y \\times \\sin \\frac{angle}{2}\\\\\nQ.z = axis.z \\times \\sin \\frac{angle}{2}</script><p>我们只要有角度就可以给出四元数的四个部分值,例如我想要让点M=Vector3(o,p,q) 绕x轴顺时针旋转90度;那么对应的quaternion数值就应该为:</p>\n<script type=\"math/tex; mode=display\">\nQ : Quaternion;\\\\\nQ.x = 1 \\times \\sin\\frac{90^\\circ}{2} = \\sin(45^\\circ) = 0.7071\\\\\nQ.y = 0\\\\\nQ.z = 0\\\\\nQ.w = cos(90度/2) = cos (45度) = 0.7071\\\\\nQ = \\left( 0.7071, 0 , 0 , 0.7071 \\right)\\\\\nm = Q \\times m\\\\\n\\left(将点 m 绕 x轴 \\left(1,0,0\\right) 顺时针旋转了90度\\right)</script>"},{"title":"渲染管线-Pipeline","date":"2018-10-27T07:54:43.000Z","_content":"# 渲染管线\n\n## 概念介绍\n\n渲染管线(Render Pipeline) 也即渲染流水线。\n\n渲染管线的工作任务在于从一个三维场景出发，生成(或渲染)成一张二维图像。即计算机从一系列的顶点数据，纹理等信息出发，把信息转换成一张人眼可见的图像，这个过程由CPU和GPU共同完成\n\n百度百科的定义为显示芯片内部处理图形信号相互独立的并行处理单元。此处指概念上的渲染管线，与GPU上的渲染管线不同。\n\nDX10为了提高渲染速度，改良渲染架构，不再使用渲染管线的概念。\n\n>在DX10的统一渲染架构中，渲染管线、顶点着色器等不复存在。所谓统一渲染架构，大家可以理解为将Vertex Shader（顶点着色器单元）、Pixel Pipelines（像素渲染管线）统一被Stream Processors（流处理器）所取代。此时，显卡中的GPU将不会开辟独立的渲染管线，而是所有的运算单元都可以任意处理任何一种Shader运算。这使得GPU的利用率更加高，也避免了传统架构中由于资源分配不合理引起的资源浪费现象。 最新的DX11也是采用流处理器的统一渲染架构。\n\n\n《Real-Time Rendering》一书中将渲染流程分成三阶段：\n\n- 应用阶段(Application Stage)\n- 几何阶段(Geometry Stage)\n- 光栅化阶段(Rasterizer Stage)\n\n每个阶段本身也是一个流水线系统，即包含了子流水线阶段。\n\n## 应用阶段(Application Stage)\n\n应用阶段顾名思义由应用主导，开发者对应用阶段的流水线化有绝对的控制权。\n\n### 应用阶段的主要任务\n1. 准备场景数据\n    - 相机的位置\n    - 视锥体的信息\n    - 场景包含了哪些模型\n    - 光源信息\n    \n2. 为了优化渲染性能，进行粗粒度剔除剔除不可见的物体。\n\n3. 设置模型的渲染状态，渲染状态包括但不限于：\n    - 模型使用的材质(漫反射颜色，高光反射的颜色)\n    - 模型使用的纹理\n    - 所用的Shader\n\n最后一个阶段的任务是出书渲染所需的几何信息，即渲染图元(Rendering primitives)。\n\n渲染图元可以是点，线，三角面等\n\n### 应用阶段的输出\n\n应用阶段输出一系列顶点的数据即渲染图元，并递交给几何阶段。\n\n## 几何阶段(Geometry Stage)\n\n处理绘制几何相关的任务，决定绘制图元的种类和绘制方式。\n\n在这个阶段里对每个图元进行逐顶点，逐多边形的操作。\n\n### 几何阶段的重要任务\n\n讲应用阶段传递的渲染图元进行坐标变换，变换到屏幕空间中，最后交由光栅器处理。\n\n### 几何阶段的输出\n\n对渲染图元进行多步处理，输出屏幕空间的二维顶点坐标，每个顶点对应的深度值，着色等信息。\n\n## 光栅化阶段(Rasterizer Stage)\n","source":"_posts/Unity/2018-10-27-渲染管线-Pipeline.md","raw":"---\ntitle: 渲染管线-Pipeline\ndate: 2018-10-27 15:54:43\ncategories:\n- Unity\ntags:\n- Pipeline\n- Shader\n- Graphic\n---\n# 渲染管线\n\n## 概念介绍\n\n渲染管线(Render Pipeline) 也即渲染流水线。\n\n渲染管线的工作任务在于从一个三维场景出发，生成(或渲染)成一张二维图像。即计算机从一系列的顶点数据，纹理等信息出发，把信息转换成一张人眼可见的图像，这个过程由CPU和GPU共同完成\n\n百度百科的定义为显示芯片内部处理图形信号相互独立的并行处理单元。此处指概念上的渲染管线，与GPU上的渲染管线不同。\n\nDX10为了提高渲染速度，改良渲染架构，不再使用渲染管线的概念。\n\n>在DX10的统一渲染架构中，渲染管线、顶点着色器等不复存在。所谓统一渲染架构，大家可以理解为将Vertex Shader（顶点着色器单元）、Pixel Pipelines（像素渲染管线）统一被Stream Processors（流处理器）所取代。此时，显卡中的GPU将不会开辟独立的渲染管线，而是所有的运算单元都可以任意处理任何一种Shader运算。这使得GPU的利用率更加高，也避免了传统架构中由于资源分配不合理引起的资源浪费现象。 最新的DX11也是采用流处理器的统一渲染架构。\n\n\n《Real-Time Rendering》一书中将渲染流程分成三阶段：\n\n- 应用阶段(Application Stage)\n- 几何阶段(Geometry Stage)\n- 光栅化阶段(Rasterizer Stage)\n\n每个阶段本身也是一个流水线系统，即包含了子流水线阶段。\n\n## 应用阶段(Application Stage)\n\n应用阶段顾名思义由应用主导，开发者对应用阶段的流水线化有绝对的控制权。\n\n### 应用阶段的主要任务\n1. 准备场景数据\n    - 相机的位置\n    - 视锥体的信息\n    - 场景包含了哪些模型\n    - 光源信息\n    \n2. 为了优化渲染性能，进行粗粒度剔除剔除不可见的物体。\n\n3. 设置模型的渲染状态，渲染状态包括但不限于：\n    - 模型使用的材质(漫反射颜色，高光反射的颜色)\n    - 模型使用的纹理\n    - 所用的Shader\n\n最后一个阶段的任务是出书渲染所需的几何信息，即渲染图元(Rendering primitives)。\n\n渲染图元可以是点，线，三角面等\n\n### 应用阶段的输出\n\n应用阶段输出一系列顶点的数据即渲染图元，并递交给几何阶段。\n\n## 几何阶段(Geometry Stage)\n\n处理绘制几何相关的任务，决定绘制图元的种类和绘制方式。\n\n在这个阶段里对每个图元进行逐顶点，逐多边形的操作。\n\n### 几何阶段的重要任务\n\n讲应用阶段传递的渲染图元进行坐标变换，变换到屏幕空间中，最后交由光栅器处理。\n\n### 几何阶段的输出\n\n对渲染图元进行多步处理，输出屏幕空间的二维顶点坐标，每个顶点对应的深度值，着色等信息。\n\n## 光栅化阶段(Rasterizer Stage)\n","slug":"Unity-2018-10-27-渲染管线-Pipeline","published":1,"updated":"2021-02-13T16:06:58.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaqi003zcswgkwi8o5qu","content":"<h1 id=\"渲染管线\"><a href=\"#渲染管线\" class=\"headerlink\" title=\"渲染管线\"></a>渲染管线</h1><h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p>渲染管线(Render Pipeline) 也即渲染流水线。</p>\n<p>渲染管线的工作任务在于从一个三维场景出发，生成(或渲染)成一张二维图像。即计算机从一系列的顶点数据，纹理等信息出发，把信息转换成一张人眼可见的图像，这个过程由CPU和GPU共同完成</p>\n<p>百度百科的定义为显示芯片内部处理图形信号相互独立的并行处理单元。此处指概念上的渲染管线，与GPU上的渲染管线不同。</p>\n<p>DX10为了提高渲染速度，改良渲染架构，不再使用渲染管线的概念。</p>\n<blockquote>\n<p>在DX10的统一渲染架构中，渲染管线、顶点着色器等不复存在。所谓统一渲染架构，大家可以理解为将Vertex Shader（顶点着色器单元）、Pixel Pipelines（像素渲染管线）统一被Stream Processors（流处理器）所取代。此时，显卡中的GPU将不会开辟独立的渲染管线，而是所有的运算单元都可以任意处理任何一种Shader运算。这使得GPU的利用率更加高，也避免了传统架构中由于资源分配不合理引起的资源浪费现象。 最新的DX11也是采用流处理器的统一渲染架构。</p>\n</blockquote>\n<p>《Real-Time Rendering》一书中将渲染流程分成三阶段：</p>\n<ul>\n<li>应用阶段(Application Stage)</li>\n<li>几何阶段(Geometry Stage)</li>\n<li>光栅化阶段(Rasterizer Stage)</li>\n</ul>\n<p>每个阶段本身也是一个流水线系统，即包含了子流水线阶段。</p>\n<h2 id=\"应用阶段-Application-Stage\"><a href=\"#应用阶段-Application-Stage\" class=\"headerlink\" title=\"应用阶段(Application Stage)\"></a>应用阶段(Application Stage)</h2><p>应用阶段顾名思义由应用主导，开发者对应用阶段的流水线化有绝对的控制权。</p>\n<h3 id=\"应用阶段的主要任务\"><a href=\"#应用阶段的主要任务\" class=\"headerlink\" title=\"应用阶段的主要任务\"></a>应用阶段的主要任务</h3><ol>\n<li><p>准备场景数据</p>\n<ul>\n<li>相机的位置</li>\n<li>视锥体的信息</li>\n<li>场景包含了哪些模型</li>\n<li>光源信息</li>\n</ul>\n</li>\n<li><p>为了优化渲染性能，进行粗粒度剔除剔除不可见的物体。</p>\n</li>\n<li><p>设置模型的渲染状态，渲染状态包括但不限于：</p>\n<ul>\n<li>模型使用的材质(漫反射颜色，高光反射的颜色)</li>\n<li>模型使用的纹理</li>\n<li>所用的Shader</li>\n</ul>\n</li>\n</ol>\n<p>最后一个阶段的任务是出书渲染所需的几何信息，即渲染图元(Rendering primitives)。</p>\n<p>渲染图元可以是点，线，三角面等</p>\n<h3 id=\"应用阶段的输出\"><a href=\"#应用阶段的输出\" class=\"headerlink\" title=\"应用阶段的输出\"></a>应用阶段的输出</h3><p>应用阶段输出一系列顶点的数据即渲染图元，并递交给几何阶段。</p>\n<h2 id=\"几何阶段-Geometry-Stage\"><a href=\"#几何阶段-Geometry-Stage\" class=\"headerlink\" title=\"几何阶段(Geometry Stage)\"></a>几何阶段(Geometry Stage)</h2><p>处理绘制几何相关的任务，决定绘制图元的种类和绘制方式。</p>\n<p>在这个阶段里对每个图元进行逐顶点，逐多边形的操作。</p>\n<h3 id=\"几何阶段的重要任务\"><a href=\"#几何阶段的重要任务\" class=\"headerlink\" title=\"几何阶段的重要任务\"></a>几何阶段的重要任务</h3><p>讲应用阶段传递的渲染图元进行坐标变换，变换到屏幕空间中，最后交由光栅器处理。</p>\n<h3 id=\"几何阶段的输出\"><a href=\"#几何阶段的输出\" class=\"headerlink\" title=\"几何阶段的输出\"></a>几何阶段的输出</h3><p>对渲染图元进行多步处理，输出屏幕空间的二维顶点坐标，每个顶点对应的深度值，着色等信息。</p>\n<h2 id=\"光栅化阶段-Rasterizer-Stage\"><a href=\"#光栅化阶段-Rasterizer-Stage\" class=\"headerlink\" title=\"光栅化阶段(Rasterizer Stage)\"></a>光栅化阶段(Rasterizer Stage)</h2>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"渲染管线\"><a href=\"#渲染管线\" class=\"headerlink\" title=\"渲染管线\"></a>渲染管线</h1><h2 id=\"概念介绍\"><a href=\"#概念介绍\" class=\"headerlink\" title=\"概念介绍\"></a>概念介绍</h2><p>渲染管线(Render Pipeline) 也即渲染流水线。</p>\n<p>渲染管线的工作任务在于从一个三维场景出发，生成(或渲染)成一张二维图像。即计算机从一系列的顶点数据，纹理等信息出发，把信息转换成一张人眼可见的图像，这个过程由CPU和GPU共同完成</p>\n<p>百度百科的定义为显示芯片内部处理图形信号相互独立的并行处理单元。此处指概念上的渲染管线，与GPU上的渲染管线不同。</p>\n<p>DX10为了提高渲染速度，改良渲染架构，不再使用渲染管线的概念。</p>\n<blockquote>\n<p>在DX10的统一渲染架构中，渲染管线、顶点着色器等不复存在。所谓统一渲染架构，大家可以理解为将Vertex Shader（顶点着色器单元）、Pixel Pipelines（像素渲染管线）统一被Stream Processors（流处理器）所取代。此时，显卡中的GPU将不会开辟独立的渲染管线，而是所有的运算单元都可以任意处理任何一种Shader运算。这使得GPU的利用率更加高，也避免了传统架构中由于资源分配不合理引起的资源浪费现象。 最新的DX11也是采用流处理器的统一渲染架构。</p>\n</blockquote>\n<p>《Real-Time Rendering》一书中将渲染流程分成三阶段：</p>\n<ul>\n<li>应用阶段(Application Stage)</li>\n<li>几何阶段(Geometry Stage)</li>\n<li>光栅化阶段(Rasterizer Stage)</li>\n</ul>\n<p>每个阶段本身也是一个流水线系统，即包含了子流水线阶段。</p>\n<h2 id=\"应用阶段-Application-Stage\"><a href=\"#应用阶段-Application-Stage\" class=\"headerlink\" title=\"应用阶段(Application Stage)\"></a>应用阶段(Application Stage)</h2><p>应用阶段顾名思义由应用主导，开发者对应用阶段的流水线化有绝对的控制权。</p>\n<h3 id=\"应用阶段的主要任务\"><a href=\"#应用阶段的主要任务\" class=\"headerlink\" title=\"应用阶段的主要任务\"></a>应用阶段的主要任务</h3><ol>\n<li><p>准备场景数据</p>\n<ul>\n<li>相机的位置</li>\n<li>视锥体的信息</li>\n<li>场景包含了哪些模型</li>\n<li>光源信息</li>\n</ul>\n</li>\n<li><p>为了优化渲染性能，进行粗粒度剔除剔除不可见的物体。</p>\n</li>\n<li><p>设置模型的渲染状态，渲染状态包括但不限于：</p>\n<ul>\n<li>模型使用的材质(漫反射颜色，高光反射的颜色)</li>\n<li>模型使用的纹理</li>\n<li>所用的Shader</li>\n</ul>\n</li>\n</ol>\n<p>最后一个阶段的任务是出书渲染所需的几何信息，即渲染图元(Rendering primitives)。</p>\n<p>渲染图元可以是点，线，三角面等</p>\n<h3 id=\"应用阶段的输出\"><a href=\"#应用阶段的输出\" class=\"headerlink\" title=\"应用阶段的输出\"></a>应用阶段的输出</h3><p>应用阶段输出一系列顶点的数据即渲染图元，并递交给几何阶段。</p>\n<h2 id=\"几何阶段-Geometry-Stage\"><a href=\"#几何阶段-Geometry-Stage\" class=\"headerlink\" title=\"几何阶段(Geometry Stage)\"></a>几何阶段(Geometry Stage)</h2><p>处理绘制几何相关的任务，决定绘制图元的种类和绘制方式。</p>\n<p>在这个阶段里对每个图元进行逐顶点，逐多边形的操作。</p>\n<h3 id=\"几何阶段的重要任务\"><a href=\"#几何阶段的重要任务\" class=\"headerlink\" title=\"几何阶段的重要任务\"></a>几何阶段的重要任务</h3><p>讲应用阶段传递的渲染图元进行坐标变换，变换到屏幕空间中，最后交由光栅器处理。</p>\n<h3 id=\"几何阶段的输出\"><a href=\"#几何阶段的输出\" class=\"headerlink\" title=\"几何阶段的输出\"></a>几何阶段的输出</h3><p>对渲染图元进行多步处理，输出屏幕空间的二维顶点坐标，每个顶点对应的深度值，着色等信息。</p>\n<h2 id=\"光栅化阶段-Rasterizer-Stage\"><a href=\"#光栅化阶段-Rasterizer-Stage\" class=\"headerlink\" title=\"光栅化阶段(Rasterizer Stage)\"></a>光栅化阶段(Rasterizer Stage)</h2>"},{"title":"Unity2D中简单的相机跟随","date":"2018-10-28T18:34:48.000Z","_content":"## Code\n``` csharp CamraFollow\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class CameraFollow : MonoBehaviour {\n    //跟随目标\n    public Transform _target;\n\n    //平滑系数\n    public float smoothing;\n\n    //跟随速度\n    private Vector3 velocity;\n    \n    //写在LateUpdate中\n    void LateUpdate () {\n        if (_target != null)\n        {     \n            this.transform.position = Vector3.SmoothDamp(this.transform.position, _target.transform.position, ref velocity, smoothing);\n        }\n    }\n}\n\n```","source":"_posts/Unity/2018-10-29-Unity2D中简单的相机跟随.md","raw":"---\ntitle: Unity2D中简单的相机跟随\ndate: 2018-10-29 02:34:48\ncategories:\n- Code\ntags:\n- C#\n- Code\n- Sample\n---\n## Code\n``` csharp CamraFollow\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\n\npublic class CameraFollow : MonoBehaviour {\n    //跟随目标\n    public Transform _target;\n\n    //平滑系数\n    public float smoothing;\n\n    //跟随速度\n    private Vector3 velocity;\n    \n    //写在LateUpdate中\n    void LateUpdate () {\n        if (_target != null)\n        {     \n            this.transform.position = Vector3.SmoothDamp(this.transform.position, _target.transform.position, ref velocity, smoothing);\n        }\n    }\n}\n\n```","slug":"Unity-2018-10-29-Unity2D中简单的相机跟随","published":1,"updated":"2021-02-13T16:06:58.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckl3xjaqk0044cswgewnomfq6","content":"<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight csharp\"><figcaption><span>CamraFollow</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CameraFollow</span> : <span class=\"title\">MonoBehaviour</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//跟随目标</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Transform _target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//平滑系数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> smoothing;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//跟随速度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector3 velocity;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//写在LateUpdate中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LateUpdate</span> (<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_target != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;     </span><br><span class=\"line\">            <span class=\"keyword\">this</span>.transform.position = Vector3.SmoothDamp(<span class=\"keyword\">this</span>.transform.position, _target.transform.position, <span class=\"keyword\">ref</span> velocity, smoothing);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Code\"><a href=\"#Code\" class=\"headerlink\" title=\"Code\"></a>Code</h2><figure class=\"highlight csharp\"><figcaption><span>CamraFollow</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">using</span> System.Collections;</span><br><span class=\"line\"><span class=\"keyword\">using</span> System.Collections.Generic;</span><br><span class=\"line\"><span class=\"keyword\">using</span> UnityEngine;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title\">CameraFollow</span> : <span class=\"title\">MonoBehaviour</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//跟随目标</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Transform _target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//平滑系数</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">float</span> smoothing;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//跟随速度</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Vector3 velocity;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//写在LateUpdate中</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">LateUpdate</span> (<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (_target != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        &#123;     </span><br><span class=\"line\">            <span class=\"keyword\">this</span>.transform.position = Vector3.SmoothDamp(<span class=\"keyword\">this</span>.transform.position, _target.transform.position, <span class=\"keyword\">ref</span> velocity, smoothing);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckl3xjaol0001cswgbed8vp6s","category_id":"ckl3xjaoq0004cswgabtwb5br","_id":"ckl3xjaow000dcswgvbhuzame"},{"post_id":"ckl3xjaou000bcswg8txyj2ky","category_id":"ckl3xjaou0009cswgvm5dg5gj","_id":"ckl3xjap0000icswgw9h6fjoa"},{"post_id":"ckl3xjaop0003cswglay0ln9i","category_id":"ckl3xjaou0009cswgvm5dg5gj","_id":"ckl3xjap2000mcswgoqtvccdw"},{"post_id":"ckl3xjaov000ccswgt1kbkhc8","category_id":"ckl3xjaou0009cswgvm5dg5gj","_id":"ckl3xjap4000pcswg50tgvgg0"},{"post_id":"ckl3xjaoy000gcswg6wa1b95h","category_id":"ckl3xjaou0009cswgvm5dg5gj","_id":"ckl3xjap5000ucswg5uwnilfd"},{"post_id":"ckl3xjaor0006cswgza3l9ov8","category_id":"ckl3xjaou0009cswgvm5dg5gj","_id":"ckl3xjap7000xcswgqyxw2ibx"},{"post_id":"ckl3xjaoz000hcswgtckty4fk","category_id":"ckl3xjaou0009cswgvm5dg5gj","_id":"ckl3xjap90011cswg1r3b0hns"},{"post_id":"ckl3xjap1000lcswg76re0y8g","category_id":"ckl3xjaou0009cswgvm5dg5gj","_id":"ckl3xjapb0014cswg2am1eltl"},{"post_id":"ckl3xjaos0007cswgsgjq2m8f","category_id":"ckl3xjaou0009cswgvm5dg5gj","_id":"ckl3xjapd0018cswgthoir8el"},{"post_id":"ckl3xjaot0008cswgw1lnm2dx","category_id":"ckl3xjaou0009cswgvm5dg5gj","_id":"ckl3xjapf001ccswg5f9f61w1"},{"post_id":"ckl3xjap6000wcswgnqik6h26","category_id":"ckl3xjaoq0004cswgabtwb5br","_id":"ckl3xjapg001fcswg2t27wg1h"},{"post_id":"ckl3xjap80010cswgen9jm9ca","category_id":"ckl3xjaoq0004cswgabtwb5br","_id":"ckl3xjaph001icswger6jdw0x"},{"post_id":"ckl3xjape001bcswg4n6i994n","category_id":"ckl3xjaou0009cswgvm5dg5gj","_id":"ckl3xjapi001lcswgf6r1pqoh"},{"post_id":"ckl3xjapa0013cswgrxmkt3au","category_id":"ckl3xjape001acswg056mxdj1","_id":"ckl3xjapi001ncswgind0gtst"},{"post_id":"ckl3xjapc0017cswgng07aur4","category_id":"ckl3xjape001acswg056mxdj1","_id":"ckl3xjapj001rcswglqepadpf"},{"post_id":"ckl3xjapy002jcswgkuppeoe4","category_id":"ckl3xjapz002lcswgpp8trva2","_id":"ckl3xjaq4002ucswg93as79fc"},{"post_id":"ckl3xjaq1002pcswgjaewohoc","category_id":"ckl3xjape001acswg056mxdj1","_id":"ckl3xjaq5002ycswgz9c7efj9"},{"post_id":"ckl3xjaq0002ncswgptpb6j6v","category_id":"ckl3xjaq2002qcswgqqemetmd","_id":"ckl3xjaq70032cswgcz9lqki4"},{"post_id":"ckl3xjaq3002tcswg3d9za4gb","category_id":"ckl3xjape001acswg056mxdj1","_id":"ckl3xjaq80037cswgh90zejgg"},{"post_id":"ckl3xjaq0002ocswg5b1li4m3","category_id":"ckl3xjaq4002vcswgn8x200jg","_id":"ckl3xjaq90039cswgof4fdlgl"},{"post_id":"ckl3xjaq60030cswgegtu76ot","category_id":"ckl3xjaoq0004cswgabtwb5br","_id":"ckl3xjaqb003ecswgjeg0xl60"},{"post_id":"ckl3xjaq70035cswgn0dn57yu","category_id":"ckl3xjape001acswg056mxdj1","_id":"ckl3xjaqc003hcswgjidzmo2m"},{"post_id":"ckl3xjaq3002scswg1x5sbs6m","category_id":"ckl3xjaq70033cswgi5o55yal","_id":"ckl3xjaqd003lcswgasawlbeu"},{"post_id":"ckl3xjaq80038cswgizmbe5fq","category_id":"ckl3xjaoq0004cswgabtwb5br","_id":"ckl3xjaqe003ncswg0z955cmh"},{"post_id":"ckl3xjaq5002xcswg2dgg9lk1","category_id":"ckl3xjaq70033cswgi5o55yal","_id":"ckl3xjaqf003rcswg3arwkj6z"},{"post_id":"ckl3xjaqa003ccswgkwavtbab","category_id":"ckl3xjaqc003icswgv08liudk","_id":"ckl3xjaqh003ucswg93unxlvc"},{"post_id":"ckl3xjaqb003fcswgytfd0yqw","category_id":"ckl3xjaqf003pcswgsetvap7d","_id":"ckl3xjaqj0041cswgns0utd86"},{"post_id":"ckl3xjaqc003kcswgsnanjso8","category_id":"ckl3xjaqh003vcswgun7o786n","_id":"ckl3xjaqm0048cswgeyhbjitw"},{"post_id":"ckl3xjaqd003mcswgo3ikaaz1","category_id":"ckl3xjaqf003pcswgsetvap7d","_id":"ckl3xjaqn004dcswgr1bxyprt"},{"post_id":"ckl3xjaqe003ocswgj3pjb420","category_id":"ckl3xjaqh003vcswgun7o786n","_id":"ckl3xjaqo004hcswgd6cdxtgi"},{"post_id":"ckl3xjaqf003scswgf6no3adm","category_id":"ckl3xjaqh003vcswgun7o786n","_id":"ckl3xjaqp004lcswgw7ukr7sc"},{"post_id":"ckl3xjaqg003tcswgwqrj8j6g","category_id":"ckl3xjaqh003vcswgun7o786n","_id":"ckl3xjaqq004ocswgd00o35fu"},{"post_id":"ckl3xjaqi003xcswgt7tbub8k","category_id":"ckl3xjaqp004kcswg60ju253y","_id":"ckl3xjaqq004scswgrtigz2gs"},{"post_id":"ckl3xjaqi003zcswgkwi8o5qu","category_id":"ckl3xjaqp004kcswg60ju253y","_id":"ckl3xjaqr004ucswg2csk60dv"},{"post_id":"ckl3xjaqk0044cswgewnomfq6","category_id":"ckl3xjaqq004rcswgq7hmt3vd","_id":"ckl3xjaqs004xcswgj50j6bwf"}],"PostTag":[{"post_id":"ckl3xjaol0001cswgbed8vp6s","tag_id":"ckl3xjaoq0005cswgl3oc37f9","_id":"ckl3xjap3000ncswgfi5nh6jr"},{"post_id":"ckl3xjaol0001cswgbed8vp6s","tag_id":"ckl3xjaou000acswg615pnu3o","_id":"ckl3xjap4000rcswgc51g3kyz"},{"post_id":"ckl3xjaol0001cswgbed8vp6s","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjap6000vcswgnxdmjs6o"},{"post_id":"ckl3xjap1000lcswg76re0y8g","tag_id":"ckl3xjap1000kcswgrx7hsrdr","_id":"ckl3xjap7000ycswgwqsvu7lq"},{"post_id":"ckl3xjap1000lcswg76re0y8g","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapa0012cswg2t2u41ky"},{"post_id":"ckl3xjaop0003cswglay0ln9i","tag_id":"ckl3xjap1000kcswgrx7hsrdr","_id":"ckl3xjapb0015cswgyw3gxphl"},{"post_id":"ckl3xjaop0003cswglay0ln9i","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapd0019cswg44nbdhuk"},{"post_id":"ckl3xjap80010cswgen9jm9ca","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapf001dcswgmwrf8y0q"},{"post_id":"ckl3xjaor0006cswgza3l9ov8","tag_id":"ckl3xjap1000kcswgrx7hsrdr","_id":"ckl3xjapg001gcswgai2aslm4"},{"post_id":"ckl3xjaor0006cswgza3l9ov8","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjaph001jcswgc666h4dj"},{"post_id":"ckl3xjape001bcswg4n6i994n","tag_id":"ckl3xjap1000kcswgrx7hsrdr","_id":"ckl3xjapi001mcswgdtklqfki"},{"post_id":"ckl3xjape001bcswg4n6i994n","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapj001ocswglkjzesne"},{"post_id":"ckl3xjaos0007cswgsgjq2m8f","tag_id":"ckl3xjap1000kcswgrx7hsrdr","_id":"ckl3xjapj001qcswgu23534k1"},{"post_id":"ckl3xjaos0007cswgsgjq2m8f","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapj001scswg36ptv7vi"},{"post_id":"ckl3xjaot0008cswgw1lnm2dx","tag_id":"ckl3xjap1000kcswgrx7hsrdr","_id":"ckl3xjapk001vcswggpjxdej0"},{"post_id":"ckl3xjaot0008cswgw1lnm2dx","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapk001wcswgg3ppg7py"},{"post_id":"ckl3xjaou000bcswg8txyj2ky","tag_id":"ckl3xjap1000kcswgrx7hsrdr","_id":"ckl3xjapl001zcswgknipohvi"},{"post_id":"ckl3xjaou000bcswg8txyj2ky","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapl0020cswg3p42a8e3"},{"post_id":"ckl3xjaov000ccswgt1kbkhc8","tag_id":"ckl3xjap1000kcswgrx7hsrdr","_id":"ckl3xjapm0023cswg25tjgbkf"},{"post_id":"ckl3xjaov000ccswgt1kbkhc8","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapn0024cswgn1y30t6e"},{"post_id":"ckl3xjaoy000gcswg6wa1b95h","tag_id":"ckl3xjap1000kcswgrx7hsrdr","_id":"ckl3xjapn0026cswgq2a9le46"},{"post_id":"ckl3xjaoy000gcswg6wa1b95h","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapn0027cswgwgl2jfj6"},{"post_id":"ckl3xjaoz000hcswgtckty4fk","tag_id":"ckl3xjap1000kcswgrx7hsrdr","_id":"ckl3xjapo0029cswgjzm5ky70"},{"post_id":"ckl3xjaoz000hcswgtckty4fk","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapo002acswg68lu9g8g"},{"post_id":"ckl3xjap6000wcswgnqik6h26","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapo002ccswg29qclgg8"},{"post_id":"ckl3xjap6000wcswgnqik6h26","tag_id":"ckl3xjapn0028cswg2p00imyj","_id":"ckl3xjapo002dcswg4hbgl7v9"},{"post_id":"ckl3xjapa0013cswgrxmkt3au","tag_id":"ckl3xjapo002bcswgx69df4jo","_id":"ckl3xjapq002fcswgge7lz40t"},{"post_id":"ckl3xjapa0013cswgrxmkt3au","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapq002gcswgunthat6z"},{"post_id":"ckl3xjapc0017cswgng07aur4","tag_id":"ckl3xjapo002bcswgx69df4jo","_id":"ckl3xjapq002hcswgvk9h7a2i"},{"post_id":"ckl3xjapc0017cswgng07aur4","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjapr002icswga7t3m1i1"},{"post_id":"ckl3xjapy002jcswgkuppeoe4","tag_id":"ckl3xjapz002mcswge26oz4wi","_id":"ckl3xjaq6002zcswgdhwapu9g"},{"post_id":"ckl3xjapy002jcswgkuppeoe4","tag_id":"ckl3xjaq2002rcswgrijbheba","_id":"ckl3xjaq60031cswga1bhec3g"},{"post_id":"ckl3xjapy002jcswgkuppeoe4","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjaq80036cswg2ku9qzxm"},{"post_id":"ckl3xjaq0002ncswgptpb6j6v","tag_id":"ckl3xjaq4002wcswgvmds1pvq","_id":"ckl3xjaqa003dcswgysc5372i"},{"post_id":"ckl3xjaq0002ncswgptpb6j6v","tag_id":"ckl3xjapz002mcswge26oz4wi","_id":"ckl3xjaqc003gcswg3on8smi0"},{"post_id":"ckl3xjaq0002ocswg5b1li4m3","tag_id":"ckl3xjaq9003acswg41vosc1k","_id":"ckl3xjaqi003ycswgg252v34z"},{"post_id":"ckl3xjaq0002ocswg5b1li4m3","tag_id":"ckl3xjapo002bcswgx69df4jo","_id":"ckl3xjaqj0040cswgjao807fr"},{"post_id":"ckl3xjaq0002ocswg5b1li4m3","tag_id":"ckl3xjaqc003jcswg1dn2mh9g","_id":"ckl3xjaql0045cswg1im6zec0"},{"post_id":"ckl3xjaq0002ocswg5b1li4m3","tag_id":"ckl3xjaqf003qcswgp4glovj0","_id":"ckl3xjaql0046cswg9om1dgls"},{"post_id":"ckl3xjaq1002pcswgjaewohoc","tag_id":"ckl3xjapo002bcswgx69df4jo","_id":"ckl3xjaqn004acswg3uhj3gul"},{"post_id":"ckl3xjaq1002pcswgjaewohoc","tag_id":"ckl3xjaq9003acswg41vosc1k","_id":"ckl3xjaqn004bcswgphkn1bxm"},{"post_id":"ckl3xjaq1002pcswgjaewohoc","tag_id":"ckl3xjaqj0042cswg0emfkrow","_id":"ckl3xjaqo004fcswg0hgxs6us"},{"post_id":"ckl3xjaq3002scswg1x5sbs6m","tag_id":"ckl3xjaq9003acswg41vosc1k","_id":"ckl3xjaqp004jcswgju886nhw"},{"post_id":"ckl3xjaq3002scswg1x5sbs6m","tag_id":"ckl3xjaqn004ecswg1i9p0v3n","_id":"ckl3xjaqp004mcswg679593k7"},{"post_id":"ckl3xjaq3002tcswg3d9za4gb","tag_id":"ckl3xjapo002bcswgx69df4jo","_id":"ckl3xjaqr004wcswg7693g7a2"},{"post_id":"ckl3xjaq3002tcswg3d9za4gb","tag_id":"ckl3xjaqo004icswgwqbaaeaf","_id":"ckl3xjaqs004ycswg090qoduz"},{"post_id":"ckl3xjaq3002tcswg3d9za4gb","tag_id":"ckl3xjaqp004ncswg7f08x0ca","_id":"ckl3xjaqs0050cswg5w2rsbqs"},{"post_id":"ckl3xjaq3002tcswg3d9za4gb","tag_id":"ckl3xjaqq004qcswgweu2dcvz","_id":"ckl3xjaqs0051cswgsw49zcia"},{"post_id":"ckl3xjaq3002tcswg3d9za4gb","tag_id":"ckl3xjaqr004tcswgj4bekz1c","_id":"ckl3xjaqs0053cswg55sc9twc"},{"post_id":"ckl3xjaq5002xcswg2dgg9lk1","tag_id":"ckl3xjaq9003acswg41vosc1k","_id":"ckl3xjaqt0054cswgpdcxey37"},{"post_id":"ckl3xjaq5002xcswg2dgg9lk1","tag_id":"ckl3xjaqs004zcswg30609rcn","_id":"ckl3xjaqt0056cswgatkvzp6z"},{"post_id":"ckl3xjaq60030cswgegtu76ot","tag_id":"ckl3xjaqs0052cswg2e6ruxky","_id":"ckl3xjaqu0059cswgi8wmnp0z"},{"post_id":"ckl3xjaq60030cswgegtu76ot","tag_id":"ckl3xjaqt0055cswg3tm1iuvq","_id":"ckl3xjaqu005acswg9m47p60h"},{"post_id":"ckl3xjaq60030cswgegtu76ot","tag_id":"ckl3xjaqt0057cswg31nhty2d","_id":"ckl3xjaqv005ccswgd87qiici"},{"post_id":"ckl3xjaq70035cswgn0dn57yu","tag_id":"ckl3xjapo002bcswgx69df4jo","_id":"ckl3xjaqw005gcswgm5vf88b8"},{"post_id":"ckl3xjaq70035cswgn0dn57yu","tag_id":"ckl3xjaqo004icswgwqbaaeaf","_id":"ckl3xjaqw005hcswgauksu2uc"},{"post_id":"ckl3xjaq70035cswgn0dn57yu","tag_id":"ckl3xjaqp004ncswg7f08x0ca","_id":"ckl3xjaqw005jcswginiu3nia"},{"post_id":"ckl3xjaq70035cswgn0dn57yu","tag_id":"ckl3xjaqq004qcswgweu2dcvz","_id":"ckl3xjaqw005kcswgz6rfefrf"},{"post_id":"ckl3xjaq70035cswgn0dn57yu","tag_id":"ckl3xjaqv005ecswgzp7xnv34","_id":"ckl3xjaqw005mcswgpm3kbts3"},{"post_id":"ckl3xjaq80038cswgizmbe5fq","tag_id":"ckl3xjaqv005fcswgfxa0rhjf","_id":"ckl3xjaqy005ocswgtr5dg2oe"},{"post_id":"ckl3xjaq80038cswgizmbe5fq","tag_id":"ckl3xjaqw005icswgjv1zsa3u","_id":"ckl3xjaqy005pcswgejwngzbd"},{"post_id":"ckl3xjaq80038cswgizmbe5fq","tag_id":"ckl3xjaqw005lcswg1ax8t697","_id":"ckl3xjaqy005rcswgp41ksi2c"},{"post_id":"ckl3xjaqa003ccswgkwavtbab","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjaqy005scswgtybqdcw3"},{"post_id":"ckl3xjaqa003ccswgkwavtbab","tag_id":"ckl3xjaqx005ncswgn9giydno","_id":"ckl3xjaqz005ucswgs933u2it"},{"post_id":"ckl3xjaqb003fcswgytfd0yqw","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjaqz005vcswge6x45i9l"},{"post_id":"ckl3xjaqb003fcswgytfd0yqw","tag_id":"ckl3xjaqt0057cswg31nhty2d","_id":"ckl3xjaqz005xcswgiq5iu5oe"},{"post_id":"ckl3xjaqc003kcswgsnanjso8","tag_id":"ckl3xjaqz005tcswg8eqn0lyi","_id":"ckl3xjar0005zcswg71m68lqr"},{"post_id":"ckl3xjaqc003kcswgsnanjso8","tag_id":"ckl3xjaqz005wcswg614n7qro","_id":"ckl3xjar00060cswgrkp6r301"},{"post_id":"ckl3xjaqd003mcswgo3ikaaz1","tag_id":"ckl3xjaox000fcswgo69liqij","_id":"ckl3xjar00062cswgmyf7twyq"},{"post_id":"ckl3xjaqd003mcswgo3ikaaz1","tag_id":"ckl3xjaqt0057cswg31nhty2d","_id":"ckl3xjar10063cswgtdq8yqjg"},{"post_id":"ckl3xjaqe003ocswgj3pjb420","tag_id":"ckl3xjar00061cswgjt7x46bn","_id":"ckl3xjar10066cswgo5aisjng"},{"post_id":"ckl3xjaqe003ocswgj3pjb420","tag_id":"ckl3xjaqz005tcswg8eqn0lyi","_id":"ckl3xjar10067cswgwf9l8fcp"},{"post_id":"ckl3xjaqf003scswgf6no3adm","tag_id":"ckl3xjar10065cswgi85zqtka","_id":"ckl3xjar2006acswgd8a0cd12"},{"post_id":"ckl3xjaqf003scswgf6no3adm","tag_id":"ckl3xjaqz005tcswg8eqn0lyi","_id":"ckl3xjar2006bcswgwk74aoeo"},{"post_id":"ckl3xjaqg003tcswgwqrj8j6g","tag_id":"ckl3xjaqz005tcswg8eqn0lyi","_id":"ckl3xjar3006ecswgz2l6zjp2"},{"post_id":"ckl3xjaqg003tcswgwqrj8j6g","tag_id":"ckl3xjar3006ccswgrsfshrhj","_id":"ckl3xjar3006fcswglfg2bnu2"},{"post_id":"ckl3xjaqi003xcswgt7tbub8k","tag_id":"ckl3xjar3006dcswgg25x5fpx","_id":"ckl3xjar4006jcswgoi5r8pya"},{"post_id":"ckl3xjaqi003xcswgt7tbub8k","tag_id":"ckl3xjar3006gcswgb8af7kzp","_id":"ckl3xjar4006kcswg5v2u8q9t"},{"post_id":"ckl3xjaqi003xcswgt7tbub8k","tag_id":"ckl3xjar4006hcswg5f5gl4o6","_id":"ckl3xjar5006mcswgnf0tmaev"},{"post_id":"ckl3xjaqi003zcswgkwi8o5qu","tag_id":"ckl3xjar4006icswg4nshmwbe","_id":"ckl3xjar5006pcswg75598oq5"},{"post_id":"ckl3xjaqi003zcswgkwi8o5qu","tag_id":"ckl3xjar4006lcswgk4tvix5o","_id":"ckl3xjar5006qcswgekm95saj"},{"post_id":"ckl3xjaqi003zcswgkwi8o5qu","tag_id":"ckl3xjar5006ncswgr5biyort","_id":"ckl3xjar6006scswgp2qe4pyb"},{"post_id":"ckl3xjaqk0044cswgewnomfq6","tag_id":"ckl3xjar5006ocswg9wedj9gq","_id":"ckl3xjar6006ucswgoxxz11pg"},{"post_id":"ckl3xjaqk0044cswgewnomfq6","tag_id":"ckl3xjar6006rcswgtqttdse9","_id":"ckl3xjar6006vcswgue9bttwp"},{"post_id":"ckl3xjaqk0044cswgewnomfq6","tag_id":"ckl3xjar6006tcswgy44zsseo","_id":"ckl3xjar6006wcswg420itzeq"}],"Tag":[{"name":"Interview","_id":"ckl3xjaoq0005cswgl3oc37f9"},{"name":"Examination Question","_id":"ckl3xjaou000acswg615pnu3o"},{"name":"Note","_id":"ckl3xjaox000fcswgo69liqij"},{"name":"Python","_id":"ckl3xjap1000kcswgrx7hsrdr"},{"name":"Binary","_id":"ckl3xjapn0028cswg2p00imyj"},{"name":"Linux","_id":"ckl3xjapo002bcswgx69df4jo"},{"name":"Algorithm","_id":"ckl3xjapz002mcswge26oz4wi"},{"name":"Sort","_id":"ckl3xjaq2002rcswgrijbheba"},{"name":"Tree","_id":"ckl3xjaq4002wcswgvmds1pvq"},{"name":"VPS","_id":"ckl3xjaq9003acswg41vosc1k"},{"name":"Shadowsocks","_id":"ckl3xjaqc003jcswg1dn2mh9g"},{"name":"Proxy","_id":"ckl3xjaqf003qcswgp4glovj0"},{"name":"宝塔面板","_id":"ckl3xjaqj0042cswg0emfkrow"},{"name":"Introduction","_id":"ckl3xjaqn004ecswg1i9p0v3n"},{"name":"Software","_id":"ckl3xjaqo004icswgwqbaaeaf"},{"name":"Web","_id":"ckl3xjaqp004ncswg7f08x0ca"},{"name":"Blog","_id":"ckl3xjaqq004qcswgweu2dcvz"},{"name":"Nextcloud","_id":"ckl3xjaqr004tcswgj4bekz1c"},{"name":"Security","_id":"ckl3xjaqs004zcswg30609rcn"},{"name":"Demo","_id":"ckl3xjaqs0052cswg2e6ruxky"},{"name":"Hexo","_id":"ckl3xjaqt0055cswg3tm1iuvq"},{"name":"Markdown","_id":"ckl3xjaqt0057cswg31nhty2d"},{"name":"Wordpress","_id":"ckl3xjaqv005ecswgzp7xnv34"},{"name":"Picture","_id":"ckl3xjaqv005fcswgfxa0rhjf"},{"name":"API","_id":"ckl3xjaqw005icswgjv1zsa3u"},{"name":"Website","_id":"ckl3xjaqw005lcswg1ax8t697"},{"name":"Network","_id":"ckl3xjaqx005ncswgn9giydno"},{"name":"Probability Theory","_id":"ckl3xjaqz005tcswg8eqn0lyi"},{"name":"关系运算","_id":"ckl3xjaqz005wcswg614n7qro"},{"name":"Poisson process","_id":"ckl3xjar00061cswgjt7x46bn"},{"name":"贝叶斯公式","_id":"ckl3xjar10065cswgi85zqtka"},{"name":"数学期望","_id":"ckl3xjar3006ccswgrsfshrhj"},{"name":"Math","_id":"ckl3xjar3006dcswgg25x5fpx"},{"name":"Unity","_id":"ckl3xjar3006gcswgb8af7kzp"},{"name":"GameLogic","_id":"ckl3xjar4006hcswg5f5gl4o6"},{"name":"Pipeline","_id":"ckl3xjar4006icswg4nshmwbe"},{"name":"Shader","_id":"ckl3xjar4006lcswgk4tvix5o"},{"name":"Graphic","_id":"ckl3xjar5006ncswgr5biyort"},{"name":"C#","_id":"ckl3xjar5006ocswg9wedj9gq"},{"name":"Code","_id":"ckl3xjar6006rcswgtqttdse9"},{"name":"Sample","_id":"ckl3xjar6006tcswgy44zsseo"}]}}