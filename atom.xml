<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Beans Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bean.ink/"/>
  <updated>2019-08-06T06:36:29.655Z</updated>
  <id>http://bean.ink/</id>
  
  <author>
    <name>Bean</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python-列表</title>
    <link href="http://bean.ink/2019/08/06/Python-List/"/>
    <id>http://bean.ink/2019/08/06/Python-List/</id>
    <published>2019-08-06T03:15:11.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="讲啥？"><a href="#讲啥？" class="headerlink" title="讲啥？"></a>讲啥？</h2><p>之前在，<code>for</code>里头，已经对<code>列表</code>进行了初步的讲解，但是<code>列表</code>还有一些其他的特性需要解释一下。</p><p>顺带简单介绍一下<code>元组（tuple）</code>、<code>集合（set）</code>和<code>字典（dict）</code>，后两者的其他特性后面再讲。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;讲啥？&quot;&gt;&lt;a href=&quot;#讲啥？&quot; class=&quot;headerlink&quot; title=&quot;讲啥？&quot;&gt;&lt;/a&gt;讲啥？&lt;/h2&gt;&lt;p&gt;之前在，&lt;code&gt;for&lt;/code&gt;里头，已经对&lt;code&gt;列表&lt;/code&gt;进行了初步的讲解，但是&lt;code&gt;列表&lt;/code
      
    
    </summary>
    
      <category term="Python" scheme="http://bean.ink/categories/Python/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Python" scheme="http://bean.ink/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-循环和if更进一步</title>
    <link href="http://bean.ink/2019/08/06/Python-Loop/"/>
    <id>http://bean.ink/2019/08/06/Python-Loop/</id>
    <published>2019-08-06T01:47:52.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="讲的What？"><a href="#讲的What？" class="headerlink" title="讲的What？"></a>讲的What？</h2><p>本章主题是，<code>while</code>和<code>for</code>循环，还有<code>if</code>的嵌套。</p><h2 id="为什么讲嵌套？"><a href="#为什么讲嵌套？" class="headerlink" title="为什么讲嵌套？"></a>为什么讲嵌套？</h2><p>先从<code>if</code>的嵌套开始。</p><p>前面学过了，<code>if</code>的形式就是那几种，最简单的就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> bool_expression:</span><br><span class="line">    statements()</span><br></pre></td></tr></table></figure><p>那么，举个例子！</p><p>让我们把例子的复杂度稍稍提高一下，并且贴近一下生活。</p><p>现在，你要去美团买演唱会的票，但是你们是四人行，四个好兄弟，只能一起行动，缺谁都8行。</p><p>并且，打印你的买票心理活动。</p><p>那么，能够买到票的前提是：</p><ol><li>起码有4张票可以买</li><li>口袋里的钱够用</li></ol><p>思考一下，是你的话需要怎么编写这个程序？</p><p>如果没想好第一步，那么就从变量声明开始吧！</p><p>如果还是不知道怎么开始。</p><p>那么下面给你开始的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">available_ticket = <span class="number">3</span></span><br><span class="line">ticket_price = <span class="number">100</span></span><br><span class="line">pocket_money = <span class="number">500</span></span><br><span class="line">...你的<span class="keyword">if</span>语句...</span><br><span class="line">...若干个print()...</span><br></pre></td></tr></table></figure><p>可以自己思考一下，写得出来可以发出来瞧瞧。</p><p><br><br><br><br><br><br><br><br><br><br></p><p>当然，以下是参考答案。</p><p><br><br><br><br><br><br><br><br><br><br></p><h3 id="参考答案"><a href="#参考答案" class="headerlink" title="参考答案"></a>参考答案</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">available_ticket = <span class="number">3</span>    <span class="comment">#可用的票数</span></span><br><span class="line">ticket_price = <span class="number">100</span>      <span class="comment">#票价</span></span><br><span class="line">pocket_money = <span class="number">500</span>      <span class="comment">#口袋里的小钱钱</span></span><br><span class="line"><span class="keyword">if</span> available_ticket &gt;= <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'票够'</span>)</span><br><span class="line">    <span class="keyword">if</span> ticket_price * <span class="number">4</span> &lt;= pocket_money:</span><br><span class="line">        print(<span class="string">'可以了，冲锋！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'啊哦，钱不够了'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'没票了'</span>)</span><br></pre></td></tr></table></figure><p>你可以修改上面的三个变量来打印不同的结果。</p><h3 id="if的嵌套"><a href="#if的嵌套" class="headerlink" title="if的嵌套"></a>if的嵌套</h3><p>上面的参考答案里头，你可以看到，第一个<code>if</code>，也就是判断票是否够的那一片代码块里，又嵌套了另一个<code>if</code>，用于判断口袋里的钱是否够买4张票。</p><p>为什么要<code>嵌套</code>呢？</p><p>因为按照正常思路，如果票不够，那我也就不用考虑口袋里的钱是否够用的问题。</p><p>所以整个的思路是这样的：</p><ol><li>票够不够？</li><li>票够，那口袋里的钱够不够呢？<ol><li>如果够，就打印<code>可以了，冲锋！</code></li><li>如果不够，就打印<code>啊哦，钱不够了</code></li></ol></li><li>不够就打印<code>没票了</code>，并且结束程序.</li></ol><p>这是一个渐进式的思路，在第一个判断成立的条件下，再进行判断第二个条件是否成立，因为第二个条件跟第一个条件不成立时无关（不考虑）。</p><p>这就是<code>嵌套</code>。</p><p>可以把例子里的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'票够'</span>)</span><br><span class="line"><span class="keyword">if</span> ticket_price * <span class="number">4</span> &lt;= pocket_money:</span><br><span class="line">    print(<span class="string">'可以了，冲锋！'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'啊哦，钱不够了'</span>)</span><br></pre></td></tr></table></figure><p>看做是一个独立的<code>代码块</code>，他们拥有相同的<code>缩进量</code>。</p><blockquote><p>上面的两个可能因为渲染问题，显示出来是顶格的，我想展示出的是带有一个tab缩进的代码块。就像下面的例子里去掉第一行。</p></blockquote><p>下面的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'没票了'</span>)</span><br></pre></td></tr></table></figure><p>也是一样的道理。</p><p>其实，可以看做是在另一个代码块里再写一个普通的<code>if</code>。</p><p>然后，从上面的一个<code>if</code>来说，就是一个嵌套的<code>if</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> available_ticket &gt;= <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'票够'</span>)</span><br><span class="line">    <span class="keyword">if</span> ticket_price * <span class="number">4</span> &lt;= pocket_money:</span><br><span class="line">        print(<span class="string">'可以了，冲锋！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'啊哦，钱不够了'</span>)</span><br></pre></td></tr></table></figure><p>当然，不是只能在<code>if</code>里写嵌套，<code>else</code>也可以。</p><p>对参考答案进行等效的转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> available_ticket &lt; <span class="number">4</span>:</span><br><span class="line">    print(<span class="string">'没票了'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'票够'</span>)</span><br><span class="line">    <span class="keyword">if</span> ticket_price * <span class="number">4</span> &lt;= pocket_money:</span><br><span class="line">        print(<span class="string">'可以了，冲锋！'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'啊哦，钱不够了'</span>)</span><br></pre></td></tr></table></figure><p>其实也就是把条件反过来，然后对调一下<code>嵌套</code>的位置而已。</p><p>其实大多数教程不怎么讲<code>if</code>的<code>嵌套</code>，因为是个很正常的思路过程，这里之所以提，是因为<code>if</code>的<code>嵌套</code>和<code>循环</code>的<code>嵌套</code>类似。</p><h3 id="循环的嵌套"><a href="#循环的嵌套" class="headerlink" title="循环的嵌套"></a>循环的嵌套</h3><p>循环分两种：<code>for</code>和<code>while</code>，单纯的循环多少次或者在某个条件成立下循环是很直接的。</p><p>例如，循环打印5个“hello”，每个“hello”中间以空格间隔。</p><p>先自己思考一下。</p><blockquote><p>提示：<code>print()</code>函数默认是每调用一次，自动换行一次。</p><p>用<code>print(&#39;hello&#39;, end=&quot; &quot;)</code>可以实现打印一次不换号，以<code>&quot; &quot;</code>空格结尾。</p></blockquote><p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><h4 id="参考答案-1"><a href="#参考答案-1" class="headerlink" title="参考答案"></a>参考答案</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(<span class="string">'hello'</span>, end=<span class="string">" "</span>)</span><br></pre></td></tr></table></figure><p>打印出来的结果会是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello hello hello hello hello</span><br></pre></td></tr></table></figure><p>那么，如果我想打印成一个方阵呢？</p><p>也就是这样的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hello hello hello hello hello</span><br><span class="line">hello hello hello hello hello</span><br><span class="line">hello hello hello hello hello</span><br><span class="line">hello hello hello hello hello</span><br><span class="line">hello hello hello hello hello</span><br></pre></td></tr></table></figure><p>是不是想到了上面讲的<code>if</code>的<code>嵌套</code>？</p><p>那么应该怎么嵌套呢？</p><p>可以自己思考思考。</p><p>下面又有答案。</p><blockquote><p>提示：可以用单纯的<code>print()</code>换行</p></blockquote><p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br></p><h4 id="参考答案-2"><a href="#参考答案-2" class="headerlink" title="参考答案"></a>参考答案</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">'hello'</span>, end=<span class="string">" "</span>)</span><br><span class="line">    print()</span><br></pre></td></tr></table></figure><p>上面就是<code>for</code>的<code>嵌套</code>，<code>while</code>的<code>嵌套</code>也是同理。</p><p>其实就是在循环体里，再写循环。</p><p>可以这样理解，上一节讲的<code>for</code>，把一次循环执行称为<code>迭代</code>，把它看做普通的若干行代码，只是在若干行代码里，碰上了又一个循环。</p><p>或者按照箭头的说法。</p><ol><li>第一个<code>for</code>箭头指向了第一个<code>range(5)</code>的第一个数字<code>0</code>。</li><li>碰到第二个<code>for</code>，就出来另一个箭头，指向第二个<code>range(5)</code>的第一个数字<code>0</code>，这才执行到内层<code>for</code>的循环体，打印一下<code>hello</code>。</li><li>第二个<code>for</code>的第二次迭代，执行了第二个<code>range(5)</code>的第二个数字<code>1</code>，打印一下<code>hello</code>，直到第二个<code>for</code>的5次执行完成。</li><li>然后碰到<code>print()</code>，换行。</li><li>第一个<code>for</code>的箭头再前进，执行下一次<code>迭代</code>，第一个<code>for</code>的<code>range(5)</code>来到了<code>1</code>，再回到<code>步骤2</code>。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;讲的What？&quot;&gt;&lt;a href=&quot;#讲的What？&quot; class=&quot;headerlink&quot; title=&quot;讲的What？&quot;&gt;&lt;/a&gt;讲的What？&lt;/h2&gt;&lt;p&gt;本章主题是，&lt;code&gt;while&lt;/code&gt;和&lt;code&gt;for&lt;/code&gt;循环，还有&lt;cod
      
    
    </summary>
    
      <category term="Python" scheme="http://bean.ink/categories/Python/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Python" scheme="http://bean.ink/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python-for循环</title>
    <link href="http://bean.ink/2019/07/18/Python-for/"/>
    <id>http://bean.ink/2019/07/18/Python-for/</id>
    <published>2019-07-18T17:40:32.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-for-？"><a href="#什么是-for-？" class="headerlink" title="什么是 for ？"></a>什么是 for ？</h2><p><code>for</code>和<code>while</code>一样，都是流程控制中控制循环的语句。</p><h2 id="为什么有了-while-还要-for-？"><a href="#为什么有了-while-还要-for-？" class="headerlink" title="为什么有了 while 还要 for ？"></a>为什么有了 while 还要 for ？</h2><p>现在有一个<code>while</code>循环，他的目的是执行一百次的<code>print(&#39;Rush B!&#39;)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> a &lt;= <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">'Rush B!'</span>)</span><br><span class="line">    a = a + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>但是有没有觉得，每次都要先声明一个变量<code>a</code>，还要在循环体里让他加<code>1</code>，是不是有些繁琐呢？</p><p><code>for</code>循环就可以省略这样的步骤</p><p>同样的功能，用<code>for</code>的实现是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    print(<span class="string">'Rush B!'</span>)</span><br></pre></td></tr></table></figure><p>省去了变量<code>a</code>的提前声明，但是<code>a</code>在循环体里仍然是可以被访问的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">    print(<span class="string">'Rush B!'</span>)</span><br><span class="line">    print(<span class="string">'%s times!'</span> % a)</span><br></pre></td></tr></table></figure><p>其中<code>range(100)</code>是一个函数，可以生成从<code>0 - 99</code>的数字序列，也就是100个数。</p><p>为什么是用<code>range(100)</code>来生成序列，下面讲解。</p><h2 id="for-是怎么工作的？"><a href="#for-是怎么工作的？" class="headerlink" title="for 是怎么工作的？"></a>for 是怎么工作的？</h2><p>在讲<code>for</code>之前，需要知道<code>数组</code>或者<code>列表</code>的概念。</p><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>列表其实就是一些变量的有序组合，注意，是<code>有序</code>组合。至于为什么强调有序，看到<code>set</code>等其他数据类型时就能明白。</p><p>假设现在，你需要存储50个同学的数学成绩，在没有<code>列表</code>以前，你需要这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">math1 = <span class="number">0</span></span><br><span class="line">math2 = <span class="number">0</span></span><br><span class="line">math3 = <span class="number">0</span> </span><br><span class="line">math4 = <span class="number">0</span></span><br><span class="line">math5 = <span class="number">0</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">math50 = <span class="number">0</span></span><br></pre></td></tr></table></figure><p>声明50个变量，并且一一赋值。这是很笨的方法，并且效率很低。</p><p>那么，思考一下，是否为上面这些变量每一个单独命名是没有意义的呢？</p><p><code>列表</code>就派上用场了。只要简单声明，就能使用一个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">math = []</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">math = list()</span><br></pre></td></tr></table></figure><p>不同的是，这个列表一开始并没有限定大小，它可以存储若干个数据。</p><p>需要往列表里面添加数据，用函数<code>math.append()</code>。</p><p>例如我想向列表里面添加1个数字<code>0</code>，那么就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">math.append(<span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>并且，列表是可以被直接<code>print()</code>函数打印的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">math = []</span><br><span class="line">math.append(<span class="number">0</span>)</span><br><span class="line">math.append(<span class="number">1</span>)</span><br><span class="line">print(math)</span><br></pre></td></tr></table></figure><p>可以得到结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>中括号表示这是一个<code>列表</code>变量，每个元素以<code>,</code>分隔开。</p><p><code>列表</code>也是一个变量，变量名就代表了一整个<code>列表</code>，如果要访问，或者叫做获取列表里某一个元素的话怎么办呢？</p><p>就需要用到下标，就像数学里头数列的累加公式里，<code>ai</code>是有下标的。</p><p>下标表示，元素在<code>列表</code>中的位置，下标从<code>0</code>开始，访特定位置的<code>列表</code>元素，用<code>列表变量名[下标]</code>的方式访问。</p><p>也就是说，如果现在有一个列表，存储了一组数学成绩：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">math = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">90</span>, <span class="number">40</span>, <span class="number">30</span>]</span><br></pre></td></tr></table></figure><p>可以看出来，这个<code>列表</code>一共包含<code>5</code>个数字，下标从<code>0</code>开始。</p><p>而<code>0-&gt;4</code>一共5个数字，也就是<code>4</code>是<code>列表</code>下标的最大值，<code>0</code>是最小值</p><p>每一个元素的访问方式如下：</p><ul><li>10 —-&gt; math[0]</li><li>20 —-&gt; math[1]</li><li>90 —-&gt; math[2]</li><li>40 —-&gt; math[3]</li><li>30 —-&gt; math[4]</li></ul><p>但是，访问<code>列表</code>的数据，不能超过列表当前的大小。</p><p>比如，现在的<code>math</code>只有<code>5</code>个元素，下标最大的值是<code>4</code>，那么你如果想打印或者使用<code>math[5]</code>，那么会告诉你报错了，错误是：<code>list assignment index out of range</code>，也就是<code>列表</code>下标越界了。</p><blockquote><p>可以通过<code>math.append(0)</code>来向<code>列表</code>添加元素，这里的参数<code>0</code>是任意的，意思是向<code>列表</code>添加元素<code>0</code></p></blockquote><p>那么，像<code>列表</code>这一小标题开头举的例子里讲的，现在知道了能用<code>列表</code>来存储若干个数字，但是要给他们每一个都赋初始值，比如<code>10</code>，是不是还是有点麻烦？</p><p>脑海里是不是想：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">math[<span class="number">0</span>] = <span class="number">10</span></span><br><span class="line">math[<span class="number">1</span>] = <span class="number">10</span></span><br><span class="line">math[<span class="number">2</span>] = <span class="number">10</span></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">math[<span class="number">49</span>] = <span class="number">10</span></span><br></pre></td></tr></table></figure><blockquote><p>注意，0 -&gt; 49 一共50个数。</p></blockquote><p>那么，<code>for</code>就派上用场了</p><h3 id="for-在列表例子里的应用"><a href="#for-在列表例子里的应用" class="headerlink" title="for 在列表例子里的应用"></a>for 在列表例子里的应用</h3><p>讲完上面的<code>列表</code>，为什么要强调有序呢？因为有序，你就可以按顺序的，访问，或者叫做获取每一个数字。</p><p>你可以想象有个箭头，从<code>列表</code>的第一个元素，每次往前跳一步，一直走到最后一个元素，这个过程叫做<code>遍历（traverse）</code>。</p><p>而<code>for</code>其实就是在对<code>列表</code>进行这么一个<code>遍历</code>的过程</p><p>通过上一节的<code>函数</code>和这一节的<code>列表</code>，那么<code>range(10)</code>这个<code>函数</code>其实生成了一个<code>列表</code>。</p><p><code>列表</code>里面存储了一排从<code>0</code>开始，到<code>range(x)</code>的<code>x-1</code>为止的等差数列，差是<code>1</code>。</p><blockquote><p>其实，<code>range(x)</code>并不是真的生成了一个<code>列表</code>，他生成的是一个<code>可迭代对象</code>，就像箭头一样，这一次需要用到它，他就告诉你是不是走到了<code>列表</code>的尾巴，如果不是，就返回这个“箭头”指向的数据，如果到尾了，那么就结束<code>迭代</code>。</p><p>但是为了降低理解难度，目前先当做是生成了一个<code>列表</code>就好了，下面也是这么讲的。</p></blockquote><p>也就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(list(range(<span class="number">10</span>)))</span><br></pre></td></tr></table></figure><p>结果是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><blockquote><p><code>range(10)</code>省略了第一个参数，函数提供了一个默认的参数值，</p><p>所以其实<code>range(10)</code>是<code>range(0,10)</code>，也就是<code>0-10</code>范围的整数</p><p>这一点如果你直接<code>print(range(10))</code>可以得到结果<code>range(0, 10)</code>，也就是为什么上面的打印结果我加了一个<code>list()</code>，让他转换为<code>列表</code>。</p></blockquote><p>那么你就能明白，重复执行50次，不需要重新声明一个变量，再去<code>while</code>的条件里面做判断。</p><p>例如，对上面的例子的补充，想对50个数学成绩<code>依次</code>赋值为<code>10</code>，用<code>for</code>可以是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">math = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    math.append(i)</span><br><span class="line">    math[i] = <span class="number">10</span></span><br></pre></td></tr></table></figure><p>因为<code>列表</code>不能够访问超过下标的元素，所以需要每次赋值（也就是访问、使用）前，向<code>列表</code>添加一个元素，也就是<code>math.append(i)</code>的作用</p><p>而<code>i</code>，其实也就是<code>遍历</code>过程中的箭头。</p><p>一开始指向<code>range(50)</code>生成<code>列表</code>的第一个元素<code>0</code>，所以<code>i</code>的值就是<code>0</code>。</p><p>下一次的循环里，<code>i</code>就是<code>1</code>，依次类推，直到最后一次循环，<code>i</code>的值是<code>49</code>。</p><p>当然，上面这么写只是为了告诉你，需要先添加、拓展<code>列表</code>，才能访问<code>列表</code>的元素。</p><p>简单的写法其实就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">math = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">50</span>):</span><br><span class="line">    math.append(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h2 id="和while的区别"><a href="#和while的区别" class="headerlink" title="和while的区别"></a>和while的区别</h2><p>在python里，<code>while</code>和<code>for</code>的区别在于，<code>while</code>用来广泛的判断<code>条件</code>是否成立，再进行循环。</p><p>而<code>for</code>的作用在于，用来对一个<code>列表</code>进行<code>迭代</code>或者叫<code>遍历</code>。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><code>for</code>的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">   statements(s)</span><br></pre></td></tr></table></figure><p>每一次的循环，称作一次<code>迭代</code>，所以<code>iterating_var</code>代表的是，在这次<code>迭代</code>中，当前<code>列表</code>也就是<code>sequence</code>被指向的值。</p><p>可以想象，其实也就是对一个<code>列表</code>，用一个箭头，依次的指向<code>列表</code>里的值，然后执行循环体，再移动到下一个<code>列表</code>的元素。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是-for-？&quot;&gt;&lt;a href=&quot;#什么是-for-？&quot; class=&quot;headerlink&quot; title=&quot;什么是 for ？&quot;&gt;&lt;/a&gt;什么是 for ？&lt;/h2&gt;&lt;p&gt;&lt;code&gt;for&lt;/code&gt;和&lt;code&gt;while&lt;/code&gt;一样，都是流程
      
    
    </summary>
    
      <category term="Python" scheme="http://bean.ink/categories/Python/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Python" scheme="http://bean.ink/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pyhton-Funtion</title>
    <link href="http://bean.ink/2019/07/18/Pyhton-Funtion/"/>
    <id>http://bean.ink/2019/07/18/Pyhton-Funtion/</id>
    <published>2019-07-18T16:40:32.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么讲函数"><a href="#为什么讲函数" class="headerlink" title="为什么讲函数"></a>为什么讲函数</h2><p>函数其实想放到后面讲的，但是因为<code>for</code>循环会讲到<code>range()</code>这个函数，所以先基础的讲一下函数是什么。</p><h2 id="什么是函数？"><a href="#什么是函数？" class="headerlink" title="什么是函数？"></a>什么是函数？</h2><p>函数其实就是一段可以被重复使用的代码，用参数来代替其中的可变部分。</p><p>例如，在一个软件里面，我需要打印5行不同的信息：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">What</span><br><span class="line">I dont </span><br><span class="line">know</span><br><span class="line">really?</span><br></pre></td></tr></table></figure><p>python实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello'</span>)</span><br><span class="line">print(<span class="string">'What'</span>)</span><br><span class="line">print(<span class="string">'I dont'</span>)</span><br><span class="line">print(<span class="string">'know'</span>)</span><br><span class="line">print(<span class="string">'really?'</span>)</span><br></pre></td></tr></table></figure><p>如果要重复打印这五行字，那么由之前的循环可以知道，当然是为这五行打印加上循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a&lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">'Hello'</span>)</span><br><span class="line">    print(<span class="string">'What'</span>)</span><br><span class="line">    print(<span class="string">'I dont'</span>)</span><br><span class="line">    print(<span class="string">'know'</span>)</span><br><span class="line">    print(<span class="string">'really?'</span>)</span><br><span class="line">    a = a + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>那么，如果我想打印n次这5行字后，打印其他的若干行，再回来打印这五行字，可能会变成这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a&lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">'Hello'</span>)</span><br><span class="line">    print(<span class="string">'What'</span>)</span><br><span class="line">    print(<span class="string">'I dont'</span>)</span><br><span class="line">    print(<span class="string">'know'</span>)</span><br><span class="line">    print(<span class="string">'really?'</span>)</span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> b&lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">'something else'</span>)</span><br><span class="line">    print(<span class="string">'yep'</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> c&lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">'Hello'</span>)</span><br><span class="line">    print(<span class="string">'What'</span>)</span><br><span class="line">    print(<span class="string">'I dont'</span>)</span><br><span class="line">    print(<span class="string">'know'</span>)</span><br><span class="line">    print(<span class="string">'really?'</span>)</span><br><span class="line">    c = c + <span class="number">1</span></span><br></pre></td></tr></table></figure><p>有没有发现，其实三个循环的第一和第三个循环除了用于判断的变量名字不一样之外，是不是完全一样呢？</p><p>那么可以把这两个完全一样，或者称之为重复的代码片段，提取出来，提取出来后就被称之为函数了。</p><p>用函数的思路把上面的例子改进一下，会变成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_my_words</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> a&lt;<span class="number">10</span>:</span><br><span class="line">        print(<span class="string">'Hello'</span>)</span><br><span class="line">        print(<span class="string">'What'</span>)</span><br><span class="line">        print(<span class="string">'I dont'</span>)</span><br><span class="line">        print(<span class="string">'know'</span>)</span><br><span class="line">        print(<span class="string">'really?'</span>)</span><br><span class="line">        a = a + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">print_my_words()</span><br><span class="line"></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> b&lt;<span class="number">10</span>:</span><br><span class="line">    print(<span class="string">'something else'</span>)</span><br><span class="line">    print(<span class="string">'yep'</span>)</span><br><span class="line"></span><br><span class="line">print_my_words()</span><br></pre></td></tr></table></figure><p>会发现变得简洁了很多。</p><blockquote><p>其实<code>print</code>就是一个函数，在前面<code>print(&#39;hello world&#39;)</code>的时候，就已经接触到什么是函数了。</p><p>对于这个函数来说，<code>print</code>是他的函数名，小括号里的<code>&#39;hello world&#39;</code>是他的函数参数，至于什么是参数，下面讲解</p></blockquote><p>在python里，函数的使用方法是：<code>函数名(参数)</code>，和变量名的区别就是有无小括号和括号里的参数。</p><p>例如，<code>a()</code>是调用函数<code>a</code></p><p>而，<code>a</code>是声明一个变量<code>a</code></p><h2 id="编写函数的思路"><a href="#编写函数的思路" class="headerlink" title="编写函数的思路"></a>编写函数的思路</h2><p>编写函数最简单的思路就是，提取重复。</p><p>或者就像数学里头称的函数一样的思路，给定变量，返回结果。</p><p>小学都学过加法：<code>1+1=2</code>，而其实在数学里，这个算式可以被抽象为<code>f(1,1)=2</code>。</p><p><code>f(1,1)</code>其实与python里的函数没有本质的区别。</p><p>可以看做是函数名为<code>f</code>的函数，他的<code>参数列表</code>有两个<code>参数</code>，分别是<code>1</code>和<code>1</code>。</p><p>而函数的内容，也就是函数体，就是在做两个参数相加的过程，也就可以得到一个相加函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure><h2 id="函数形式和关键词的作用"><a href="#函数形式和关键词的作用" class="headerlink" title="函数形式和关键词的作用"></a>函数形式和关键词的作用</h2><p>python中一个函数的形式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">( parameters )</span>:</span></span><br><span class="line">    <span class="string">"function_docstring"</span></span><br><span class="line">    function_body</span><br><span class="line">    <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure><p><code>def</code>关键字是define的缩写，即 “定义”。</p><p><code>functionname</code>就是函数的名字，一般是要求符合命名规则，命名规则在变量和数据类型有提及，刚入门不要求记忆，随便命名既可，但要<code>具意命名</code>，例如打印函数就叫<code>print</code></p><blockquote><p>具意命名就是名字和具体代表的东西要一致，用来表示名字的变量就叫<code>name</code>，用做加法的函数就叫<code>add()</code></p></blockquote><p>其中<code>&quot;function_docstring&quot;</code>是对函数的说明，运行的时候会跳过。</p><p><code>function_body</code>就是函数体，也是一块可以被重复使用的代码块。</p><p><code>return</code> 表示将某个值返回的意思，例如写一个加法函数，要把最后结果保存下来，就会把结果值返回。</p><p>下面是一个加法函数的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_two_number</span><span class="params">(first, second)</span>:</span></span><br><span class="line">    result = first + second</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><p>上面例子里，有两个参数，<code>first</code>和<code>second</code>，参数其实就是外来的变量，也是在函数中可变的部分。</p><p>这个函数的目的是做加法，加法的结果由两个数影响，这两个数是可变的，但是加法的过程是确定的。</p><p>所以，这两个数就是函数的参数了。</p><p><code>return result</code>这一句的意思是把<code>result</code>变量返回，函数体运行结束后，需要把结果返回给调用者，也就是<code>return</code>的作用。</p><blockquote><p>注意，如果不需要返回值，那么可以不用<code>return</code>语句</p><p>假如你只有一个很简单的函数，用来打印一些信息，就不需要有返回值</p></blockquote><p>函数被定义，就是需要被使用的，使用的过程被叫做<code>函数的调用</code></p><p>那么，怎么调用一个函数呢？</p><p>在“Hello World”的例子里：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Hello World'</span>)</span><br></pre></td></tr></table></figure><p>其实就是调用了一个函数<code>print</code>，<code>&#39;Hello World&#39;</code>是他的参数。</p><p>上面例子里的加法函数的调用例子如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_two_number</span><span class="params">(first, second)</span>:</span></span><br><span class="line">    result = first + second</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">a_number = add_two_number(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(a_number)</span><br></pre></td></tr></table></figure><p><code>add_two_number(1,2)</code>就是调用了这个函数，参数分别是<code>1</code>和<code>2</code>，按顺序对应。</p><p>可以分解的看成，<code>a_number = add_two_number(1,2)</code>这个语句的执行步骤被分成了四部分：</p><ol><li>a_number = add_two_number(1,2)</li><li>执行跳到add_two_number的代码块来，执行对参数的赋值，也就是<code>first = 1</code>和<code>second = 2</code></li><li>执行函数体</li><li>返回结果</li></ol><p>函数的<code>返回值</code>，可以看做执行后，把赋值语句替换掉，也就是<code>a_number = add_two_number(1,1)</code>替换成<code>a_number = 3</code></p><p>然后<code>print(a_number)</code>的结果就是打印了<code>3</code></p><h1 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h1><p>函数其实就是一段可以被重复使用的代码，其中的可变部分，或者说依赖于这段代码以外的变量，就是<code>参数</code>了。</p><p>函数的定义方式就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">functionname</span><span class="params">( parameters )</span>:</span></span><br><span class="line">    <span class="string">"function_docstring"</span></span><br><span class="line">    function_body</span><br><span class="line">    <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么讲函数&quot;&gt;&lt;a href=&quot;#为什么讲函数&quot; class=&quot;headerlink&quot; title=&quot;为什么讲函数&quot;&gt;&lt;/a&gt;为什么讲函数&lt;/h2&gt;&lt;p&gt;函数其实想放到后面讲的，但是因为&lt;code&gt;for&lt;/code&gt;循环会讲到&lt;code&gt;range()&lt;/co
      
    
    </summary>
    
      <category term="Python" scheme="http://bean.ink/categories/Python/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Python" scheme="http://bean.ink/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python--while的循环控制</title>
    <link href="http://bean.ink/2019/07/17/Python-while/"/>
    <id>http://bean.ink/2019/07/17/Python-while/</id>
    <published>2019-07-17T17:50:10.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是循环"><a href="#什么是循环" class="headerlink" title="什么是循环"></a>什么是循环</h2><p>举个栗子，你现在很闲，就想写一个python程序，看着他一直打印<code>Hello World</code>然后发呆。</p><p>怎么办呢？</p><p>总不能你要看一百万行的<code>Hello World</code>就复制粘贴打一百万行的<code>print(&#39;Hello World&#39;)</code>吧？</p><p>所以就需要<code>while</code>和<code>for</code>循环来控制，循环重复的执行一段代码。</p><p>本文先只讲解<code>while</code>，<code>for</code>其实也是等效的。</p><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p><code>if</code>语句叫做条件控制语句</p><p><code>while</code>、<code>for</code>叫做循环控制语句</p><p>两个都是<code>流程控制</code>的部分，代码是从头到尾顺序执行的，有一定的流程，而流程的控制就交给了<code>if</code>、<code>while</code>和<code>for</code>三种语句。</p><h3 id="while的流程图"><a href="#while的流程图" class="headerlink" title="while的流程图"></a>while的流程图</h3><p><img src="https://www.runoob.com/wp-content/uploads/2014/05/while_loop_1.png" alt=""></p><p>流程图可以解析成对应的<code>while</code>语句：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> condition:</span><br><span class="line">    statement</span><br><span class="line">    statement</span><br><span class="line">    ...</span><br><span class="line">    statement</span><br><span class="line">further statement</span><br></pre></td></tr></table></figure><p>上面的further stateme和script都是一样的，表示接下来的代码。</p><h2 id="while的例子"><a href="#while的例子" class="headerlink" title="while的例子"></a>while的例子</h2><p>runoob(菜鸟教程)上关于循环的例子还是比较生动的</p><p><img src="https://www.runoob.com/wp-content/uploads/2014/05/006faQNTgw1f5wnm06h3ug30ci08cake.gif" alt=""></p><h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><p>成立的意思就是：布尔值为真（True）</p><p>不成立的意思就是：布尔值为假（False）</p><p>文章中可能时而会说成立，时而说真/假，意思是一样的，请自行代换。</p><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p><code>while</code>分为三部分：<code>while关键字</code>、<code>循环条件</code>、<code>循环体</code>。</p><ul><li><p>关键字</p><p>  关键字也就是<code>while</code>这个单词，标明这一行开始是<code>while</code>语句</p></li><li><p>循环条件</p><p>  <code>while</code>循环要执行下去的条件，当条件成立（布尔值为True）才执行<code>循环体</code>。</p></li><li><p>循环体</p><p>  由若干行相同缩进量的代码组成的代码块，当条件成立（布尔值为True）时重复执行这些语句。</p></li></ul><h3 id="while-的形式："><a href="#while-的形式：" class="headerlink" title="while 的形式："></a>while 的形式：</h3><ul><li>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 循环条件:</span><br><span class="line">    要循环的代码块</span><br></pre></td></tr></table></figure></li><li>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 循环条件:</span><br><span class="line">    要循环的语句A</span><br><span class="line">    要循环的语句B</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><p>之前讲的代码块里，其实若干条相同缩进量的代码就是一个代码块。</p><p>也就是说这两种<code>while</code>是一样的，仅仅列出来提及一下代码块的知识。</p><blockquote><p>注意：语句A和语句B的缩进要相同，这样程序才会认为他们都是同级并且都是属于while的代码块的。</p></blockquote><p>上面两个例子中，不论是第一种的代码块还是第二种的n个语句，正确缩进的情况下，他们都是属于<code>while</code>语句的，把这个代码块（n个语句）称之为<code>while</code>语句的<code>循环体</code></p><p>判断条件是一个布尔表达式，也可以直接是一个布尔值。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Go'</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>&lt;<span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'Hello World'</span>)</span><br><span class="line">    print(<span class="string">'Done'</span>)</span><br><span class="line">print(<span class="string">'exit this program'</span>)</span><br></pre></td></tr></table></figure><p>判断的条件就是<code>1&lt;2</code>这个布尔表达式，程序是这样执行的:</p><ol><li>先执行<code>print(&#39;Go&#39;)</code>，我用来表示程序要开始执行了。</li><li>碰到<code>while</code>语句了，会先计算<code>while</code>语句的条件（表达式）的布尔值是真（True）还是假（False）</li><li>计算<code>1&lt;2</code>的值，发现它是<code>True</code>，也就是说<code>while</code>语句的条件是成立的</li><li>去执行<code>while</code>语句里的循环体，也就是两行<code>print</code></li><li>执行完毕后，回到<code>步骤(3)</code>，检查<code>while</code>的条件是不是成立的，发现它还是<code>True</code>,回到<code>步骤(4)</code></li></ol><blockquote><p>步骤(1)是用来表示程序要开始执行了，与<code>while</code>无关</p></blockquote><p>因为<code>1&lt;2</code>是永远成立（布尔值为True）的，也就是<code>while</code>的条件是一直为<code>True</code>的，这个循环会一直执行，循环体外的<code>print(&#39;exit this program&#39;)</code>，被忽略了，直到程序被关闭，这种情况也称之为<code>死循环</code>。</p><p>但是大多数都不会去写一个死循环的<code>while</code>，因为后面的代码都废掉了，程序会一直在<code>while</code>里转圈圈，出不来。</p><p>另一个例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Go'</span>)</span><br><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> a&lt;<span class="number">1000</span>:</span><br><span class="line">    print(<span class="string">'Hello World'</span>)</span><br><span class="line">    print(<span class="string">'Done'</span>)</span><br><span class="line">    a = a + <span class="number">1</span></span><br><span class="line">print(<span class="string">'exit this program'</span>)</span><br></pre></td></tr></table></figure><p>可以看到，在<code>while</code>的循环体里执行修改条件里用到的变量是很常见的，循环体执行完之后都会去重新判断条件是否成立，不成立就跳出这个<code>while</code>循环，成立就重新执行循环体。</p><p>上面的这个例子里，a一开始是0，循环体的最后一个语句：将<code>a</code>的值加1，并将新的值赋回给<code>a</code>，那么在循环1000次之后，<code>a</code>的值变成了1000,而<code>1000&lt;1000</code>是不成立的，也就是说<code>while</code>语句的条件不成立了，那么退出<code>while</code>语句，去执行<code>print(&#39;exit this program&#39;)</code></p><p>所以，当python顺序执行下来，碰到了<code>while</code>循环的执行顺序如下：</p><ol><li>判断<code>while</code>的条件是否成立<blockquote><p>布尔表达式的值是否为真，也就是True）</p></blockquote></li><li>如果条件成立，执行<code>步骤(3)</code>和<code>步骤(4)</code>，否则执行<code>步骤(5)</code></li><li>执行<code>while</code>里面的循环体<blockquote><p>上面例子中的<code>print(&#39;Hello World&#39;)</code>和<code>print(&#39;Done&#39;)</code>组成了<code>while</code>的循环体</p></blockquote></li><li>执行完循环体之后，计算执行完语句后<code>while</code>的条件是否还成立，如果成立，回到<code>步骤(3)</code>，否则执行<code>步骤(5)</code></li><li>执行<code>while</code>外面的代码块<blockquote><p>上面例子中的<code>print(&#39;exit this program&#39;)</code></p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是循环&quot;&gt;&lt;a href=&quot;#什么是循环&quot; class=&quot;headerlink&quot; title=&quot;什么是循环&quot;&gt;&lt;/a&gt;什么是循环&lt;/h2&gt;&lt;p&gt;举个栗子，你现在很闲，就想写一个python程序，看着他一直打印&lt;code&gt;Hello World&lt;/code&gt;然后
      
    
    </summary>
    
      <category term="Python" scheme="http://bean.ink/categories/Python/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Python" scheme="http://bean.ink/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python---代码块</title>
    <link href="http://bean.ink/2019/07/17/Python-%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
    <id>http://bean.ink/2019/07/17/Python-代码块/</id>
    <published>2019-07-17T15:09:23.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><h3 id="代码的缩进"><a href="#代码的缩进" class="headerlink" title="代码的缩进"></a>代码的缩进</h3><p>在python中，代码的缩进很重要。</p><p>缩进的方式有两种：</p><ul><li><p>制表符缩进，也就是用制表符键（大写锁定上面那个按键，也就是tab）来进行缩进</p></li><li><p>空格缩进，用空格来进行缩进</p></li></ul><p>个人推荐第一种用制表符进行缩进，比较方便，写出来的代码也会比较好看。</p><blockquote><p>但其实大部分编辑器或者IDE，在你按下tab的时候，是输入2个或者4个（或者自定义的数量）的空格。</p><p>如果你设置为制表符缩进，才会真的是以制表符缩进。</p></blockquote><p>一个制表符或者n个空格叫做一个缩进量</p><p>以下内容运行会报错：</p><ul><li><p>制表符缩进</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'hello'</span>)</span><br><span class="line">    print(<span class="string">'world'</span>)</span><br></pre></td></tr></table></figure></li><li><p>空格缩进</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i = <span class="number">5</span></span><br><span class="line"> <span class="keyword">print</span> <span class="string">'Value is'</span>, i <span class="comment"># Error! Notice a single space at the start of the line</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'I repeat, the value is'</span>, i</span><br></pre></td></tr></table></figure></li></ul><p>错误为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  File <span class="string">"x.py"</span>, line <span class="number">2</span></span><br><span class="line">    print(<span class="string">'world'</span>)</span><br><span class="line">    ^</span><br><span class="line">IndentationError: unexpected indent</span><br></pre></td></tr></table></figure><p>也就是<code>意外的缩进</code>。</p><blockquote><p>似乎python2会报<code>SyntaxError</code>即语法错误。并不确定，我装的是python3。</p></blockquote><h4 id="额外注意（可以跳过）"><a href="#额外注意（可以跳过）" class="headerlink" title="额外注意（可以跳过）"></a>额外注意（可以跳过）</h4><p>两种缩进方式不要混用，有时候虽然看起来代码的层级是相同的，但其实有一行的缩进数量并不相同</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">'hello'</span> <span class="keyword">is</span> <span class="string">'hello'</span>:</span><br><span class="line">    print(<span class="string">'A'</span>)</span><br><span class="line"> print(<span class="string">'B'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'C'</span>)</span><br><span class="line">    print(<span class="string">'D'</span>)</span><br></pre></td></tr></table></figure><p>是会报错的：<code>TabError: inconsistent use of tabs and spaces in indentation</code></p><p>在这个文章里你可以看到<code>print(&#39;B&#39;)</code>比<code>print(&#39;A&#39;)</code>多了一个缩进量。</p><p>但其实在编辑器里面<code>print(&#39;B&#39;)</code>的缩进是我先打了一个空格，再将缩进方式设置成制表符缩进，按下tab，在编辑器里<code>print(&#39;A&#39;)</code>和<code>print(&#39;B&#39;)</code>看起来是相同缩进量的。</p><h3 id="什么是代码块"><a href="#什么是代码块" class="headerlink" title="什么是代码块"></a>什么是代码块</h3><p><code>代码块</code>是由多行语句组合成的，将缩进到相同层级的语句看做一个<code>代码块</code>。</p><p>或者称之为<code>语句块</code>。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'Start'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">'hello'</span> <span class="keyword">is</span> <span class="string">'hello'</span>:</span><br><span class="line">    print(<span class="string">'waooo'</span>)</span><br><span class="line">    print(<span class="string">'秀秀秀'</span>)</span><br><span class="line">    print(<span class="string">'好了'</span>)</span><br><span class="line">    print(<span class="string">'编不下去了'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'hello 怎么可能不是 hello呢？'</span>)</span><br><span class="line">    print(<span class="string">'这里的东西是不会执行的'</span>)</span><br></pre></td></tr></table></figure><p>运行的结果会是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Start</span><br><span class="line">waooo</span><br><span class="line">秀秀秀</span><br><span class="line">好了</span><br><span class="line">编不下去了</span><br></pre></td></tr></table></figure><p>上面的例子里头，<code>if</code>下面四行的<code>print(xxx)</code>的前面都有且只有一个缩进，也就是说这四行代码同属于一个代码块。</p><p>而<code>if</code>的真正形式，其实是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件A:</span><br><span class="line">    代码块A</span><br><span class="line"><span class="keyword">elif</span> 条件B:</span><br><span class="line">    代码块B</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    代码块C</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代码块&quot;&gt;&lt;a href=&quot;#代码块&quot; class=&quot;headerlink&quot; title=&quot;代码块&quot;&gt;&lt;/a&gt;代码块&lt;/h2&gt;&lt;h3 id=&quot;代码的缩进&quot;&gt;&lt;a href=&quot;#代码的缩进&quot; class=&quot;headerlink&quot; title=&quot;代码的缩进&quot;&gt;&lt;/a&gt;
      
    
    </summary>
    
      <category term="Python" scheme="http://bean.ink/categories/Python/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Python" scheme="http://bean.ink/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python---字符串</title>
    <link href="http://bean.ink/2019/07/17/Python-string/"/>
    <id>http://bean.ink/2019/07/17/Python-string/</id>
    <published>2019-07-17T13:22:59.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文内容"><a href="#本文内容" class="headerlink" title="本文内容"></a>本文内容</h2><p>初步介绍字符串的基本知识，编码问题的科普和字符串的格式化。</p><p>其他的关于字符串的长度、编码转换等等，后续再补充。</p><h2 id="什么是字符串"><a href="#什么是字符串" class="headerlink" title="什么是字符串"></a>什么是字符串</h2><p>例如：<code>!</code>、<code>a</code>、<code>@</code>、<code>1</code>、<code>=</code>、<code>#</code>、<code>/</code>，等等这种单个字母、数字或者符号都称之为一个字符</p><p>字符串，顾名思义就是字符组成的串，用来表示多个字符组成的一段序列，可以代表一个单词，一个句子，甚至一大段文字。</p><p>在变量一节中，也提到了，字符串也是python基本数据类型的一种。</p><h2 id="编码问题-科普说明"><a href="#编码问题-科普说明" class="headerlink" title="编码问题 (科普说明)"></a>编码问题 (科普说明)</h2><p>其实对于计算机来说，所有的东西，都是数字。</p><p>不论多么复杂的东西，到最后都转换成二进制的数字。</p><h3 id="什么是二进制"><a href="#什么是二进制" class="headerlink" title="什么是二进制"></a>什么是二进制</h3><p>借用一下百度百科：</p><blockquote><p>二进制数据是用0和1两个数码来表示的数。 它的基数为2，进位规则是“逢二进一”，借位规则是“借一当二”。</p></blockquote><p>日常生活中计数用的是十进制，也就是逢十进一，每个数位上（个十百千万等）的数字都在0-9这10个数字里，当<code>9+1</code>时，个位变成了10，逢十进一，也就是变成了<code>10</code>。</p><p>十进制里，<code>0+1</code>是<code>1</code>，<code>1+1</code>是<code>2</code>。</p><p>在二进制里<code>0+1</code>是<code>1</code>，但是<code>1+1</code>的结果低位是<code>2</code>，逢二进一，也就是结果为<code>10</code>。</p><blockquote><p>注意：这是二进制的<code>10</code></p></blockquote><p>换算方法其实也就是<code>数位上的值乘以2的x次方的和</code>，x从0开始，从右往左依次相加。</p><p>例如：二进制的<code>101</code>，换算为十进制，从右往左：<code>1*2^0 + 0*2^1 + 1*2^2 = 5</code>，也就是十进制的<code>5</code></p><h3 id="什么是字节Byte"><a href="#什么是字节Byte" class="headerlink" title="什么是字节Byte"></a>什么是字节Byte</h3><p>讲完了二进制，那么什么是字节呢？</p><p>在十进制中，每个数位有各自的名字，个十百千万等。</p><p>在二进制中，每个数位称为一位（bit），也叫作比特。从右往左，称右边的数位为低位，左边的数位为高位。</p><p>以<code>8</code>个bit为一个单位，叫做字节（byte），也就是<code>1 byte = 8 bit</code></p><p>在书面表示的时候，通常以每4个bit分割。</p><p>例如：十进制数字<code>65</code>的二进制表示为<code>0100 0001</code>，在内存中占<code>2Byte</code>。</p><p>常见数字十进制数字：<code>65535</code>，换算成二进制就是<code>1111 1111 1111 1111</code>也就是16位或16比特，<code>16/8=2</code>也就是这个数字占2个字节，是2个字节所能表示最大的整数。</p><h3 id="什么是编码问题"><a href="#什么是编码问题" class="headerlink" title="什么是编码问题"></a>什么是编码问题</h3><p>计算机一开始设计的时候，内存很小，并且美国人母语是英文，所以一开始编入了<code>127</code>个字符，包括26个大小写字母和一些符号。</p><p>这<code>127</code>个数字代表的<code>127</code>个字符也叫<code>ASCII</code>码，<code>ASCII</code>也是一种编码方式。</p><p>后来呢，要表示中文、日文、俄文等等各种乱七八糟的文字，原来的<code>127</code>个数字肯定是不够的，所以需要拓展，用更多的字节容纳更多数字来表示更多的字符。</p><p>那么，底层的计算机都是二进制数字，如何知道这个数字对应了什么字符呢。</p><p>编码的作用就在这里，同样的数字，不同的编码对应的字符是不一样的。</p><p>同样是数字<code>666666</code>，在unicode和utf8，两个编码集里可能代表了不同的字符。</p><p>又例如，<code>&quot;中&quot;</code>这个中文，在<code>ASCII</code>码中已经超出显示范围了，是不能被显示的，而在<code>unicode</code>中，其对应二进制数：<code>0100 1110 0010 1101</code>，而在<code>utf8</code>中对应二进制数：<code>1110 0100 1011 1000 1010 1101</code></p><blockquote><p>分别对应十进制的<code>20013</code>和<code>14,989,485</code></p><p><code>unicode</code>和<code>utf8</code>都是编码集的一种，emoji就是被编码<code>unicode</code>里的。</p></blockquote><h2 id="关于字符串"><a href="#关于字符串" class="headerlink" title="关于字符串"></a>关于字符串</h2><p>python中，字符串的形式可以是<code>&#39;hello&#39;</code>，也可以是<code>&quot;hello&quot;</code>，两者都表示同一个字符串<code>hello</code>。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'hello'</span></span><br><span class="line">b = <span class="string">"hello"</span></span><br><span class="line">print(a <span class="keyword">is</span> b)</span><br></pre></td></tr></table></figure><p>运行的结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><p>也就是说，字符串用单引号<code>&#39;&#39;</code>和双引号<code>&quot;&quot;</code>包括起来的效果是一样的。</p><p>但是例如字符串本身包含单引号或者双引号，那么可以用另一个包括起来。</p><p>例如：<code>&quot;This is Bean&#39;s Blog&quot;</code>和<code>&#39;he said &quot;oh shit&quot;&#39;</code>，都是合法的字符串。</p><h2 id="字符串的拼接"><a href="#字符串的拼接" class="headerlink" title="字符串的拼接"></a>字符串的拼接</h2><p>python中，拼接两个字符串，可以通过两个字符串相加完成。</p><p>例如有变量<code>a = &#39;hello&#39;</code>和变量<code>b = &#39;world&#39;</code>，要怎么只用这两个变量打印<code>hello world</code>呢？</p><p>答案就是字符串的拼接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">'hello'</span></span><br><span class="line">b = <span class="string">'world'</span></span><br><span class="line">print(a + <span class="string">' '</span> + b)</span><br></pre></td></tr></table></figure><blockquote><p>a和b两个字符串之间还缺一个空格，所以要<code>a+空格+b</code></p></blockquote><p>结果就是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello world</span><br></pre></td></tr></table></figure><h2 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h2><p>常常遇到，要打印一段字符串，但是字符串的内容又是由很多变量组成的。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'bear'</span></span><br><span class="line">time = <span class="string">'2019-7-xx'</span></span><br><span class="line">sth = <span class="string">'i dont know'</span></span><br><span class="line">print(<span class="string">'hello'</span> + <span class="string">','</span> + name + <span class="string">'.Now is '</span>+ time + <span class="string">'. Bean said '</span>+ sth)</span><br></pre></td></tr></table></figure><p>运行的结果会是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hello,bear.Now <span class="keyword">is</span> <span class="number">2019</span><span class="number">-7</span>-xx. Bean said i dont know</span><br></pre></td></tr></table></figure><p>会比较繁琐，写起来手也酸（加号和引号疯狂敲打），那么有没有一次性把整句话打完，再把<code>name</code>和<code>sth</code>这两个变量填进去的方法呢？</p><p>对字符串进行格式化起的就是这样的作用。</p><p>用字符串格式化的方式实现上面的例子，会是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'bear'</span></span><br><span class="line">time = <span class="string">'2019-7-xx'</span></span><br><span class="line">sth = <span class="string">'i dont know'</span></span><br><span class="line">print(<span class="string">'hello,%s.Now is %s. Bean said %s'</span> % (name,time,sth))</span><br></pre></td></tr></table></figure><p><code>print</code>括号里的内容就是在对字符串进行格式化，可以理解为是一个占位的东西。</p><p>格式化的字符串是<code>&#39;hello,%s.Now is %s. Bean said %s&#39;</code>，而<code>%</code>是一个运算符，表示将右边的变量（有多个的话用小括号包括起来）按顺序，填入格式化的字符串中。</p><p><code>%</code>右边括号中的若干变量，也被称做是格式化的参数，关于参数，到函数那里会补充。</p><p><code>%s</code>被称作占位符，告诉程序，这里要填的内容是什么数据类型。</p><blockquote><p><code>%s</code>代表被格式化的内容是字符串</p></blockquote><p>而其他类似的占位符：</p><div class="table-container"><table><thead><tr><th style="text-align:center">占位符</th><th style="text-align:center">替换内容</th></tr></thead><tbody><tr><td style="text-align:center">%s</td><td style="text-align:center">字符串</td></tr><tr><td style="text-align:center">%d</td><td style="text-align:center">整数</td></tr><tr><td style="text-align:center">%f</td><td style="text-align:center">浮点数</td></tr><tr><td style="text-align:center">%x</td><td style="text-align:center">十六进制整数</td></tr></tbody></table></div><p>当参数和占位符的数据类型不符时，会自动调用相应的类型转换函数进行类型转换。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'i need a float : %f'</span> % <span class="number">555</span>)</span><br></pre></td></tr></table></figure><p>结果会是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">i need a float : <span class="number">555.000000</span></span><br></pre></td></tr></table></figure><p>也就是参数<code>555</code>，在被格式化填入到<code>%f</code>的位置的时候，自动进行了类型转换，从整数转换成了浮点数。</p><p>同样的<code>%x</code>填入十六进制数也是一样的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'here hava a hexadecimal integer : %x'</span> % <span class="number">666</span>)</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">here hava a hexadecimal integer : <span class="number">29</span>a</span><br></pre></td></tr></table></figure><p>也就是十进制数<code>666</code>被自动转换成了十六进制数<code>29a</code></p><p>关于进制下面会讲。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;本文内容&quot;&gt;&lt;a href=&quot;#本文内容&quot; class=&quot;headerlink&quot; title=&quot;本文内容&quot;&gt;&lt;/a&gt;本文内容&lt;/h2&gt;&lt;p&gt;初步介绍字符串的基本知识，编码问题的科普和字符串的格式化。&lt;/p&gt;
&lt;p&gt;其他的关于字符串的长度、编码转换等等，后续再补充。
      
    
    </summary>
    
      <category term="Python" scheme="http://bean.ink/categories/Python/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Python" scheme="http://bean.ink/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python---if一家人</title>
    <link href="http://bean.ink/2019/07/17/Python-if/"/>
    <id>http://bean.ink/2019/07/17/Python-if/</id>
    <published>2019-07-17T03:29:27.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是条件控制"><a href="#什么是条件控制" class="headerlink" title="什么是条件控制"></a>什么是条件控制</h2><p>举个栗子，现在你学会了<code>print(&#39;Hello World&#39;)</code>，感觉很枯燥，老给我哈罗干嘛呢？</p><p>你现在想做一个判断 <code>2019</code> 是不是大于 <code>20*19</code>，如果大于，就打印<code>Yep</code>，告诉你真的是大于，不是就打印<code>Nope</code>，告诉你<code>2019</code>其实不大于<code>20*19</code>。</p><p>怎么办呢？</p><p>就需要一个东西来判断<code>2019&lt;20*19</code>，这个布尔表达式的真(True)或假(False)，而且真和假时要打印不同的内容给我。</p><p><code>if</code>语句的作用就是用来做类似的事情的，也就是条件控制，当条件成立时执行一些操作（代码），不成立时又执行一些操作（代码）。</p><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><p><code>if</code>语句叫做条件控制语句</p><p><code>while</code>、<code>for</code>叫做循环控制语句</p><p>两个都是<code>流程控制</code>的部分，代码是从头到尾顺序执行的，有一定的流程，而流程的控制就交给了<code>if</code>、<code>while</code>和<code>for</code>三种语句。</p><h3 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h3><p>成立的意思就是：布尔值为真（True）</p><p>不成立的意思就是：布尔值为假（False）</p><p>文章中可能时而会说成立，时而说真/假，意思是一样的，请自行代换。</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p>程序都是按部就班，按照代码语句的顺序执行的。</p><p>流程图就是为了表示代码是以怎样的一个顺序执行的图。</p><p><code>if</code>语句的流程图：</p><p><img src="https://www.runoob.com/wp-content/uploads/2013/11/if-condition.jpg" alt=""></p><h3 id="布尔表达式"><a href="#布尔表达式" class="headerlink" title="布尔表达式"></a>布尔表达式</h3><p>布尔表达式和布尔值等价，布尔表达式的结果就是布尔值。</p><blockquote><p>例如：<code>1&lt;2</code>称作一个布尔表达式，他的值是<code>True</code></p></blockquote><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p><code>if</code>的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立时执行的语句</span><br></pre></td></tr></table></figure><p><code>if</code>起的是条件控制的作用，当条件（可以是一个布尔表达式或者一个布尔值）的值为真时，执行<code>if</code>下的语句。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'Ok'</span>)</span><br><span class="line">print(<span class="string">'done'</span>)</span><br></pre></td></tr></table></figure><p>如果<code>a</code>的值是<code>1</code>那么结果就是打印了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ok</span><br><span class="line">done</span><br></pre></td></tr></table></figure></p><p>如果不是，那么只打印<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">done</span><br></pre></td></tr></table></figure></p><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><p><code>if else</code>的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件:</span><br><span class="line">    条件成立时执行的语句</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    条件成立时执行的语句</span><br></pre></td></tr></table></figure><p>跟<code>if</code>的作用是一样的，不同在于，当条件不成立时会执行<code>else</code>里的语句。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="number">1</span>:</span><br><span class="line">    print(<span class="string">'Ok'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'aha'</span>)</span><br><span class="line">print(<span class="string">'done'</span>)</span><br></pre></td></tr></table></figure><p>如果<code>a</code>的值是<code>1</code>那么结果就是打印了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Ok</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>如果不是，那么只打印</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aha</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>其实也可以将<code>if</code>看做<code>if else</code>中，将<code>else</code>省略的形式</p><h2 id="if-elif"><a href="#if-elif" class="headerlink" title="if elif"></a>if elif</h2><p>elif 其实就是 else if 的意思</p><p><code>if elif</code>的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件A:</span><br><span class="line">    条件A成立时执行的语句</span><br><span class="line"><span class="keyword">elif</span> 条件B:</span><br><span class="line">    条件B成立时执行的语句</span><br></pre></td></tr></table></figure><p>与<code>if</code>的作用类似，但是<code>if elif</code>在于，当<code>if</code>的条件不成立的时候，进入到<code>elif</code>的条件里再次判断</p><h2 id="if-elif-else"><a href="#if-elif-else" class="headerlink" title="if elif else"></a>if elif else</h2><p><code>if elif else</code>的形式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件A:</span><br><span class="line">    条件A成立时执行的语句</span><br><span class="line"><span class="keyword">elif</span> 条件B:</span><br><span class="line">    条件B成立时执行的语句</span><br><span class="line"><span class="keyword">elif</span> 条件C:</span><br><span class="line">    条件C成立时执行的语句</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    所有条件都不成立时执行的语句</span><br></pre></td></tr></table></figure><p>与<code>if elif</code>类似，只是当<code>if</code>和<code>elif</code>出现的所有条件都不成立时执行else里的语句</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>其实<code>if</code>和<code>if else</code>、<code>if elif</code>等东西是一样的，可以看做所有的上面讲的四种语句都是<code>if elif else</code>的省略形式。</p><p>也就是把所有类型的<code>if</code>逻辑控制语句，看做以<code>if</code>开头，以<code>else</code>结尾的语句，至少需要一个条件，其他条件和条件成立时执行的语句放在<code>elif</code>中（如果有的话），而且如果所有条件都不成立时不执行语句，那么<code>else</code>可以省去。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是条件控制&quot;&gt;&lt;a href=&quot;#什么是条件控制&quot; class=&quot;headerlink&quot; title=&quot;什么是条件控制&quot;&gt;&lt;/a&gt;什么是条件控制&lt;/h2&gt;&lt;p&gt;举个栗子，现在你学会了&lt;code&gt;print(&amp;#39;Hello World&amp;#39;)&lt;/cod
      
    
    </summary>
    
      <category term="Python" scheme="http://bean.ink/categories/Python/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Python" scheme="http://bean.ink/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python---变量和数据类型</title>
    <link href="http://bean.ink/2019/07/17/Python1/"/>
    <id>http://bean.ink/2019/07/17/Python1/</id>
    <published>2019-07-17T02:16:45.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>基本的前提知识和基本数据类型的运算等。</p><h2 id="到底在学什么"><a href="#到底在学什么" class="headerlink" title="到底在学什么"></a>到底在学什么</h2><p>其实入门就是学一下思维方式，适应python编写的思维方式。</p><p>写程序其实跟写文章没有很大区别，如果你把一个python的代码，全部（包括运算符）翻译成中文，那么其实一段代码在干什么是很直白的，其实也就是在学习一些基础的知识，并在敲demo的过程中适应python的思维方式，看到题目或者别的需求之类的就能想出相应的代码了。</p><h2 id="基本前提知识"><a href="#基本前提知识" class="headerlink" title="基本前提知识"></a>基本前提知识</h2><h3 id="运算数"><a href="#运算数" class="headerlink" title="运算数"></a>运算数</h3><p>进行运算的对象，<code>1 + 2</code>中，<code>1</code>和<code>2</code> 都是运算数，<code>+</code>是运算符。</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>按所需运算数数量的分法，分双目运算符、单目运算符。</p><p>双目运算符：运算符左右两边都有值或表达式，例如：<code>&lt;</code> 需要两个值 <code>1&lt;2</code>才能进行运算。</p><blockquote><p>还有类似: <code>+=</code>、<code>*=</code> 等，后续再补充作用</p></blockquote><p>单目运算符：只需要一个运算数，例如：<code>not</code>只需要一个值<code>not True</code> 即可。</p><blockquote><p>还有类似: <code>++</code>、<code>--</code> 等，后续再补充作用</p></blockquote><p><code>下面的算术运算符和比较运算符仅做介绍，不用记忆，需要了再看</code></p><h4 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h4><p>以下假设变量： <code>a = 10</code>，<code>b = 20</code>：</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">+</td><td style="text-align:center">加 - 两个对象相加</td><td style="text-align:center"><code>a + b</code> 输出结果 30</td></tr><tr><td style="text-align:center">-</td><td style="text-align:center">减 - 得到负数或是一个数减去另一个数</td><td style="text-align:center"><code>a - b</code> 输出结果 -10</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">乘 - 两个数相乘或是返回一个被重复若干次的字符串</td><td style="text-align:center"><code>a * b</code> 输出结果 200</td></tr><tr><td style="text-align:center">/</td><td style="text-align:center">除 - x除以y</td><td style="text-align:center"><code>b / a</code> 输出结果 2</td></tr><tr><td style="text-align:center">%</td><td style="text-align:center">取模 - 返回除法的余数</td><td style="text-align:center"><code>b % a</code> 输出结果 0</td></tr><tr><td style="text-align:center">**</td><td style="text-align:center">幂 - 返回x的y次幂</td><td style="text-align:center"><code>a**b</code> 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td style="text-align:center">//</td><td style="text-align:center">取整除 - 返回商的整数部分</td><td style="text-align:center">向下取整    </td></tr></tbody></table></div><p><code>//</code>的例子：</p><blockquote><p>9//2</p><blockquote><p>4</p></blockquote><p>-9//2</p><blockquote><p>-5</p></blockquote></blockquote><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>以下假设变量<code>a = 10</code>，变量<code>b = 20</code>：</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">==</td><td style="text-align:center">等于 - 比较对象是否相等</td><td style="text-align:center">(a == b) 返回 False。</td></tr><tr><td style="text-align:center">!=</td><td style="text-align:center">不等于 - 比较两个对象是否不相等</td><td style="text-align:center">(a != b) 返回 true.</td></tr><tr><td style="text-align:center">&lt;&gt;</td><td style="text-align:center">不等于 - 比较两个对象是否不相等</td><td style="text-align:center">(a &lt;&gt; b) 返回 true。这个运算符类似 != 。</td></tr><tr><td style="text-align:center">&gt;</td><td style="text-align:center">大于 - 返回x是否大于y    (a &gt; b) 返回 False。</td></tr><tr><td style="text-align:center">&lt;</td><td style="text-align:center">小于 - 返回x是否小于y。</td><td style="text-align:center">(a &lt; b) 返回 true。</td></tr><tr><td style="text-align:center">&gt;=</td><td style="text-align:center">大于等于    - 返回x是否大于等于y。</td><td style="text-align:center">(a &gt;= b) 返回 False。</td></tr><tr><td style="text-align:center">&lt;=</td><td style="text-align:center">小于等于 -    返回x是否小于等于y。</td><td style="text-align:center">(a &lt;= b) 返回 true。</td></tr></tbody></table></div><p>所有比较运算符返回1表示真，返回0表示假。这分别与特殊的变量True和False等价。</p><h4 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h4><p><code>=</code> 等于号也即赋值运算符，将等号右边的值赋给左边的变量。</p><p>例如：<code>a = 1</code> 将 整数1的值赋给变量<code>a</code>。</p><p>赋值运算符的执行顺序是这样的：先计算右边的值，再讲将右边的值赋给左边的值。</p><p>例如：</p><p><code>a = a + 1</code></p><p>假设<code>a</code>原来的值是<code>1</code>，从<code>=</code>的右边先看</p><p><code>a + 1</code>的结果是<code>2</code></p><p>程序计算完右边的值，对程序来说这个语句变成了：</p><p><code>a = 2</code></p><p>也就是说在阅读赋值表达式的时候，把右边的值先完全计算出来，然后用值把右边的所有东西都删去，替换成这个表达式的值，即可。</p><p>另外，是不是感觉，<code>a = a + 1</code> 有点啰嗦，要打两次<code>a</code>。</p><p>其实可以把它直接缩写成<code>a += 1</code>，这里可以看做就是<code>a + 1</code>，但是把左边的<code>=</code>省略到<code>+</code>里，变成<code>+=</code>。</p><p>或者可以把<code>+=</code>读作“自增”，<code>a += 1</code>读作”<code>a</code>自增<code>1</code>“，也就可以理解<code>+=</code>的作用了。</p><p>类似的还有<code>-=</code>等，</p><p>如下：</p><div class="table-container"><table><thead><tr><th style="text-align:center">运算符</th><th style="text-align:center">描述</th><th style="text-align:center">实例</th></tr></thead><tbody><tr><td style="text-align:center">+=</td><td style="text-align:center">加法赋值运算符</td><td style="text-align:center"><code>c += a</code> 等效于 <code>c = c + a</code></td></tr><tr><td style="text-align:center">-=</td><td style="text-align:center">减法赋值运算符</td><td style="text-align:center"><code>c -= a</code> 等效于 <code>c = c - a</code></td></tr><tr><td style="text-align:center">*=</td><td style="text-align:center">乘法赋值运算符</td><td style="text-align:center"><code>c *= a</code> 等效于 <code>c = c * a</code></td></tr><tr><td style="text-align:center">/=</td><td style="text-align:center">除法赋值运算符</td><td style="text-align:center"><code>c /= a</code> 等效于 <code>c = c / a</code></td></tr><tr><td style="text-align:center">%=</td><td style="text-align:center">取模赋值运算符</td><td style="text-align:center"><code>c %= a</code> 等效于 <code>c = c % a</code></td></tr><tr><td style="text-align:center">**=</td><td style="text-align:center">幂赋值运算符</td><td style="text-align:center"><code>c **= a</code> 等效于 <code>c = c ** a</code></td></tr><tr><td style="text-align:center">//=</td><td style="text-align:center">取整除赋值运算符</td><td style="text-align:center"><code>c //= a</code> 等效于 <code>c = c // a</code></td></tr></tbody></table></div><p><code>仅做介绍，不用记忆，用到再来</code></p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><ul><li><code>or</code> <ul><li>逻辑或，作用：当左右两边的布尔表达式同时为假（False），运算结果为假（False），否则都为真（True）。(以下是例子)<blockquote><p><code>1&lt;2 or 3&lt;2</code>的值为<code>True</code>。</p><p><code>3&lt;2 or 1&lt;2</code>的值为<code>True</code>。</p><p><code>1&lt;2 or 3&lt;4</code>的值为<code>True</code>。</p><p><code>3&lt;2 or 4&lt;2</code>的值为<code>False</code>。</p></blockquote></li><li>也即以下值为<code>True</code>：<ul><li><code>True or True</code></li><li><code>True or False</code></li><li><code>False or True</code></li></ul></li><li>而<code>Fasle or False</code>的值为<code>False</code></li></ul></li><li><code>and</code><ul><li>逻辑与，作用：当左右两边的布尔表达式同时为真（True），运算结果即为真（True），否则都是<code>False</code>。(以下是例子)<blockquote><p><code>1&lt;2 and 3&lt;4</code>的值为<code>True</code>。</p><p><code>1&lt;2 and 3&lt;2</code>的值为<code>False</code>。</p><p><code>3&lt;2 and 1&lt;2</code>的值为<code>False</code>。</p><p><code>3&lt;2 and 4&lt;2</code>的值为<code>False</code>。</p></blockquote></li><li>也即以下值为<code>False</code>：<ul><li><code>False and False</code></li><li><code>True and False</code></li><li><code>False and True</code></li></ul></li><li>而<code>True and True</code>的值为<code>True</code></li></ul></li><li><p><code>not</code> </p><ul><li><p>逻辑非，作用：将右边的布尔值取反。也就是True变False，False变True</p><blockquote><p><code>not 1&lt;2</code>的值为<code>False</code></p><p><code>not 3&lt;4</code>的值为<code>True</code></p></blockquote><ul><li>也即:<code>not True</code>的值为<code>False</code>，<code>not False</code>的值为<code>True</code></li></ul></li></ul></li><li><code>!=</code> 和 <code>is not</code> （两者等效）<ul><li>不等于</li></ul></li><li><code>==</code> 和 <code>is</code> （两者等效）<ul><li>等于</li></ul></li></ul><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>可以认为变量是对一个数据的命名，变量在使用前是需要声明的，在python中变量的声明通过对变量的赋值进行，例如<code>a = 1</code>即声明了一个变量<code>a</code>，他的值是<code>1</code>。</p><p>例如以下代码会报出错误：<code>NameError: name &#39;a&#39; is not defined</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>原因是变量<code>a</code>并没有被提前声明</p><p>改成下面这样就可以了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h3 id="变量命名规范（初学的话仅做了解）"><a href="#变量命名规范（初学的话仅做了解）" class="headerlink" title="变量命名规范（初学的话仅做了解）"></a>变量命名规范（初学的话仅做了解）</h3><p>变量就是一个有名字的数据，那么命名就很重要了。</p><p>变量名有以下几个规则：</p><ol><li><p>第一个字符必须是字母或者下划线“_”</p></li><li><p>剩下的部分可以是字母、下划线“_”或数字（0-9）</p></li><li><p>变量名称是对大小写敏感的，myname和myName不是同一个变量。</p></li></ol><p>规则是一定要符合的，不然程序会报错。</p><p>变量的命名一定要具意命名并且用英文，比如保存姓名的变量就叫<code>name</code>，不要叫<code>mingzi</code>。</p><p><code>命名规范</code>是变量在符合上面的命名规则后的建议。</p><p>例如有个变量，用来保存Bean曾经说过的话。</p><p>不用<code>命名规范</code>来命名变量呢，他可以是这样<code>wordsfrombean</code>，也可以是<code>Words_fromBean</code>，单词量都一样，变量的实际含义也一样，但是形式却不统一，会让代码变得混乱。</p><p>常见的<code>命名规范</code>方式有：</p><ul><li>驼峰命名法</li><li>匈牙利命名法</li><li>帕斯卡（Pascal）命名法</li><li>下划线命名法</li></ul><p>python的命名风格主要是<code>驼峰命名法</code>和<code>下划线命名法</code>的混合：</p><p>驼峰命名法：第一个单词以小写字母开始；从第二个单词开始以后的每个单词的首字母都采用大写字母。</p><p>例如：<code>myFirstName</code>、<code>myLastName</code></p><p>下划线命名法：单词直接用 <code>_</code> （下划线）隔开，变量名小写、常量全大写等，详细看下面的几个介绍。</p><blockquote><p>下面关于函、类和模块的命名方式仅做介绍，后面学了函数和类再来看。</p></blockquote><ol><li><p>变量名</p><ul><li>变量名尽量小写, 如有多个单词，用下划线隔开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line">school_name = <span class="string">''</span></span><br></pre></td></tr></table></figure><ul><li>常量采用全大写，如有多个单词，使用下划线隔开</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MAX_CLIENT = 100</span><br><span class="line">MAX_CONNECTION = 1000</span><br><span class="line">CONNECTION_TIMEOUT = 600</span><br></pre></td></tr></table></figure></li><li><p>函数</p><ul><li>函数名一律小写，如有多个单词，用下划线隔开</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_with_env</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li>私有函数在函数前加一个下划线_</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">_private_func</span><span class="params">()</span>:</span></span><br><span class="line">      <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>类<br>类名使用驼峰(CamelCase)命名风格，首字母大写，私有类可用一个下划线开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Farm</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalFarm</span><span class="params">(Farm)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_PrivateFarm</span><span class="params">(Farm)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>模块<br>模块尽量使用小写命名，首字母保持小写，尽量不要用下划线(除非多个单词，且数量不多的情况)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正确的模块名</span></span><br><span class="line"><span class="keyword">import</span> decoder</span><br><span class="line"><span class="keyword">import</span> html_parser</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐的模块名</span></span><br><span class="line"><span class="keyword">import</span> Decoder</span><br></pre></td></tr></table></figure></li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>python 不是强类型语言，也就是在声明变量的时候不用去提前告诉程序，变量到底是什么类型。</p><p>程序会根据当前的值去推算变量的类型。</p><p>例如在强类型语言中（例如Java等），声明一个整数：<code>int a = 1</code>，python中只需要<code>a = 1</code>。</p><p>强类型语言声明一个字符串：<code>String s = &quot;hello&quot;</code>，python中只需要<code>s = &#39;hello&#39;</code></p><p>并且python的数据类型也是动态的，变量a可以先是整数，再将一个字符串赋值给它，就变成了字符串：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">print(a)</span><br><span class="line">a = <span class="string">'hello'</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure></p><p>上面程序的结果是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1</span><br><span class="line">hello</span><br></pre></td></tr></table></figure></p><p>所以，不用很在意一个基本数据类型的变量到底是什么，但是如果是字典、列表、字典和集合的话就要注意，后续再补充为什么。</p><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><ul><li>Python中的数据类型分为：<ol><li>字符串 str</li><li>数字 <ul><li>int 整数</li><li>float 浮点型 </li><li>bool 布尔值（因为是逻辑值，其实也是数字，在离散数学里把0当做False，1当做True）</li></ul></li><li>列表 -&gt; list</li><li>元祖 -&gt; tuple</li><li>字典 -&gt; dict</li><li>集合 -&gt; set</li></ol></li></ul><p>上述6个数据类型中，前2个是基本数据类型，细分的话是4个。</p><p>每个数据类型后面跟着的的英文是其在Python中的名字，也代表着转换函数的名称。</p><blockquote><p>例如：<code>a = int(&#39;123&#39;)</code>，会将字符串’123’转换为整数123，并赋值给变量 <code>a</code></p></blockquote><h3 id="数据运算"><a href="#数据运算" class="headerlink" title="数据运算"></a>数据运算</h3><p>不同数据类型的变量在进行运算的时候一般不能直接运算。</p><blockquote><p>例如：<code>a = &#39;1&#39; + 2</code>会报错</p></blockquote><p>要进行数据运算时需要相同类型才能进行运算</p><blockquote><p>例如：<code>a = int(&#39;1&#39;) + 2</code>，才可以把字符串<code>&#39;1&#39;</code>转换为整数<code>1</code>和整数<code>2</code>进行加法运算。 </p><p>注意：浮点型float可以和整数int直接运算，例如<code>a = 1.0 + 2</code>，得到的结果会是<code>2.0</code>，也就是会将整数转换为浮点数进行计算。</p></blockquote><p>而像列表、元祖、字典和集合属于特殊的数据类型，用于特殊的目的，他们的运算方式会比较特殊，后面再补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;内容&quot;&gt;&lt;a href=&quot;#内容&quot; class=&quot;headerlink&quot; title=&quot;内容&quot;&gt;&lt;/a&gt;内容&lt;/h2&gt;&lt;p&gt;基本的前提知识和基本数据类型的运算等。&lt;/p&gt;
&lt;h2 id=&quot;到底在学什么&quot;&gt;&lt;a href=&quot;#到底在学什么&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="Python" scheme="http://bean.ink/categories/Python/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Python" scheme="http://bean.ink/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>查询本机IP</title>
    <link href="http://bean.ink/2019/02/10/%E6%9F%A5%E8%AF%A2%E6%9C%AC%E6%9C%BAIP/"/>
    <id>http://bean.ink/2019/02/10/查询本机IP/</id>
    <published>2019-02-10T02:47:47.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>运行Bash脚本得到本机IP</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="function"><span class="title">get_ip</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> IP=$( ip addr | egrep -o <span class="string">'[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;'</span> | egrep -v <span class="string">"^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\."</span> | head -n 1 )</span><br><span class="line">    [ -z <span class="variable">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )</span><br><span class="line">    [ -z <span class="variable">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;IP&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> $(get_ip)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h1&gt;&lt;p&gt;运行Bash脚本得到本机IP&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Linux" scheme="http://bean.ink/categories/Linux/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Linux" scheme="http://bean.ink/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Centos下防火墙+ss多端口脚本</title>
    <link href="http://bean.ink/2019/02/10/Centos%E4%B8%8B%E9%98%B2%E7%81%AB%E5%A2%99-ss%E5%A4%9A%E7%AB%AF%E5%8F%A3%E8%84%9A%E6%9C%AC/"/>
    <id>http://bean.ink/2019/02/10/Centos下防火墙-ss多端口脚本/</id>
    <published>2019-02-10T02:40:31.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h1><p>开启SS之后，添加多端口再去打开防火墙比较麻烦，做了一个一键脚本。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="简易，不带Shadowsocks安装检查"><a href="#简易，不带Shadowsocks安装检查" class="headerlink" title="简易，不带Shadowsocks安装检查"></a>简易，不带Shadowsocks安装检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">method=<span class="string">"aes-256-cfb"</span></span><br><span class="line">mup=<span class="string">"6001"</span></span><br><span class="line"><span class="built_in">log</span>=<span class="string">"./add.log"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> -e -n <span class="string">"add: &#123;\"server_port\": <span class="variable">$1</span>, \"password\":\"<span class="variable">$2</span>\"&#125;"</span> &gt; /dev/udp/127.0.0.1/<span class="variable">$mup</span></span><br><span class="line"></span><br><span class="line">tcp=$(firewall-cmd --zone=public --add-port=<span class="variable">$1</span>/tcp --permanent)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"TCP端口 <span class="variable">$1</span> 开放操作: <span class="variable">$tcp</span>"</span></span><br><span class="line"></span><br><span class="line">udp=$(firewall-cmd --zone=public --add-port=<span class="variable">$1</span>/udp --permanent)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"udp端口 <span class="variable">$1</span> 开放操作: <span class="variable">$udp</span>"</span></span><br><span class="line"></span><br><span class="line">rel=$(firewall-cmd --reload)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">"防火墙重启操作: <span class="variable">$rel</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"IP:<span class="variable">$(curl ipinfo.io/ip)</span> 端口:<span class="variable">$1</span> 密码:<span class="variable">$2</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -f <span class="string">"<span class="variable">$log</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e -n <span class="string">"\"<span class="variable">$1</span>\":\"<span class="variable">$2</span>\""</span> &gt;&gt; add.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> -e -n <span class="string">",\n\"<span class="variable">$1</span>\":\"<span class="variable">$2</span>\""</span> &gt;&gt; add.log</span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># base64链接</span></span><br><span class="line">link=$( base64 &lt;&lt;&lt; <span class="string">"<span class="variable">$method</span>:<span class="variable">$2</span>@<span class="variable">$(get_ip)</span>:<span class="variable">$1</span>"</span> )</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"ss://<span class="variable">$link</span>"</span></span><br></pre></td></tr></table></figure><p>其中获得IP的函数，依赖curl，需要能够访问两个网站：<br>‘ipinfo.io’<br>和<br>‘ipv4.icanhazip.com’</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">get_ip</span></span>()&#123;</span><br><span class="line">  IP = $(curl ipinfo.io/ip)</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;IP&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">get_ip</span></span>()&#123;</span><br><span class="line">  IP = $(curl ipv4.icanhazip.com)</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$&#123;IP&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过查看本地网络连接信息的方式也可，用正则表达式筛选</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">get_ip</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> IP=$( ip addr | egrep -o <span class="string">'[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;'</span> | egrep -v <span class="string">"^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\."</span> | head -n 1 )</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;IP&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带安装检查"><a href="#带安装检查" class="headerlink" title="带安装检查"></a>带安装检查</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些常量</span></span><br><span class="line">method=<span class="string">"aes-256-cfb"</span></span><br><span class="line">mup=<span class="string">"6001"</span></span><br><span class="line"><span class="built_in">log</span>=<span class="string">"./add.log"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">install_sth</span></span>()&#123;</span><br><span class="line">    <span class="built_in">source</span> /etc/os-release</span><br><span class="line">    <span class="keyword">case</span> <span class="variable">$ID</span> <span class="keyword">in</span></span><br><span class="line">        debian|ubuntu|devuan)</span><br><span class="line">            apt-get install -y <span class="variable">$1</span></span><br><span class="line">            ;;</span><br><span class="line">        centos|fedora|rhel)</span><br><span class="line">            yum install -y <span class="variable">$1</span></span><br><span class="line">            ;;</span><br><span class="line">        *)</span><br><span class="line">            <span class="built_in">exit</span> 1</span><br><span class="line">            ;;</span><br><span class="line">    <span class="keyword">esac</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">get_ip</span></span>()&#123;</span><br><span class="line">    <span class="built_in">local</span> IP=$( ip addr | egrep -o <span class="string">'[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;'</span> | egrep -v <span class="string">"^192\.168|^172\.1[6-9]\.|^172\.2[0-9]\.|^172\.3[0-2]\.|^10\.|^127\.|^255\.|^0\."</span> | head -n 1 )</span><br><span class="line">    [ -z <span class="variable">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )</span><br><span class="line">    [ -z <span class="variable">$&#123;IP&#125;</span> ] &amp;&amp; IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$&#123;IP&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">add_port</span></span>()&#123;</span><br><span class="line">    <span class="built_in">echo</span> -e -n <span class="string">"add: &#123;\"server_port\": <span class="variable">$1</span>, \"password\":\"<span class="variable">$2</span>\"&#125;"</span> &gt; /dev/udp/127.0.0.1/<span class="variable">$mup</span></span><br><span class="line">    tcp=$(firewall-cmd --zone=public --add-port=<span class="variable">$1</span>/tcp --permanent)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"TCP端口 <span class="variable">$1</span> 开放操作: <span class="variable">$tcp</span>"</span></span><br><span class="line"></span><br><span class="line">    udp=$(firewall-cmd --zone=public --add-port=<span class="variable">$1</span>/udp --permanent)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"udp端口 <span class="variable">$1</span> 开放操作: <span class="variable">$udp</span>"</span></span><br><span class="line"></span><br><span class="line">    rel=$(firewall-cmd --reload)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"防火墙重启操作: <span class="variable">$rel</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"IP:<span class="variable">$(get_ip)</span> 端口:<span class="variable">$1</span> 密码:<span class="variable">$2</span>"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># base64链接</span></span><br><span class="line">    link=$( base64 &lt;&lt;&lt; <span class="string">"<span class="variable">$method</span>:<span class="variable">$2</span>@<span class="variable">$(get_ip)</span>:<span class="variable">$1</span>"</span> )</span><br><span class="line"></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"ss://<span class="variable">$link</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">start_check</span></span>()&#123;</span><br><span class="line">    process=`ps aux | grep ssserver | grep -v grep`;</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"<span class="variable">$process</span>"</span> == <span class="string">""</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Shaodwsock is not running"</span></span><br><span class="line">        ssserver -p 443 -k bean -m aes-256-cfb --manager-address 127.0.0.1:6001 -d start</span><br><span class="line">        firewall-cmd --zone=public --add-port=443/tcp --permanent</span><br><span class="line">        firewall-cmd --zone=public --add-port=443/udp --permanent</span><br><span class="line">        firewall-cmd --reload</span><br><span class="line">        <span class="keyword">if</span> [ -f <span class="string">"<span class="variable">$log</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> `cat <span class="variable">$log</span>`</span><br><span class="line">                <span class="keyword">do</span></span><br><span class="line">                line=$(<span class="built_in">echo</span> <span class="variable">$line</span> | tr -d <span class="string">"\""</span>)</span><br><span class="line">                por=<span class="variable">$&#123;line%:*&#125;</span></span><br><span class="line">                <span class="built_in">pwd</span>=<span class="variable">$&#123;line#*:&#125;</span></span><br><span class="line">                add_port <span class="variable">$por</span> <span class="variable">$pwd</span></span><br><span class="line">                <span class="built_in">echo</span> <span class="string">"port:<span class="variable">$por</span>,pwd:<span class="variable">$pwd</span>"</span></span><br><span class="line">            <span class="keyword">done</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Shaodwsock is running"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! [ -x <span class="string">"<span class="variable">$(command -v pip)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'Python-pip is not installed.'</span></span><br><span class="line">  install_sth epel-release &gt;&amp;1</span><br><span class="line">  install_sth python-pip &gt;&amp;1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ! [ -x <span class="string">"<span class="variable">$(command -v ssserver)</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">'Shadowsocks is not installed.'</span></span><br><span class="line">  pip install shadowsocks</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">start_check</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">"<span class="variable">$1</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Add new <span class="variable">$2</span>@<span class="variable">$1</span>"</span></span><br><span class="line">    add_port <span class="variable">$1</span> <span class="variable">$2</span></span><br><span class="line">    <span class="built_in">echo</span> -e <span class="string">"\"<span class="variable">$1</span>\":\"<span class="variable">$2</span>\""</span> &gt;&gt; add.log</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"No port to Add"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="一键安装"><a href="#一键安装" class="headerlink" title="一键安装"></a>一键安装</h3><pre><code>wget --no-check-certificate https://raw.githubusercontent.com/BeanYa/OneScript/master/plane.sh &amp;&amp; bash plane.sh</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;目的&quot;&gt;&lt;a href=&quot;#目的&quot; class=&quot;headerlink&quot; title=&quot;目的&quot;&gt;&lt;/a&gt;目的&lt;/h1&gt;&lt;p&gt;开启SS之后，添加多端口再去打开防火墙比较麻烦，做了一个一键脚本。&lt;/p&gt;
&lt;h2 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=
      
    
    </summary>
    
      <category term="Linux" scheme="http://bean.ink/categories/Linux/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Linux" scheme="http://bean.ink/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Travis+Hexo自动推送博客</title>
    <link href="http://bean.ink/2019/02/06/Travis-Hexo%E8%87%AA%E5%8A%A8%E6%8E%A8%E9%80%81%E5%8D%9A%E5%AE%A2/"/>
    <id>http://bean.ink/2019/02/06/Travis-Hexo自动推送博客/</id>
    <published>2019-02-06T22:42:02.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简-介"><a href="#简-介" class="headerlink" title="简 介"></a>简 介</h1><h2 id="Hexo是什么"><a href="#Hexo是什么" class="headerlink" title="Hexo是什么"></a>Hexo是什么</h2><pre><code>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。本Blog也是基于Hexo搭建。</code></pre><h2 id="Travis是什么"><a href="#Travis是什么" class="headerlink" title="Travis是什么"></a>Travis是什么</h2><pre><code>Travis CI 是目前新兴的开源持续集成构建项目，它与jenkins，GO的很明显的特别在于采用yaml格式，同时他是在在线的服务，不像jenkins需要你本地打架服务器，简洁清新独树一帜。目前大多数的github项目都已经移入到Travis CI的构建队列中，据说Travis CI每天运行超过4000次完整构建。对于做开源项目或者github的使用者，如果你的项目还没有加入Travis CI构建队列，那么我真的想对你说out了。  </code></pre><h1 id="使用原因"><a href="#使用原因" class="headerlink" title="使用原因"></a>使用原因</h1><ul><li>单纯的使用Hexo提供的hexo depoly，将编译后的静态页面上传到GitHubPage还不够。</li><li>如果发生数据丢失、硬盘损坏等，项目文件丢失了。单纯的从编译好的静态页面文件并不能还原Hexo的项目文件，最重要的是项目中的Markdown文件的丢失。</li><li>不用再调主题</li></ul><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="注册Travis"><a href="#注册Travis" class="headerlink" title="注册Travis"></a>注册Travis</h2><p>Travis支持GitHub账号直接登录，直接用GitHub账号授权即可。</p><p>注册后如图</p><p><img src="https://i.loli.net/2019/02/06/5c5afb068ebdf.jpg" alt=""></p><p>左侧选项卡点击加号，激活你的GitHubPage项目。</p><h2 id="GitHub-准备"><a href="#GitHub-准备" class="headerlink" title="GitHub 准备"></a>GitHub 准备</h2><h3 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h3><p>GitHubPage对应的项目中，需要新建一个分支，名字任意，用来保存Hexo项目。</p><h3 id="授权准备"><a href="#授权准备" class="headerlink" title="授权准备"></a>授权准备</h3><ul><li>进入GitHub的账号设置</li></ul><p><img src="https://i.loli.net/2019/02/06/5c5afc7c753b2.jpg" alt="账号设置"></p><ul><li>选择Developer settings</li></ul><p><img src="https://i.loli.net/2019/02/07/5c5be272b6dc2.jpg" alt="Developer settings"></p><ul><li>选择Personal Acess Token</li></ul><p><img src="https://i.loli.net/2019/02/06/5c5afc7c5b4e7.jpg" alt="Personal Acess Token"></p><ul><li>点击右侧的Generate new Token</li></ul><p><img src="https://i.loli.net/2019/02/06/5c5afdb0111cc.jpg" alt="Generate new Token"></p><ul><li>勾选如下权限</li></ul><p><img src="https://i.loli.net/2019/02/06/5c5afe1f2dcc3.jpg" alt="权限设置"></p><ul><li><p>生成Token并复制</p></li><li><p>回到Travis里，在激活的项目右侧点击Setting，下方添加变量’GH_TOKEN’，值为刚刚生成的Token</p></li><li><p>在Hexo项目中，新建’.travis.yml’文件，填入：</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># S: Build Lifecycle</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#before_script:</span></span><br><span class="line"><span class="comment"># - npm install -g gulp</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">init</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">"@Github用户名@"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">"@Github邮箱@"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"Update docs"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="attr">master:master</span></span><br><span class="line"><span class="comment"># E: Build LifeCycle</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line"><span class="attr">only:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">@创建的分支@</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">- GH_REF:</span> <span class="string">@项目地址@</span></span><br></pre></td></tr></table></figure><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ul><li>使用方法即普通的Git add-&gt;commit-&gt;push 一套Combo，Travis检测到变动会通过trvais.yml编译并提交到master里，Token已经给了Travis写入权限了。</li></ul><h2 id="最后结果"><a href="#最后结果" class="headerlink" title="最后结果"></a>最后结果</h2><p>最后你会在GitHubPage的仓库里看到master分支和创建的hexo项目分支，其中hexo项目分支是自己手动git push上去的，而master分支即展示在GitHubPage上的静态页面是Travis编译完成并push的。</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://www.2cto.com/kf/201605/505702.html" target="_blank" rel="noopener"></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简-介&quot;&gt;&lt;a href=&quot;#简-介&quot; class=&quot;headerlink&quot; title=&quot;简 介&quot;&gt;&lt;/a&gt;简 介&lt;/h1&gt;&lt;h2 id=&quot;Hexo是什么&quot;&gt;&lt;a href=&quot;#Hexo是什么&quot; class=&quot;headerlink&quot; title=&quot;Hexo是什么
      
    
    </summary>
    
      <category term="Note" scheme="http://bean.ink/categories/Note/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
  </entry>
  
  <entry>
    <title>二进制相关</title>
    <link href="http://bean.ink/2018/11/02/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%9B%B8%E5%85%B3/"/>
    <id>http://bean.ink/2018/11/02/二进制相关/</id>
    <published>2018-11-02T16:00:36.000Z</published>
    <updated>2019-08-06T06:36:29.655Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用二进制"><a href="#常用二进制" class="headerlink" title="常用二进制"></a>常用二进制</h1><script type="math/tex; mode=display">2^0 = 1 \qquad 2^1 = 2 \qquad 2^2 = 4 \qquad 2^3 = 8 \qquad 2^4 = 16 \qquad 2^5 = 32\\2^6 = 64 \qquad 2^7 = 128 \qquad 2^8 = 256 \qquad 2^9 = 512 \qquad 2^{10} = 1024\\</script><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h2 id="与"><a href="#与" class="headerlink" title="与"></a>与</h2><p>&amp; 同为1，结果为1</p><h2 id="或"><a href="#或" class="headerlink" title="或"></a>或</h2><p>| 有一为1</p><h2 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h2><p>同0异1</p><h2 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h2><p>1变0，0变1</p><h2 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h2><p>全部左移若干位，高位丢弃，低位补0</p><h2 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h2><p>右移若干位，对无符号数，不同编译器处理不同，高位补符号位（算术右移）或补0（逻辑右移）</p><h1 id="二进制运算"><a href="#二进制运算" class="headerlink" title="二进制运算"></a>二进制运算</h1><h2 id="加"><a href="#加" class="headerlink" title="加"></a>加</h2><p>$0+0=0 \quad 0+1=1 \quad 1+1=10 (进位)$</p><h2 id="减"><a href="#减" class="headerlink" title="减"></a>减</h2><p>$0-0=0 \quad 0-1=1(向高位借位) \quad 1-0=1 \quad 1-1=0 (模二加运算或异或运算)$</p><h2 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h2><p>$0 \times 0 = 0 \quad 0 \times 1 = 0 \quad 1 \times 0 = 0 \quad 1 \times 1 = 1$</p><h2 id="除"><a href="#除" class="headerlink" title="除"></a>除</h2><p>$0 ÷ 0 = 0 \quad 0÷1 = 0 \quad 1÷0 = 0 (无意义) \quad 1÷1 = 1$</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用二进制&quot;&gt;&lt;a href=&quot;#常用二进制&quot; class=&quot;headerlink&quot; title=&quot;常用二进制&quot;&gt;&lt;/a&gt;常用二进制&lt;/h1&gt;&lt;script type=&quot;math/tex; mode=display&quot;&gt;
2^0 = 1 \qquad 2^1 = 2
      
    
    </summary>
    
      <category term="Note" scheme="http://bean.ink/categories/Note/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Binary" scheme="http://bean.ink/tags/Binary/"/>
    
  </entry>
  
  <entry>
    <title>Computer-Network</title>
    <link href="http://bean.ink/2018/11/01/Note-2018-11-01-Computer-Network/"/>
    <id>http://bean.ink/2018/11/01/Note-2018-11-01-Computer-Network/</id>
    <published>2018-11-01T14:28:51.000Z</published>
    <updated>2019-08-06T06:36:29.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h1><p>32位的连续1，用于划分子网。</p><p>例：1111 1111 1111 1111 1111 1111 1111 1111 = 255 255 255 255 = 255.255.255.255</p><h1 id="CIDR"><a href="#CIDR" class="headerlink" title="CIDR"></a>CIDR</h1><p>192.168.1.0/24，表示32位中前24位为网络前缀（个人理解为主路由的IP地址），即还有8位用于表示<code>SubnetID</code>与<code>HostID</code></p><p>例：<br>192.168.1.0/24 使用掩码255.255.255.240 划分子网，其可用子网数为（），每个子网内可用主机地址数为（）</p><ul><li>$Length(255.255.255.240)= 8+8+8+4 = 28$，子网数为 $2^{28-24}=2^4=16$个，除去子网全0和全1的地址，子网数为$16-2=14$个。</li><li>32位中剩余4位，同划分子网，也有$16$个HostID，再去掉全0和全1<br>答案： $14\quad14$</li></ul><h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><ul><li>HTTP 协议是TCP/IP家族的一员，工作于应用层。</li><li>构建于TCP/IP上，默认端口为80</li><li>HTTP的连接是无状态的</li></ul><h2 id="HTTP包"><a href="#HTTP包" class="headerlink" title="HTTP包"></a>HTTP包</h2><p>HTTP的包形如：</p><pre><code>&lt;Method&gt; &lt;RequestURL&gt; &lt;Version&gt;&lt;Headers&gt;&lt;entity-body&gt;</code></pre><p>Method包含四种方法:</p><ul><li>GET — 查</li><li>POST — 增</li><li>DELETE — 删</li><li>PUT — 改</li></ul><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><p>GET方法应只用于信息的获取，不增加/修改数据或影响数据的状态，是安全且幂等的。</p><blockquote><p>幂等：对同一URL地址发起的多个请求应该得到相同的结果</p></blockquote><p>GET请求报文示例：</p><pre><code>GET /books/?sex=man&amp;name=Professional HTTP/1.1Host: www.example.comUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)Gecko/20050225 Firefox/1.0.1Connection: Keep-Alive</code></pre><p>POST请求报文示例：</p><pre><code>POST / HTTP/1.1Host: www.example.comUser-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.7.6)Gecko/20050225 Firefox/1.0.1Content-Type: application/x-www-form-urlencodedContent-Length: 40Connection: Keep-Alivesex=man&amp;name=Professional  </code></pre><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;子网掩码&quot;&gt;&lt;a href=&quot;#子网掩码&quot; class=&quot;headerlink&quot; title=&quot;子网掩码&quot;&gt;&lt;/a&gt;子网掩码&lt;/h1&gt;&lt;p&gt;32位的连续1，用于划分子网。&lt;/p&gt;
&lt;p&gt;例：1111 1111 1111 1111 1111 1111 1111 11
      
    
    </summary>
    
      <category term="Network" scheme="http://bean.ink/categories/Network/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Network" scheme="http://bean.ink/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>排序算法笔记</title>
    <link href="http://bean.ink/2018/10/31/Algorithm-2018-10-31-Sort/"/>
    <id>http://bean.ink/2018/10/31/Algorithm-2018-10-31-Sort/</id>
    <published>2018-10-31T14:20:52.000Z</published>
    <updated>2019-08-06T06:36:29.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="排序是什么"><a href="#排序是什么" class="headerlink" title="排序是什么"></a>排序是什么</h1><p>将无序的集合通过一定的算法处理，得到一个有序集合。</p><h1 id="常见的排序算法"><a href="#常见的排序算法" class="headerlink" title="常见的排序算法"></a>常见的排序算法</h1><p>按难度（个人）分：</p><ul><li>基础<ul><li><a href="#冒泡排序">冒泡排序</a></li><li><a href="#选择排序">选择排序</a></li></ul></li><li>一定难度<ul><li><a href="#归并排序">归并排序</a></li><li><a href="#原地归并排序">原地归并排序</a></li><li><a href="#桶排序">桶排序</a></li><li><a href="#二叉排序树">二叉排序树</a></li><li><a href="#快速排序">快速排序</a></li><li><a href="#堆排序">堆排序</a></li><li><a href="#希尔排序">希尔排序</a></li></ul></li></ul><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p>Bubble Sort 冒泡排序<br>它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p><h3 id="原理-过程"><a href="#原理-过程" class="headerlink" title="原理/过程"></a>原理/过程</h3><ol><li>比较相邻的两个元素（一对），如果顺序不符合要求（升序或降序），则调换顺序。</li><li>对每一对元素重复1的操作，即从第一对到最后一对，最后一个元素将会是最大的元素。</li><li>持续对上一步操作后少一个元素的集合重复1,2的操作(即每次循环排除最后一个元素的集合),直到没有元素</li></ol><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>算法可以实现原地排序，但是需要嵌套循环集合，效率较低</p><p>在上步的2中有一个关于n的循环,3中也有一个</p><p>可知时间复杂度 $ O(n^2) $</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight csharp"><figcaption><span>BubbleSort</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BubbleSort</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span>[] arr</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//获得数组长度</span></span><br><span class="line">        <span class="keyword">int</span> n = arr.getLength(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//进行n次,每一次的处理长度都减1</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="comment">//处理每次相邻比较</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n - i - <span class="number">1</span>;j++)&#123;</span><br><span class="line">                <span class="comment">//如果前一个元素大于后一个元素，不符合升序</span></span><br><span class="line">                <span class="comment">//交换前后元素</span></span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j + <span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="keyword">int</span> tmp = arr[j];</span><br><span class="line">                    arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                    arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>与冒泡相似，都是每次循环中，从$1\rightarrow n$中选出最大（或最小的）放在 $n$ 上，$n$递减并重复之前的操作。</p><h3 id="原理-过程-1"><a href="#原理-过程-1" class="headerlink" title="原理/过程"></a>原理/过程</h3><ol><li>从未排序的集合中，找到最小（大）的元素，放在序列的最起始（末尾）位置</li><li>最起始（末尾）的以前（以后）的元素有序，重复操作未排序的集合，直到所有元素排序完毕。</li></ol><h3 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>与冒泡相似，都是选择极值放置到相应的序列位置上。<br>相比冒泡的相邻比较，可能每次比较都会发生交换。<br>复杂度依旧集中在一个两层循环中，简单可得复杂度：<script type="math/tex">O(n^2)</script></p><h3 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight csharp"><figcaption><span>SelectSort</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">SelectSort</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Sort</span>(<span class="params"><span class="keyword">int</span>[] arr</span>)</span>&#123;</span><br><span class="line">        <span class="comment">//获得数组长度</span></span><br><span class="line">        <span class="keyword">int</span> n = arr.getLength(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//第n次选择，或已有n个元素排序完成</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> k = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n - <span class="number">1</span> - i;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &lt; arr[k])</span><br><span class="line">                    k = j;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//swap</span></span><br><span class="line">            <span class="keyword">int</span> tmp = arr[k];</span><br><span class="line">            arr[k] = arr[i];</span><br><span class="line">            arr[i] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><h3 id="原理-过程-2"><a href="#原理-过程-2" class="headerlink" title="原理/过程"></a>原理/过程</h3><h3 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><h3 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h3><!-- ## 归并排序### 原理/过程### 时间复杂度### 代码实现## 原地归并排序### 原理/过程### 时间复杂度### 代码实现## 桶排序### 原理/过程### 时间复杂度### 代码实现## 二叉排序树### 原理/过程### 时间复杂度### 代码实现## 堆排序### 原理/过程### 时间复杂度### 代码实现## 希尔排序### 原理/过程### 时间复杂度### 代码实现 -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;排序是什么&quot;&gt;&lt;a href=&quot;#排序是什么&quot; class=&quot;headerlink&quot; title=&quot;排序是什么&quot;&gt;&lt;/a&gt;排序是什么&lt;/h1&gt;&lt;p&gt;将无序的集合通过一定的算法处理，得到一个有序集合。&lt;/p&gt;
&lt;h1 id=&quot;常见的排序算法&quot;&gt;&lt;a href=&quot;#常
      
    
    </summary>
    
      <category term="Algorithm" scheme="http://bean.ink/categories/Algorithm/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Algorithm" scheme="http://bean.ink/tags/Algorithm/"/>
    
      <category term="Sort" scheme="http://bean.ink/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>Markdown+Latex书写公式</title>
    <link href="http://bean.ink/2018/10/31/Markdown-2018-10-31-Markdown-Latex%E4%B9%A6%E5%86%99%E5%85%AC%E5%BC%8F/"/>
    <id>http://bean.ink/2018/10/31/Markdown-2018-10-31-Markdown-Latex书写公式/</id>
    <published>2018-10-31T03:33:20.000Z</published>
    <updated>2019-08-06T06:36:29.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="在文本中插入公式"><a href="#在文本中插入公式" class="headerlink" title="在文本中插入公式"></a>在文本中插入公式</h1><h2 id="如何在正文中插入公式"><a href="#如何在正文中插入公式" class="headerlink" title="如何在正文中插入公式?"></a>如何在正文中插入公式?</h2><p>markdown中使用关键字对<code>\$ 正文 \$</code>或者<code>\$\$ 正文 \$\$</code> 在文字插入公式.</p><h2 id="1-在文字的同行中插入公式"><a href="#1-在文字的同行中插入公式" class="headerlink" title="1.在文字的同行中插入公式"></a>1.在文字的同行中插入公式</h2><p>在文字同行中插入公式使用关键字对$ 正文 $ (同行插入即不分行)<br>可能你会问，那怎么输入‘$’ 符号，使用转移字符就可以，即’$’。</p><pre><code>代码:  我是在文字同行中插入公式: $   f(x)=w^Tx+b $   </code></pre><p>我是在文字同行中插入公式: $   f(x)=w^Tx+b $   </p><pre><code>代码:  我是在文字中插入\$: $$ 我是  f(\$)=\$^Tx+b $$   </code></pre><p>我是在文字中插入$ : <script type="math/tex">f(\$)=\$^Tx+b</script>   </p><p>(以上不起另一行，但用$不起效果，用$$解决)</p><h2 id="2-插入公式另起一行"><a href="#2-插入公式另起一行" class="headerlink" title="2. 插入公式另起一行"></a>2. 插入公式另起一行</h2><pre><code>代码:  我是在新的一行中插入公式: $$   f(x)=w^Tx+b $$</code></pre><p>我是在新的一行中插入公式: <script type="math/tex">f(x)=w^Tx+b</script></p><hr><h1 id="编辑上标和下标"><a href="#编辑上标和下标" class="headerlink" title="编辑上标和下标"></a>编辑上标和下标</h1><h2 id="1-编辑单个上标或者下标"><a href="#1-编辑单个上标或者下标" class="headerlink" title="1. 编辑单个上标或者下标"></a>1. 编辑单个上标或者下标</h2><p>编辑公式使用上标的关键字是<script type="math/tex">^</script> ，下标是关键字是<script type="math/tex">_</script> .</p><pre><code>代码:  我是在公式中插入上/下标: $   f(x)=w^T_ix_i^2+b_i $</code></pre><p>在公式中插入上/下标:<script type="math/tex">f(x)=w^T_ix_i^2+b_i</script></p><h2 id="2-编辑双上标或者下标-下-上标为公式"><a href="#2-编辑双上标或者下标-下-上标为公式" class="headerlink" title="2. 编辑双上标或者下标(下/上标为公式)"></a>2. 编辑双上标或者下标(下/上标为公式)</h2><p>如果要在公式使用双下/上标或者上/下标插入公式，使用关键字是<script type="math/tex">^{上标内容}</script> ，下标是关键字是<script type="math/tex">_{下标内容}</script> 也就是把上/下标的内容包裹到<script type="math/tex">{ }</script> 内，这个也适用于其他关键字操作.</p><pre><code>代码:  我是在新的一行中插入公式: $$   f(x)=w^{T^t}_{ij}x _{x \in X_i}+b_{ij} $$</code></pre><p>在新的一行中插入公式: <script type="math/tex">f(x)=w^{T^t}_{ij}x _{x \in X_i}+b_{ij}</script></p><hr><h1 id="编辑特殊符号"><a href="#编辑特殊符号" class="headerlink" title="编辑特殊符号"></a>编辑特殊符号</h1><h2 id="1-常见的希腊符号"><a href="#1-常见的希腊符号" class="headerlink" title="1. 常见的希腊符号"></a>1. 常见的希腊符号</h2><pre><code>代码:  我是在公式中插入希腊符号: $$ f(\alpha)=\beta w^T_i x_i^{\theta}+\mu_i $$</code></pre><script type="math/tex; mode=display">f(\alpha)=\beta w^T_i x_i^{\theta}+\mu_i</script><div class="table-container"><table><thead><tr><th style="text-align:center">大写希腊符号</th><th style="text-align:center">小写希腊符号</th><th style="text-align:center">大写转义符号</th><th style="text-align:center">小写转移符号</th><th style="text-align:center">大写效果</th><th style="text-align:center">小写效果</th></tr></thead><tbody><tr><td style="text-align:center">Α</td><td style="text-align:center">α</td><td style="text-align:center"></td><td style="text-align:center">\alpha</td><td style="text-align:center"></td><td style="text-align:center">$ \alpha $</td></tr><tr><td style="text-align:center">Β</td><td style="text-align:center">β</td><td style="text-align:center"></td><td style="text-align:center">\beta</td><td style="text-align:center"></td><td style="text-align:center">$ \beta $</td></tr><tr><td style="text-align:center">Γ</td><td style="text-align:center">γ</td><td style="text-align:center">\Gamma</td><td style="text-align:center">\gamma</td><td style="text-align:center">$\Gamma $</td><td style="text-align:center">$ \gamma $</td></tr><tr><td style="text-align:center">Δ</td><td style="text-align:center">δ</td><td style="text-align:center">\Delta</td><td style="text-align:center">\delta</td><td style="text-align:center">$\Delta $</td><td style="text-align:center">$ \delta $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">ε</td><td style="text-align:center"></td><td style="text-align:center">\epsilon</td><td style="text-align:center"></td><td style="text-align:center">$ \epsilon $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">ζ</td><td style="text-align:center"></td><td style="text-align:center">\zeta</td><td style="text-align:center"></td><td style="text-align:center">$ \zeta $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">η</td><td style="text-align:center"></td><td style="text-align:center">\eta</td><td style="text-align:center"></td><td style="text-align:center">$ \eta $</td></tr><tr><td style="text-align:center">Θ</td><td style="text-align:center">θ</td><td style="text-align:center">\Theta</td><td style="text-align:center">\theta</td><td style="text-align:center">$\Theta $</td><td style="text-align:center">$ \theta $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">ι</td><td style="text-align:center"></td><td style="text-align:center">\iota</td><td style="text-align:center"></td><td style="text-align:center">$ \iota $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">κ</td><td style="text-align:center"></td><td style="text-align:center">\kappa</td><td style="text-align:center"></td><td style="text-align:center">$ \kappa $</td></tr><tr><td style="text-align:center">∧</td><td style="text-align:center">λ</td><td style="text-align:center">\Lambda</td><td style="text-align:center">\lambda</td><td style="text-align:center">$\Lambda $</td><td style="text-align:center">$ \lambda $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">μ</td><td style="text-align:center"></td><td style="text-align:center">\mu</td><td style="text-align:center"></td><td style="text-align:center">$ \mu $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">ν</td><td style="text-align:center"></td><td style="text-align:center">\nu</td><td style="text-align:center"></td><td style="text-align:center">$ \nu $</td></tr><tr><td style="text-align:center">Ξ</td><td style="text-align:center">ξ</td><td style="text-align:center">\Xi</td><td style="text-align:center">\xi</td><td style="text-align:center">$\Xi $</td><td style="text-align:center">$ \xi $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">ρ</td><td style="text-align:center"></td><td style="text-align:center">\omicron</td><td style="text-align:center"></td><td style="text-align:center">$ \omicron $</td></tr><tr><td style="text-align:center">∏</td><td style="text-align:center">π</td><td style="text-align:center">\Pi</td><td style="text-align:center">\pi</td><td style="text-align:center">$\Pi $</td><td style="text-align:center">$ \pi $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">ο</td><td style="text-align:center"></td><td style="text-align:center">\rho</td><td style="text-align:center"></td><td style="text-align:center">$ \rho $</td></tr><tr><td style="text-align:center">∑</td><td style="text-align:center">σ</td><td style="text-align:center">\Sigma</td><td style="text-align:center">\sigma</td><td style="text-align:center">$\Sigma $</td><td style="text-align:center">$ \sigma $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">τ</td><td style="text-align:center"></td><td style="text-align:center">\tau</td><td style="text-align:center"></td><td style="text-align:center">$ \tau $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">υ</td><td style="text-align:center"></td><td style="text-align:center">\upsilon</td><td style="text-align:center"></td><td style="text-align:center">$ \upsilon $</td></tr><tr><td style="text-align:center">Φ</td><td style="text-align:center">φ</td><td style="text-align:center">\Phi</td><td style="text-align:center">\phi</td><td style="text-align:center">$\Phi $</td><td style="text-align:center">$ \phi $</td></tr><tr><td style="text-align:center"></td><td style="text-align:center">χ</td><td style="text-align:center"></td><td style="text-align:center">\chi</td><td style="text-align:center"></td><td style="text-align:center">$ \chi $</td></tr><tr><td style="text-align:center">Ψ</td><td style="text-align:center">ξ</td><td style="text-align:center">\Psi</td><td style="text-align:center">\psi</td><td style="text-align:center">$\Psi $</td><td style="text-align:center">$ \psi $</td></tr><tr><td style="text-align:center">Ω</td><td style="text-align:center">ξ</td><td style="text-align:center">\Omega</td><td style="text-align:center">\omega</td><td style="text-align:center">$\Omega $</td><td style="text-align:center">$ \omega $</td></tr></tbody></table></div><h2 id="2-常见的数学符号"><a href="#2-常见的数学符号" class="headerlink" title="2. 常见的数学符号"></a>2. 常见的数学符号</h2><p>编辑数学符号同样也是通过转义字符来实现的，即$ \ $ ，转移字符配合不同指令即可$ \alpha $ .</p><pre><code>代码:  带数学符号的公式: $$   L(f) = \sum_{i=1}^D(\tilde{y_i}-y_i)^2=\sum_{i=1}^D(wx_i+b-y_i)^2 $$</code></pre><p>公式: <script type="math/tex">L(f) = \sum_{i=1}^D(\tilde{y_i}-y_i)^2=\sum_{i=1}^D(wx_i+b-y_i)^2</script></p><hr><h1 id="常用的数学符号"><a href="#常用的数学符号" class="headerlink" title="常用的数学符号"></a>常用的数学符号</h1><div class="table-container"><table><thead><tr><th style="text-align:center">转义符号</th><th style="text-align:center">效果</th></tr></thead><tbody><tr><td style="text-align:center">\log_{x}y = \arccos z</td><td style="text-align:center">$ \log_{x}y = \arccos z $</td></tr><tr><td style="text-align:center">\frac{a} {b}</td><td style="text-align:center">$ \frac{a} {b} $</td></tr><tr><td style="text-align:center">_{a}^{b}\textrm{C}</td><td style="text-align:center">$ _{a}^{b}\textrm{C} $</td></tr><tr><td style="text-align:center">\frac{\partial {z_x}}{\partial x}</td><td style="text-align:center">$ \frac{\partial {z_x}}{\partial x} $</td></tr><tr><td style="text-align:center">\frac{\partial^2 {x}}{\partial x^2}</td><td style="text-align:center">$ \frac{\partial^2 {x}}{\partial x^2} $</td></tr><tr><td style="text-align:center">\frac{\mathrm{d} y}{\mathrm{d} x}</td><td style="text-align:center">$ \frac{\mathrm{d} y}{\mathrm{d} x} $</td></tr><tr><td style="text-align:center">\int x</td><td style="text-align:center">$ \int x $</td></tr><tr><td style="text-align:center">\int_{a}^{b}x</td><td style="text-align:center">$ \int_{a}^{b}x $</td></tr><tr><td style="text-align:center">\oint a</td><td style="text-align:center">$ \oint a $</td></tr><tr><td style="text-align:center">\oint_{a}^{b}C</td><td style="text-align:center">$ \oint_{a}^{b}C $</td></tr><tr><td style="text-align:center">\iint_{a}^{v}C</td><td style="text-align:center">$ \iint_{a}^{v}C $</td></tr><tr><td style="text-align:center">\bigcap A</td><td style="text-align:center">$ \bigcap A $</td></tr><tr><td style="text-align:center">\bigcap_{a}^{b}C</td><td style="text-align:center">$ \bigcap_{a}^{b}C $</td></tr><tr><td style="text-align:center">\bigcup c</td><td style="text-align:center">$ \bigcup c $</td></tr><tr><td style="text-align:center">\lim_{c}X</td><td style="text-align:center">$ \lim_{c}X $</td></tr><tr><td style="text-align:center">\sum a</td><td style="text-align:center">$ \sum a $</td></tr><tr><td style="text-align:center">\sum_{a}^{b}C</td><td style="text-align:center">$ \sum_{a}^{b}C $</td></tr><tr><td style="text-align:center">\sqrt{X}</td><td style="text-align:center">$ \sqrt{X} $</td></tr><tr><td style="text-align:center">\sqrt[a]{X}</td><td style="text-align:center">$ \sqrt[a]{X} $</td></tr><tr><td style="text-align:center">\prod X</td><td style="text-align:center">$ \prod X $</td></tr><tr><td style="text-align:center">\prod_{a}^{b} X</td><td style="text-align:center">$ \prod_{a}^{b} X $</td></tr><tr><td style="text-align:center">\coprod X</td><td style="text-align:center">$ \coprod X $</td></tr><tr><td style="text-align:center">\coprod_{a}^{b} X</td><td style="text-align:center">$ \coprod_{a}^{b} X $</td></tr><tr><td style="text-align:center">\left [ a \right ]</td><td style="text-align:center">$ \left [ a \right ]  $</td></tr><tr><td style="text-align:center">\left ( a\right )</td><td style="text-align:center">$ \left ( a\right )  $</td></tr><tr><td style="text-align:center">\left { a \right }</td><td style="text-align:center"><script type="math/tex">\left\{ a \right\}</script></td></tr><tr><td style="text-align:center">\left&#124; a \right&#124;</td><td style="text-align:center">$ \left&#124; a \right&#124; $</td></tr><tr><td style="text-align:center">\left \langle a \right \rangle</td><td style="text-align:center">$ \left \langle a \right \rangle $</td></tr><tr><td style="text-align:center">\left \lfloor a \right \rfloor</td><td style="text-align:center">$ \left \lfloor a \right \rfloor $</td></tr><tr><td style="text-align:center">\left \lceil a \right \rceil</td><td style="text-align:center">$ \left \lceil a \right \rceil $</td></tr><tr><td style="text-align:center">\in A</td><td style="text-align:center">$ \in A $</td></tr><tr><td style="text-align:center">\supseteqq A</td><td style="text-align:center">$ \supseteqq A $</td></tr><tr><td style="text-align:center">\approx</td><td style="text-align:center">$ \approx $</td></tr><tr><td style="text-align:center">\sum\limits_{i=1}^{\infty}</td><td style="text-align:center">$ \sum\limits_{i=1}^{\infty} $</td></tr></tbody></table></div><h1 id="可视化编辑器"><a href="#可视化编辑器" class="headerlink" title="可视化编辑器"></a>可视化编辑器</h1><p><a href="https://latex.codecogs.com/eqneditor/editor.php" target="_blank" rel="noopener">可视化编辑器</a></p><iframe src="https://latex.codecogs.com/eqneditor/editor.php" height="500" width="100%"></iframe>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;在文本中插入公式&quot;&gt;&lt;a href=&quot;#在文本中插入公式&quot; class=&quot;headerlink&quot; title=&quot;在文本中插入公式&quot;&gt;&lt;/a&gt;在文本中插入公式&lt;/h1&gt;&lt;h2 id=&quot;如何在正文中插入公式&quot;&gt;&lt;a href=&quot;#如何在正文中插入公式&quot; class=&quot;
      
    
    </summary>
    
      <category term="Markdown" scheme="http://bean.ink/categories/Markdown/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Markdown" scheme="http://bean.ink/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>树的常用公式</title>
    <link href="http://bean.ink/2018/10/30/Algorithm-2018-10-30-%E6%A0%91%E7%9A%84%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/"/>
    <id>http://bean.ink/2018/10/30/Algorithm-2018-10-30-树的常用公式/</id>
    <published>2018-10-30T21:08:15.000Z</published>
    <updated>2019-08-06T06:36:29.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>根据树的叶子结点个数、非叶子节点个数、树的深度等等，推导出的公式、定理也有不少，可以自己手工推算一下，记忆会更深刻，此博文只介绍公式、定理内容，不作推导。</p><ol><li>二叉树第i层上至多有$ 2^i-1 $个结点，其中i大于等于1，$ 2^i $表示2的i次方；</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;根据树的叶子结点个数、非叶子节点个数、树的深度等等，推导出的
      
    
    </summary>
    
      <category term="Datastruct" scheme="http://bean.ink/categories/Datastruct/"/>
    
    
      <category term="Tree" scheme="http://bean.ink/tags/Tree/"/>
    
      <category term="Algorithm" scheme="http://bean.ink/tags/Algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="http://bean.ink/2018/10/30/Markdown-2018-10-30-Markdown%E8%AF%AD%E6%B3%95/"/>
    <id>http://bean.ink/2018/10/30/Markdown-2018-10-30-Markdown语法/</id>
    <published>2018-10-30T20:11:46.000Z</published>
    <updated>2019-08-06T06:36:29.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><blockquote><p><a href="#1-Markdown是什么？">Markdown是什么</a><br><a href="#2-谁创造了它？"><em>谁</em>创造了它？</a><br><a href="#3-为什么要使用它？"><em>为什么</em>要使用它？</a><br><a href="#4-怎么使用？"><em>怎么</em>使用？</a><br><a href="#5-谁在用？"><em>谁</em>在用？</a><br><a href="#6-尝试一下">尝试一下</a></p></blockquote><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="1-Markdown是什么？"><a href="#1-Markdown是什么？" class="headerlink" title="1. Markdown是什么？"></a>1. Markdown<em>是什么</em>？</h3><p><strong>Markdown</strong>是一种轻量级<strong>标记语言</strong>，它以纯文本形式(<em>易读、易写、易更改</em>)编写文档，并最终以HTML格式发布。<br><strong>Markdown</strong>也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。    </p><h3 id="2-谁创造了它？"><a href="#2-谁创造了它？" class="headerlink" title="2. 谁创造了它？"></a>2. <em>谁</em>创造了它？</h3><p>它由<a href="http://www.aaronsw.com/" target="_blank" rel="noopener"><strong>Aaron Swartz</strong></a>和<strong>John Gruber</strong>共同设计，<strong>Aaron Swartz</strong>就是那位于去年（<em>2013年1月11日</em>）自杀,有着<strong>开挂</strong>一般人生经历的程序员。维基百科对他的<a href="http://zh.wikipedia.org/wiki/%E4%BA%9A%E4%BC%A6%C2%B7%E6%96%AF%E6%B2%83%E8%8C%A8" target="_blank" rel="noopener">介绍</a>是：<strong>软件工程师、作家、政治组织者、互联网活动家、维基百科人</strong>。    </p><p>他有着足以让你跪拜的人生经历：    </p><ul><li><strong>14岁</strong>参与RSS 1.0规格标准的制订。     </li><li><strong>2004</strong>年入读<strong>斯坦福</strong>，之后退学。   </li><li><strong>2005</strong>年创建<a href="http://infogami.org/" target="_blank" rel="noopener">Infogami</a>，之后与<a href="http://www.reddit.com/" target="_blank" rel="noopener">Reddit</a>合并成为其合伙人。   </li><li><strong>2010</strong>年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。   </li><li><strong>2011</strong>年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。     </li><li><strong>2013</strong>年1月自杀身亡。    </li></ul><p><img src="https://github.com/younghz/Markdown/raw/master/resource/Aaron_Swartz.jpg" alt="Aaron Swartz"></p><p>天才都有早逝的归途。</p><h3 id="3-为什么要使用它？"><a href="#3-为什么要使用它？" class="headerlink" title="3. 为什么要使用它？"></a>3. <em>为什么</em>要使用它？</h3><ul><li>它是易读（看起来舒服）、易写（语法简单）、易更改<strong>纯文本</strong>。处处体现着<strong>极简主义</strong>的影子。</li><li>兼容HTML，可以转换为HTML格式发布。</li><li>跨平台使用。</li><li>越来越多的网站支持Markdown。</li><li>更方便清晰地组织你的电子邮件。（Markdown-here, Airmail）</li><li>摆脱Word（我不是认真的）。</li></ul><h3 id="4-怎么使用？"><a href="#4-怎么使用？" class="headerlink" title="4. 怎么使用？"></a>4. <em>怎么</em>使用？</h3><p>如果不算<strong>扩展</strong>，Markdown的语法绝对<strong>简单</strong>到让你爱不释手。</p><p>Markdown语法主要分为如下几大部分：<br><strong>标题</strong>，<strong>段落</strong>，<strong>区块引用</strong>，<strong>代码区块</strong>，<strong>强调</strong>，<strong>列表</strong>，<strong>分割线</strong>，<strong>链接</strong>，<strong>图片</strong>，<strong>反斜杠 <code>\</code></strong>，<strong>符号’`’</strong>。</p><h4 id="4-1-标题"><a href="#4-1-标题" class="headerlink" title="4.1 标题"></a>4.1 标题</h4><p>两种形式：<br>1）使用<code>=</code>和<code>-</code>标记一级和二级标题。</p><blockquote><p>一级标题<br><code>=========</code><br>二级标题<br><code>---------</code></p></blockquote><p>效果：</p><blockquote><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题   "></a>一级标题   </h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2></blockquote><p>2）使用<code>#</code>，可表示1-6级标题。</p><blockquote><p># 一级标题<br>## 二级标题<br>### 三级标题<br>#### 四级标题<br>##### 五级标题<br>###### 六级标题    </p></blockquote><p>效果：</p><blockquote><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6></blockquote><h4 id="4-2-段落"><a href="#4-2-段落" class="headerlink" title="4.2 段落"></a>4.2 段落</h4><p>段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用<strong>两个以上</strong>空格加上回车（引用中换行省略回车）。</p><h4 id="4-3-区块引用"><a href="#4-3-区块引用" class="headerlink" title="4.3 区块引用"></a>4.3 区块引用</h4><p>在段落的每行或者只在第一行使用符号<code>&gt;</code>,还可使用多个嵌套引用，如：</p><blockquote><p>> 区块引用<br>>&gt; 嵌套引用  </p></blockquote><p>效果：</p><blockquote><p>区块引用  </p><blockquote><p>嵌套引用</p></blockquote></blockquote><h4 id="4-4-代码区块"><a href="#4-4-代码区块" class="headerlink" title="4.4 代码区块"></a>4.4 代码区块</h4><p>代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如<br>普通段落：</p><p>void main()<br>{<br>    printf(“Hello, Markdown.”);<br>}    </p><p>代码区块：</p><pre><code>void main(){    printf(&quot;Hello, Markdown.&quot;);}</code></pre><p><strong>注意</strong>:需要和普通段落之间存在空行。</p><h4 id="4-5-强调"><a href="#4-5-强调" class="headerlink" title="4.5 强调"></a>4.5 强调</h4><p>在强调内容两侧分别加上<code>*</code>或者<code>_</code>，如：</p><blockquote><p>*斜体*，_斜体_<br>**粗体**，__粗体__</p></blockquote><p>效果：</p><blockquote><p><em>斜体</em>，<em>斜体</em><br><strong>粗体</strong>，<strong>粗体</strong></p></blockquote><h4 id="4-6-列表"><a href="#4-6-列表" class="headerlink" title="4.6 列表"></a>4.6 列表</h4><p>使用<code>·</code>、<code>+</code>、或<code>-</code>标记无序列表，如：</p><blockquote><p>-（+*） 第一项<br>-（+*） 第二项<br>- （+*）第三项</p></blockquote><p><strong>注意</strong>：标记后面最少有一个<em>空格</em>或<em>制表符</em>。若不在引用区块中，必须和前方段落之间存在空行。</p><p>效果：</p><blockquote><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul></blockquote><p>有序列表的标记方式是将上述的符号换成数字,并辅以<code>.</code>，如：</p><blockquote><p>1 . 第一项<br>2 . 第二项<br>3 . 第三项    </p></blockquote><p>效果：</p><blockquote><ol><li>第一项</li><li>第二项</li><li>第三项</li></ol></blockquote><h4 id="4-7-分割线"><a href="#4-7-分割线" class="headerlink" title="4.7 分割线"></a>4.7 分割线</h4><p>分割线最常使用就是三个或以上<code>*</code>，还可以使用<code>-</code>和<code>_</code>。</p><h4 id="4-8-链接"><a href="#4-8-链接" class="headerlink" title="4.8 链接"></a>4.8 链接</h4><p>链接可以由两种形式生成：<strong>行内式</strong>和<strong>参考式</strong>。<br><strong>行内式</strong>：</p><blockquote><p>[younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。</p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库</a>。</p></blockquote><p><strong>参考式</strong>：</p><blockquote><p>[younghz的Markdown库1][1]<br>[younghz的Markdown库2][2]<br>[1]:https:://github.com/younghz/Markdown “Markdown”<br>[2]:https:://github.com/younghz/Markdown “Markdown”    </p></blockquote><p>效果：</p><blockquote><p><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库1</a><br><a href="https:://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">younghz的Markdown库2</a></p></blockquote><p><strong>注意</strong>：上述的<code>[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;</code>不出现在区块中。</p><h4 id="4-9-图片"><a href="#4-9-图片" class="headerlink" title="4.9 图片"></a>4.9 图片</h4><p>添加图片的形式和链接相似，只需在链接的基础上前方加一个<code>！</code>。</p><h4 id="4-10-反斜杠"><a href="#4-10-反斜杠" class="headerlink" title="4.10 反斜杠\"></a>4.10 反斜杠<code>\</code></h4><p>相当于<strong>反转义</strong>作用。使符号成为普通符号。</p><h4 id="4-11-符号’-’"><a href="#4-11-符号’-’" class="headerlink" title="4.11 符号’`’"></a>4.11 符号’`’</h4><p>起到标记作用。如：</p><blockquote><p>`ctrl+a`</p></blockquote><p>效果：</p><blockquote><p><code>ctrl+a</code>    </p></blockquote><h4 id="5-谁在用？"><a href="#5-谁在用？" class="headerlink" title="5. 谁在用？"></a>5. <em>谁</em>在用？</h4><p>Markdown的使用者：</p><ul><li>GitHub</li><li>简书</li><li>Stack Overflow</li><li>Apollo</li><li>Moodle</li><li>Reddit</li><li>等等</li></ul><h4 id="6-尝试一下"><a href="#6-尝试一下" class="headerlink" title="6. 尝试一下"></a>6. 尝试一下</h4><ul><li><strong>Chrome</strong>下的插件诸如<code>stackedit</code>与<code>markdown-here</code>等非常方便，也不用担心平台受限。</li><li><strong>在线</strong>的dillinger.io评价也不错   </li><li><strong>Windowns</strong>下的MarkdownPad也用过，不过免费版的体验不是很好。    </li><li><strong>Mac</strong>下的Mou是国人贡献的，口碑很好。</li><li><strong>Linux</strong>下的ReText不错。    </li></ul><p><strong>当然，最终境界永远都是笔下是语法，心中格式化 :)。</strong></p><hr><p><strong>注意</strong>：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。<br>虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber]<br>(<a href="http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。" target="_blank" rel="noopener">http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。</a></p><hr><p>以上基本是所有traditonal markdown的语法。</p><h3 id="其它："><a href="#其它：" class="headerlink" title="其它："></a>其它：</h3><p>列表的使用(非traditonal markdown)：</p><p>用<code>|</code>表示表格纵向边界，表头和表内容用<code>-</code>隔开，并可用<code>:</code>进行对齐设置，两边都有<code>:</code>则表示居中，若不加<code>:</code>则默认左对齐。</p><div class="table-container"><table><thead><tr><th style="text-align:center">代码库</th><th>链接</th></tr></thead><tbody><tr><td style="text-align:center">MarkDown</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr><tr><td style="text-align:center">MarkDownCopy</td><td><a href="https://github.com/younghz/Markdown" title="Markdown" target="_blank" rel="noopener">https://github.com/younghz/Markdown</a></td></tr></tbody></table></div><p>关于其它扩展语法可参见具体工具的使用说明。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;主要内容&quot;&gt;&lt;a href=&quot;#主要内容&quot; class=&quot;headerlink&quot; title=&quot;主要内容&quot;&gt;&lt;/a&gt;主要内容&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;#1-Markdown是什么？&quot;&gt;Markdown是什么&lt;/a&gt;&lt;br&gt;&lt;a h
      
    
    </summary>
    
      <category term="Markdown" scheme="http://bean.ink/categories/Markdown/"/>
    
    
      <category term="Note" scheme="http://bean.ink/tags/Note/"/>
    
      <category term="Markdown" scheme="http://bean.ink/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>VideoInMarkdown-Demo</title>
    <link href="http://bean.ink/2018/10/30/Markdown-2018-10-30-VideoInMarkdown-Demo/"/>
    <id>http://bean.ink/2018/10/30/Markdown-2018-10-30-VideoInMarkdown-Demo/</id>
    <published>2018-10-30T20:10:38.000Z</published>
    <updated>2019-08-06T06:36:29.659Z</updated>
    
    <content type="html"><![CDATA[<video id="video" controls preload="none" poster="http://media.w3.org/2010/05/sintel/poster.png">    <source id="mp4" src="http://media.w3.org/2010/05/sintel/trailer.mp4" type="video/mp4">    <source id="webm" src="http://media.w3.org/2010/05/sintel/trailer.webm" type="video/webm">    <source id="ogv" src="http://media.w3.org/2010/05/sintel/trailer.ogv" type="video/ogg">    <p>Your user agent does not support the HTML5 Video element.</p></video>]]></content>
    
    <summary type="html">
    
      
      
        &lt;video id=&quot;video&quot; controls preload=&quot;none&quot; poster=&quot;http://media.w3.org/2010/05/sintel/poster.png&quot;&gt;
    &lt;source id=&quot;mp4&quot; src=&quot;http://media.w3.
      
    
    </summary>
    
      <category term="Note" scheme="http://bean.ink/categories/Note/"/>
    
    
      <category term="Markdown" scheme="http://bean.ink/tags/Markdown/"/>
    
      <category term="Demo" scheme="http://bean.ink/tags/Demo/"/>
    
      <category term="Hexo" scheme="http://bean.ink/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Marching Square</title>
    <link href="http://bean.ink/2018/10/29/Algorithm-2018-10-29-Marching-Square/"/>
    <id>http://bean.ink/2018/10/29/Algorithm-2018-10-29-Marching-Square/</id>
    <published>2018-10-29T03:06:17.000Z</published>
    <updated>2019-08-06T06:36:29.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Marching-Squares-是什么"><a href="#Marching-Squares-是什么" class="headerlink" title="Marching Squares 是什么"></a>Marching Squares 是什么</h2><ul><li>Marching Squares 是一种平面图形算法，用于生成平面上的图形轮廓。</li><li>对应的，3D空间中的轮廓生成算法为Marching Cubes，将二维平面的Square，拓展至三维空间的Cube，过程类似但状态更多。</li></ul><h2 id="Marching-Squares-原理"><a href="#Marching-Squares-原理" class="headerlink" title="Marching Squares 原理"></a>Marching Squares 原理</h2><ul><li><p>将平面划分为一个正方形网格，每个网格称作一个Square，也即Wiki上提到的“图素”，每个Square拥有4个控制结点，分别是其四条边的交点，还拥有4个绘制结点，位于每条边中点，且一个控制结点又可被其他Square用作控制结点。（或者说网格上的每4个控制节点组成一个Square）</p></li><li><p>每个控制结点带有权值，并定义一个与结点数组同样规模的布尔数组。（或在类中带有一个布尔值）</p></li><li>算法开始时，定义一个阈值，遍历所有控制结点，并且将控制结点的权值与阈值比较，若大于阈值则对应位置的布尔值赋真（或相反）。</li><li>一个结点在遍历完成后拥有两种状态，0或1，每个Square拥有4个结点，则2<sup>4</sup>=16共有16种状态，而在不同状态下连接对应的两个绘制结点，即完成了一个Square的轮廓生成过程。</li><li>遍历所有的Square，也即算法名中的Marching，则完成了轮廓的绘制</li></ul><hr><h2 id="Wiki上Marching-Squares的过程图"><a href="#Wiki上Marching-Squares的过程图" class="headerlink" title="Wiki上Marching Squares的过程图"></a>Wiki上Marching Squares的过程图</h2><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Marching_squares_algorithm.svg/1065px-Marching_squares_algorithm.svg.png" alt="Marching Squares"></p><hr><h2 id="能用来干什么"><a href="#能用来干什么" class="headerlink" title="能用来干什么"></a>能用来干什么</h2><ul><li>等高线生成</li><li>我用于2D游戏的简单地形破坏生成（复杂的我不会）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Marching-Squares-是什么&quot;&gt;&lt;a href=&quot;#Marching-Squares-是什么&quot; class=&quot;headerlink&quot; title=&quot;Marching Squares 是什么&quot;&gt;&lt;/a&gt;Marching Squares 是什么&lt;/h2&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
</feed>
